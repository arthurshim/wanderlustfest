<?php
<<<<<<< HEAD
=======
// $Id: webform.module,v 1.124.2.115 2010/04/01 02:14:23 quicksketch Exp $
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

/**
 * This module provides a simple way to create forms and questionnaires.
 *
 * The initial development of this module was sponsered by ÅF Industri AB, Open
 * Source City and Karlstad University Library. Continued development sponsored
 * by Lullabot.
 *
 * @author Nathan Haug <nate@lullabot.com>
<<<<<<< HEAD
 */

/**
 * Implements hook_help().
=======
 * @author Pontus Ullgren <ullgren@user.sourceforge.net>
 */

/**
 * Implementation of hook_help().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 */
function webform_help($section = 'admin/help#webform', $arg = NULL) {
  $output = '';
  switch ($section) {
    case 'admin/settings/webform':
<<<<<<< HEAD
      module_load_include('inc', 'webform', 'includes/webform.admin');
      $type_list = webform_admin_type_list();
      $output = t('Webform enables nodes to have attached forms and questionnaires.');
      if ($type_list) {
        $output .= ' ' . t('To add one, create a !types piece of content.', array('!types' => $type_list));
      }
      else {
        $output .= ' <strong>' . t('Webform is currently not enabled on any content types.') . '</strong> ' . t('To use Webform, please enable it on at least one content type on this page.');
      }
      $output = '<p>' . $output . '</p>';
      break;
    case 'admin/content/webform':
      $output = '<p>' . t('This page lists all of the content on the site that may have a webform attached to it.') . '</p>';
      break;
    case 'admin/help#webform':
      module_load_include('inc', 'webform', 'includes/webform.admin');
      $types = webform_admin_type_list();
      if (empty($types)) {
        $types = t('Webform-enabled piece of content');
        $types_message = t('Webform is currently not enabled on any content types.') . ' ' . t('Visit the <a href="!url">Webform settings</a> page and enable Webform on at least one content type.', array('!url' => url('admin/settings/webform')));
      }
      else {
        $types_message = t('Optional: Enable Webform on multiple types by visiting the <a href="!url">Webform settings</a> page.', array('!url' => url('admin/settings/webform')));
      }
      $output = t("<p>This module lets you create forms or questionnaires and define their content. Submissions from these forms are stored in the database and optionally also sent by e-mail to a predefined address.</p>
      <p>Here is how to create one:</p>
      <ul>
        <li>!webform-types-message</li>
        <li>Go to <a href=\"!create-content\">Create content</a> and add a !types piece of content.</li>
        <li>After saving the new content, you will be redirected to the main field list of the form that will be created. Add the fields you would like on your form.</li>
        <li>Once finished adding fields, you may want to send e-mails to administrators or back to the user who filled out the form. Click on the <em>Emails</em> sub-tab underneath the <em>Webform</em> tab on the piece of content.</li>
        <li>Finally, visit the <em>Form settings</em> sub-tab under the <em>Webform</em> tab to configure remaining configurations options for your form.
          <ul>
          <li>Add a confirmation message and/or redirect URL that is to be displayed after successful submission.</li>
          <li>Set a submission limit.</li>
          <li>Determine which roles may submit the form.</li>
          <li>Advanced configuration options such as allowing drafts or show users a message indicating how they can edit their submissions.</li>
          </ul>
        </li>
        <li>Your form is now ready for viewing. After receiving submissions, you can check the results users have submitted by visiting the <em>Results</em> tab on the piece of content.</li>
      </ul>
      <p>Help on adding and configuring the components will be shown after you add your first component.</p>
      ", array('!webform-types-message' => $types_message, '!create-content' => url('node/add'), '!types' => $types));
      break;
    case 'node/%/webform/components':
      $output .= '<p>' . t('This page displays all the components currently configured for this webform node. You may add any number of components to the form, even multiple of the same type. To add a new component, fill in a name and select a type from the fields at the bottom of the table. Submit the form to create the new component or update any changed form values.') . '</p>';
      $output .= '<p>' . t('Click on any existing component\'s name to edit its settings.') . '</p>';
      break;
    case 'node/%/submission/%/resend':
      $output .= '<p>' . t('This form may be used to resend e-mails configured for this webform. Check the e-mails that need to be sent and click <em>Resend e-mails</em> to send these e-mails again.') . '</p>';
      break;
  }
=======
      $output = t('Webforms are forms and questionnaires. To add one, select <a href="!url">Create content -&gt; Webform</a>.', array('!url' => url('node/add/webform')));
      break;
    case 'admin/help#webform':
      $output = t("<p>This module lets you create forms or questionnaires and define their content. Submissions from these forms are stored in the database and optionally also sent by e-mail to a predefined address.</p>
      <p>Here is how to create one:</p>
      <ul>
       <li>Go to Create Content and add a webform</li>
       <li>Add a description to be displayed as a teaser and above the actual form.</li>
       <li>Add a confirmation message or redirect node that is to be displayed after successful submission.</li>
       <li>Add one or more components to your form.</li>
       <li>Optionally add an e-mail address to which submissions will be sent. If no email address is specified, no e-mail will be sent when submissions are made through the form.</li>
       <li>Optionally select an e-mail (or hidden) component that will be used to populate the return e-mail address on any sent e-mail.</li>
       <li>Optionally select a textfield (or hidden) component that will be used to populate the subject e-mail field on any sent e-mail.</li>
      </ul>
      <p>Help on adding and configuring the components will be shown after you add your first component.</p>
      <p>The content of submitted forms is stored in the database table <i>webform_submitted_data</i> as key-value pairs.</p>
      ");
      break;
    case 'node/add#webform':
      $output = t('A webform can be a questionnaires, contact or request forms. It can be used to let visitors make contact, register for a event or to enable a complex survey.');
      break;
    case 'node/%/edit/components':
      $output .= '<p>'. t('This page displays all the components currently configured for this webform node. You may add any number of components to the form, even multiple of the same type. To add a new component, fill in a name and select a type from the fields at the bottom of the table. Submit the form to create the new component or update any changed form values.') .'</p>';
      $output .= '<p>'. t('Click on any existing component\'s name to edit its settings.') .'</p>';
      break;
  }
  if (strstr($section, 'admin/settings/webform#')) {
    // Call help hooks in plugins:
    $components = webform_load_components(TRUE);
    foreach ($components as $key => $component) {
      $help_function = '_webform_help_'. $key;
      if (function_exists($help_function)) {
        $output .= $help_function($section);
      }
    }
  }
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

  return $output;
}

/**
<<<<<<< HEAD
 * Implements hook_menu().
=======
 * Implementation of hook_menu().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 */
function webform_menu() {
  $items = array();

  // Submissions listing.
  $items['admin/content/webform'] = array(
    'title' => 'Webforms',
    'page callback' => 'webform_admin_content',
    'access callback' => 'user_access',
<<<<<<< HEAD
    'access arguments' => array('access all webform results'),
    'description' => 'View and edit all the available webforms on your site.',
    'file' => 'includes/webform.admin.inc',
=======
    'access arguments' => array('access webform results'),
    'description' => 'View and edit all the available webforms on your site.',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'type' => MENU_NORMAL_ITEM,
  );

  // Admin Settings.
  $items['admin/settings/webform'] = array(
<<<<<<< HEAD
    'title' => 'Webform settings',
=======
    'title' => 'Webform',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'description' => 'Global configuration of webform functionality.',
<<<<<<< HEAD
    'file' => 'includes/webform.admin.inc',
=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'type' => MENU_NORMAL_ITEM,
  );

  // Node page tabs.
  $items['node/%webform_menu/done'] = array(
    'title' => 'Webform confirmation',
    'page callback' => '_webform_confirmation',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK,
  );
<<<<<<< HEAD
  $items['node/%webform_menu/webform'] = array(
    'title' => 'Webform',
    'page callback' => 'webform_components_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.components.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform/components'] = array(
    'title' => 'Form components',
    'page callback' => 'webform_components_page',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.components.inc',
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform/configure'] = array(
    'title' => 'Form settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_configure_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.pages.inc',
=======

  $items['node/%webform_menu/edit/configuration'] = array(
    'title' => 'Configuration',
    'page callback' => 'node_page_edit',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 1,
    'type' => MENU_DEFAULT_LOCAL_TASK);
  $items['node/%webform_menu/edit/components'] = array(
    'title' => 'Form components',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_components_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'webform_components.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );

<<<<<<< HEAD
  // Node e-mail forms.
  $items['node/%webform_menu/webform/emails'] = array(
    'title' => 'E-mails',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_emails_form', 1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.emails.inc',
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform/emails/%webform_menu_email'] = array(
    'title' => 'Edit e-mail settings',
    'load arguments' => array(1),
    'page arguments' => array('webform_email_edit_form', 1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'file' => 'includes/webform.emails.inc',
    'type' => MENU_CALLBACK,
  );
  $items['node/%webform_menu/webform/emails/%webform_menu_email/delete'] = array(
    'title' => 'Delete e-mail settings',
    'load arguments' => array(1),
    'page arguments' => array('webform_email_delete_form', 1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );

  // Node component forms.
  $items['node/%webform_menu/webform/components/%webform_menu_component'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
=======
  // Node component forms.
  $items['node/%webform_menu/edit/components/%webform_menu_component'] = array(
    'load arguments' => array(1, 5),
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'page arguments' => array('webform_component_edit_form', 1, 4, FALSE),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );
<<<<<<< HEAD
  $items['node/%webform_menu/webform/components/%webform_menu_component/clone'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
=======
  $items['node/%webform_menu/edit/components/%webform_menu_component/clone'] = array(
    'load arguments' => array(1, 5),
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'page arguments' => array('webform_component_edit_form', 1, 4, TRUE),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );
<<<<<<< HEAD
  $items['node/%webform_menu/webform/components/%webform_menu_component/delete'] = array(
    'load arguments' => array(1, 5),
    'page callback' => 'drupal_get_form',
=======
  $items['node/%webform_menu/edit/components/%webform_menu_component/delete'] = array(
    'load arguments' => array(1, 5),
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'page arguments' => array('webform_component_delete_form', 1, 4),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_LOCAL_TASK,
  );

<<<<<<< HEAD
  // AJAX callback for loading select list options.
  $items['webform/ajax/options/%webform_menu'] = array(
    'load arguments' => array(3),
    'page callback' => 'webform_select_options_ajax',
    'access callback' => 'node_access',
    'access arguments' => array('update', 3),
    'file' => 'components/select.inc',
    'type' => MENU_CALLBACK,
  );

=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  // Node webform results.
  $items['node/%webform_menu/webform-results'] = array(
    'title' => 'Results',
    'page callback' => 'webform_results_submissions',
    'page arguments' => array(1, FALSE, '50'),
    'access callback' => 'webform_results_access',
<<<<<<< HEAD
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
=======
    'access arguments' => array(1, 'access webform results'),
    'file' => 'webform_report.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform-results/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'webform_results_submissions',
    'page arguments' => array(1, FALSE, '50'),
    'access callback' => 'webform_results_access',
<<<<<<< HEAD
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
=======
    'access arguments' => array(1, 'access webform results'),
    'file' => 'webform_report.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'weight' => 4,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform-results/analysis'] = array(
    'title' => 'Analysis',
    'page callback' => 'webform_results_analysis',
    'page arguments' => array(1),
    'access callback' => 'webform_results_access',
<<<<<<< HEAD
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform-results/analysis/%webform_menu_component'] = array(
    'title' => 'Analysis',
    'load arguments' => array(1, 4),
    'page callback' => 'webform_results_analysis',
    'page arguments' => array(1, array(), 4),
    'access callback' => 'webform_results_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
    'type' => MENU_CALLBACK,
  );
=======
    'access arguments' => array(1, 'access webform results'),
    'file' => 'webform_report.inc',
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  $items['node/%webform_menu/webform-results/table'] = array(
    'title' => 'Table',
    'page callback' => 'webform_results_table',
    'page arguments' => array(1, '50'),
    'access callback' => 'webform_results_access',
<<<<<<< HEAD
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
=======
    'access arguments' => array(1, 'access webform results'),
    'file' => 'webform_report.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'weight' => 6,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform-results/download'] = array(
    'title' => 'Download',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_results_download_form', 1),
    'access callback' => 'webform_results_access',
<<<<<<< HEAD
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
=======
    'access arguments' => array(1, 'access webform results'),
    'file' => 'webform_report.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/webform-results/clear'] = array(
    'title' => 'Clear',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_results_clear_form', 1),
<<<<<<< HEAD
    'access callback' => 'webform_results_clear_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.report.inc',
=======
    'access callback' => 'webform_results_access',
    'access arguments' => array(1, 'clear webform results'),
    'file' => 'webform_report.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'weight' => 8,
    'type' => MENU_LOCAL_TASK,
  );

  // Node submissions.
  $items['node/%webform_menu/submissions'] = array(
    'title' => 'Submissions',
    'page callback' => 'webform_results_submissions',
    'page arguments' => array(1, TRUE, '50'),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, NULL, 'list'),
<<<<<<< HEAD
    'file' => 'includes/webform.report.inc',
=======
    'file' => 'webform_report.inc',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'type' => MENU_CALLBACK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission'] = array(
    'title' => 'Webform submission',
    'load arguments' => array(1),
<<<<<<< HEAD
    'page callback' => 'webform_submission_page',
    'page arguments' => array(1, 3, 'html'),
    'title callback' => 'webform_submission_title',
    'title arguments' => array(1, 3),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'view'),
    'file' => 'includes/webform.submissions.inc',
=======
    'page callback' => 'webform_client_form_load',
    'page arguments' => array(1, 3, FALSE, FALSE),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'view'),
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'type' => MENU_CALLBACK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/view'] = array(
    'title' => 'View',
    'load arguments' => array(1),
<<<<<<< HEAD
    'page callback' => 'webform_submission_page',
    'page arguments' => array(1, 3, 'html'),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'view'),
    'weight' => 0,
    'file' => 'includes/webform.submissions.inc',
=======
    'page callback' => 'webform_client_form_load',
    'page arguments' => array(1, 3, FALSE, FALSE),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'view'),
    'weight' => 0,
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/edit'] = array(
    'title' => 'Edit',
    'load arguments' => array(1),
<<<<<<< HEAD
    'page callback' => 'webform_submission_page',
    'page arguments' => array(1, 3, 'form'),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'edit'),
    'weight' => 1,
    'file' => 'includes/webform.submissions.inc',
=======
    'page callback' => 'webform_client_form_load',
    'page arguments' => array(1, 3, TRUE, FALSE),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'edit'),
    'weight' => 1,
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/delete'] = array(
    'title' => 'Delete',
    'load arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_submission_delete_form', 1, 3),
    'access callback' => 'webform_submission_access',
    'access arguments' => array(1, 3, 'delete'),
    'weight' => 2,
<<<<<<< HEAD
    'file' => 'includes/webform.submissions.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/resend'] = array(
    'title' => 'Resend e-mails',
    'load arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_submission_resend', 1, 3),
    'access callback' => 'webform_results_access',
    'access arguments' => array(1),
    'file' => 'includes/webform.submissions.inc',
    'type' => MENU_CALLBACK,
  );
=======
    'type' => MENU_LOCAL_TASK,
  );
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

  return $items;
}

/**
 * Menu loader callback. Load a webform node if the given nid is a webform.
 */
function webform_menu_load($nid) {
  if (!is_numeric($nid)) {
    return FALSE;
  }
  $node = node_load($nid);
<<<<<<< HEAD
  if (!isset($node->type) || !in_array($node->type, webform_variable_get('webform_node_types'))) {
=======
  if (!isset($node->type) || $node->type != 'webform') {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    return FALSE;
  }
  return $node;
}

/**
 * Menu loader callback. Load a webform submission if the given sid is a valid.
 */
function webform_menu_submission_load($sid, $nid) {
<<<<<<< HEAD
  module_load_include('inc', 'webform', 'includes/webform.submissions');
=======
  module_load_include('inc', 'webform', 'webform_submissions');
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  $submission = webform_get_submission($nid, $sid);
  return empty($submission) ? FALSE : $submission;
}

/**
 * Menu loader callback. Load a webform component if the given cid is a valid.
 */
function webform_menu_component_load($cid, $nid, $type) {
<<<<<<< HEAD
  module_load_include('inc', 'webform', 'includes/webform.components');
  if ($cid == 'new') {
    $components = webform_components();
    $component = in_array($type, array_keys($components)) ? array('type' => $type, 'nid' => $nid, 'name' => $_GET['name'], 'mandatory' => $_GET['mandatory'], 'pid' => $_GET['pid'], 'weight' => $_GET['weight']) : FALSE;
=======
  module_load_include('inc', 'webform', 'webform_components');
  if ($cid == 'new') {
    $components = webform_load_components();
    $component = in_array($type, array_keys($components)) ? array('type' => $type, 'name' => $_GET['name'], 'mandatory' => $_GET['mandatory'], 'email' => $_GET['email'], 'pid' => $_GET['pid'], 'weight' => $_GET['weight']) : FALSE;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }
  else {
    $node = node_load($nid);
    $component = isset($node->webform['components'][$cid]) ? $node->webform['components'][$cid] : FALSE;
  }
<<<<<<< HEAD
  if ($component) {
    webform_component_defaults($component);
  }
  return $component;
}


/**
 * Menu loader callback. Load a webform e-mail if the given eid is a valid.
 */
function webform_menu_email_load($eid, $nid) {
  module_load_include('inc', 'webform', 'includes/webform.emails');
  $node = node_load($nid);
  $email = webform_email_load($eid, $nid);
  if ($eid == 'new') {
    if (isset($_GET['option']) && isset($_GET['email'])) {
      $type = $_GET['option'];
      if ($type == 'custom') {
        $email['email'] = $_GET['email'];
      }
      elseif ($type == 'component' && isset($node->webform['components'][$_GET['email']])) {
        $email['email'] = $_GET['email'];
      }
    }
  }

  return $email;
}

=======
  webform_component_defaults($component);
  return $component;
}

>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
function webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

<<<<<<< HEAD
  $access_all = user_access('access all webform results', $account);
  $access_own_submission = isset($submission) && user_access('access own webform submissions', $account) && (($account->uid && $account->uid == $submission->uid) || isset($_SESSION['webform_submission'][$submission->sid]));
  $access_node_submissions = user_access('access own webform results', $account) && $account->uid == $node->uid;

  $general_access = $access_all || $access_own_submission || $access_node_submissions;

  // Disable the page cache for anonymous users in this access callback,
  // otherwise the "Access denied" page gets cached.
  if (!$account->uid && user_access('access own webform submissions', $account)) {
    webform_disable_page_cache();
  }

  $module_access = count(array_filter(module_invoke_all('webform_submission_access', $node, $submission, $op, $account))) > 0;

  switch ($op) {
    case 'view':
      return $module_access || $general_access;
    case 'edit':
      return $module_access || ($general_access && (user_access('edit all webform submissions', $account) || (user_access('edit own webform submissions', $account) && $account->uid == $submission->uid)));
    case 'delete':
      return $module_access || ($general_access && (user_access('delete all webform submissions', $account) || (user_access('delete own webform submissions', $account) && $account->uid == $submission->uid)));
    case 'list':
      return $module_access || user_access('access all webform results', $account) || (user_access('access own webform submissions', $account) && ($account->uid || isset($_SESSION['webform_submission']))) || (user_access('access own webform results', $account) && $account->uid == $node->uid);
=======
  switch ($op) {
    case 'view':
      return user_access('access webform results') || (user_access('access own webform submissions') && ($account->uid == $submission->uid));
    case 'edit':
      return user_access('edit webform submissions') || (user_access('edit own webform submissions') && ($account->uid == $submission->uid));
    case 'delete':
      return user_access('edit webform submissions') || (user_access('edit own webform submissions') && ($account->uid == $submission->uid)) || user_access('clear webform results');
    case 'list':
      return user_access('access webform results') || user_access('access webform submissions') || (user_access('access own webform submissions')  && $user->uid);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }
}

/**
 * Menu access callback. Ensure a user both access and node 'view' permission.
 */
<<<<<<< HEAD
function webform_results_access($node, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  $module_access = count(array_filter(module_invoke_all('webform_results_access', $node, $account))) > 0;

  return node_access('view', $node, $account) && ($module_access || user_access('access all webform results', $account) || (user_access('access own webform results', $account) && $account->uid == $node->uid));
}

function webform_results_clear_access($node, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : $user;

  $module_access = count(array_filter(module_invoke_all('webform_results_clear_access', $node, $account))) > 0;

  return webform_results_access($node, $account) && ($module_access || user_access('delete all webform submissions', $account));
}

/**
 * Implements hook_init().
 */
function webform_init() {
  // Use the administrative theme if set to use on content editing pages.
  // See system_init().
  if (variable_get('node_admin_theme', '0') && arg(0) == 'node' && (arg(2) == 'webform' || arg(2) == 'webform-results')) {
    global $custom_theme;
    $custom_theme = variable_get('admin_theme', '0');
    drupal_add_css(drupal_get_path('module', 'system') . '/admin.css', 'module');

    // Support for Admin module (1.x).
    if (function_exists('_admin_init_theme') && empty($custom_theme)) {
      _admin_init_theme();
    }
  }
}

/**
 * Implements hook_perm().
 */
function webform_perm() {
  return array(
    'access all webform results',
    'access own webform results',
    'edit all webform submissions',
    'delete all webform submissions',
    'access own webform submissions',
    'edit own webform submissions',
    'delete own webform submissions',
  );
}

/**
 * Implements hook_theme().
=======
function webform_results_access($node, $perm) {
  return node_access('view', $node) && user_access($perm);
}

/**
 * Implementation of hook_perm().
 */
function webform_perm() {
  return array('create webforms', 'edit own webforms', 'edit webforms', 'access webform results', 'clear webform results', 'access own webform submissions', 'edit own webform submissions', 'edit webform submissions', 'use PHP for additional processing');
}

/**
 * Implementation of hook_theme().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 */
function webform_theme() {
  $theme = array(
    // webform.module.
    'webform_view' => array(
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL, 'form' => NULL, 'enabled' => NULL),
    ),
    'webform_view_messages' => array(
<<<<<<< HEAD
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL, 'submission_count' => NULL, 'limit_exceeded' => NULL, 'allowed_roles' => NULL, 'closed' => NULL, 'cached' => FALSE),
    ),
    'webform_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'templates/webform-form',
      'pattern' => 'webform_form_[0-9]+',
    ),
    'webform_confirmation' => array(
      'arguments' => array('node' => NULL, 'sid' => NULL),
      'template' => 'templates/webform-confirmation',
      'pattern' => 'webform_confirmation_[0-9]+',
    ),
    'webform_element' => array(
      'arguments' => array('element' => NULL, 'value' => NULL),
    ),
    'webform_element_wrapper' => array(
      'arguments' => array('element' => NULL, 'content' => NULL),
    ),
    'webform_element_text' => array(
      'arguments' => array('element' => NULL, 'value' => NULL),
    ),
    'webform_mail_message' => array(
      'arguments' => array('node' => NULL, 'submission' => NULL, 'email' => NULL),
      'template' => 'templates/webform-mail',
      'pattern' => 'webform_mail(_[0-9]+)?',
    ),
    'webform_mail_headers' => array(
      'arguments' => array('node' => NULL, 'submission' => NULL, 'email' => NULL),
      'pattern' => 'webform_mail_headers_[0-9]+',
    ),
    'webform_token_help' => array(
      'arguments' => array('groups' => array()),
    ),
    // webform.admin.inc.
    'webform_admin_settings' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.admin.inc',
    ),
    'webform_admin_content' => array(
      'arguments' => array('nodes' => NULL),
      'file' => 'includes/webform.admin.inc',
    ),
    // webform.emails.inc.
    'webform_emails_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.emails.inc',
    ),
    'webform_email_add_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.emails.inc',
    ),
    'webform_email_edit_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.emails.inc',
    ),
    // webform.components.inc.
    'webform_components_page' => array(
      'arguments' => array('node' => NULL, 'form' => NULL),
      'file' => 'includes/webform.components.inc',
    ),
    'webform_components_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.components.inc',
    ),
    'webform_component_select' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/webform.components.inc',
    ),
    // webform.pages.inc.
    'webform_advanced_redirection_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.pages.inc',
    ),
    'webform_advanced_submit_limit_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.pages.inc',
    ),
    // webform.report.inc.
    'webform_results_per_page' => array(
      'arguments' => array('total_count' => NULL, 'pager_count' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_submissions_header' => array(
      'arguments' => array('node' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_submissions' => array(
      'arguments' => array('element' => NULL),
      'template' => 'templates/webform-results-submissions',
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_table_header' => array(
      'arguments' => array('node' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_table' => array(
      'arguments' => array('node' => NULL, 'components' => NULL, 'submissions' => NULL, 'node' => NULL, 'total_count' => NULL, 'pager_count' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_download_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_download_select_format' => array(
      'arguments' => array('element' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    'webform_results_analysis' => array(
      'arguments' => array('node' => NULL, 'data' => NULL, 'sids' => array(), 'component' => NULL),
      'file' => 'includes/webform.report.inc',
    ),
    // webform.submissions.inc
    'webform_submission' => array(
      'arguments' => array('renderable' => NULL),
      'template' => 'templates/webform-submission',
      'pattern' => 'webform_submission_[0-9]+',
      'file' => 'includes/webform.submissions.inc',
    ),
    'webform_submission_page' => array(
      'arguments' => array('node' => NULL, 'submission' => NULL, 'submission_content' => NULL, 'submission_navigation' => NULL, 'submission_information' => NULL, 'submission_actions' => NULL, 'mode' => NULL),
      'template' => 'templates/webform-submission-page',
      'file' => 'includes/webform.submissions.inc',
    ),
    'webform_submission_information' => array(
      'arguments' => array('node' => NULL, 'submission' => NULL, 'mode' => 'display'),
      'template' => 'templates/webform-submission-information',
      'file' => 'includes/webform.submissions.inc',
    ),
    'webform_submission_navigation' => array(
      'arguments' => array('node' => NULL, 'submission' => NULL, 'mode' => NULL),
      'template' => 'templates/webform-submission-navigation',
      'file' => 'includes/webform.submissions.inc',
    ),
    'webform_submission_resend' => array(
      'arguments' => array('form' => NULL),
      'file' => 'includes/webform.submissions.inc',
    ),
  );

  // Theme functions in all components.
  $components = webform_components(TRUE);
  foreach ($components as $type => $component) {
    if ($theme_additions = webform_component_invoke($type, 'theme')) {
      $theme = array_merge($theme, $theme_additions);
=======
      'arguments' => array('node' => NULL, 'teaser' => NULL, 'page' => NULL, 'submission_count' => NULL, 'limit_exceeded' => NULL, 'allowed_roles' => NULL),
    ),
    'webform_form' => array(
      'arguments' => array('form' => NULL),
      'template' => 'webform-form',
      'pattern' => 'webform_form_[0-9]+',
    ),
    'webform_mail_components_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'webform_mail_settings_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'webform_advanced_submit_limit_form' => array(
      'arguments' => array('form' => NULL),
    ),
    'webform_admin_settings' => array(
      'arguments' => array('form' => NULL),
    ),
    'webform_confirmation' => array(
      'arguments' => array('node' => NULL, 'sid' => NULL),
      'template' => 'webform-confirmation',
      'pattern' => 'webform_confirmation_[0-9]+',
    ),
    'webform_mail_message' => array(
      'arguments' => array('form_values' => NULL, 'node' => NULL, 'sid' => NULL, 'cid' => NULL),
      'template' => 'webform-mail',
      'pattern' => 'webform_mail(_[0-9]+)?',
    ),
    'webform_mail_fields' => array(
      'arguments' => array('cid' => NULL, 'value' => NULL, 'node' => NULL, 'indent' => NULL),
    ),
    'webform_mail_headers' => array(
      'arguments' => array('form_values' => NULL, 'node' => NULL, 'sid' => NULL, 'cid' => NULL),
      'pattern' => 'webform_mail_headers_[0-9]+',
    ),
    'webform_admin_content' => array(
      'arguments' => array('nodes' => NULL),
    ),
    'webform_token_help' => array(
      'arguments' => array(),
    ),
    // webform_components.inc.
    'webform_components_form' => array(
      'arguments' => array('form' => NULL),
    ),
    // webform_report.inc.
    'webform_results_per_page' => array(
      'arguments' => array('total_count' => NULL, 'pager_count' => NULL),
    ),
    'webform_results_submissions_header' => array(
      'arguments' => array('node' => NULL),
    ),
    'webform_results_submissions' => array(
      'arguments' => array('node' => NULL, 'submissions' => NULL, 'total_count' => NULL, 'pager_count' => NULL),
    ),
    'webform_results_table_header' => array(
      'arguments' => array('node' => NULL),
    ),
    'webform_results_table' => array(
      'arguments' => array('node' => NULL, 'components' => NULL, 'submissions' => NULL, 'node' => NULL, 'total_count' => NULL, 'pager_count' => NULL),
    ),
  );
  // Theme functions in all components.
  $components = webform_load_components(TRUE);
  foreach ($components as $key => $component) {
    $theme_hook = '_webform_theme_'. $key;
    if (function_exists($theme_hook)) {
      $theme = array_merge($theme, $theme_hook());
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
  }
  return $theme;
}

/**
<<<<<<< HEAD
 * Implements hook_elements().
 */
function webform_elements() {
  // A few of our components need to be defined here because Drupal does not
  // provide these components natively. Because this hook fires on every page
  // load (even on non-webform pages), we don't put this in the component .inc
  // files because of the unnecessary loading that it would require.
  $elements['webform_time'] = array('#input' => 'TRUE');
  $elements['webform_grid'] = array('#input' => 'TRUE');
  return $elements;
}

/**
 * Implements hook_webform_component_info().
 */
function webform_webform_component_info() {
  return array(
    'date' => array(
      'label' => t('Date'),
      'description' => t('Presents month, day, and year fields.'),
      'features' => array(
        'conditional' => FALSE,
      ),
      'file' => 'components/date.inc',
    ),
    'email' => array(
      'label' => t('E-mail'),
      'description' => t('A special textfield that accepts e-mail addresses.'),
      'file' => 'components/email.inc',
      'features' => array(
        'email_address' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
    'fieldset' => array(
      'label' => t('Fieldset'),
      'description' => t('Fieldsets allow you to organize multiple fields into groups.'),
      'features' => array(
        'csv' => FALSE,
        'required' => FALSE,
        'conditional' => FALSE,
        'group' => TRUE,
        'title_inline' => FALSE,
      ),
      'file' => 'components/fieldset.inc',
    ),
    'file' => array(
      'label' => t('File'),
      'description' => t('Allow users to upload files of configurable types.'),
      'features' => array(
        'conditional' => FALSE,
        'attachment' => TRUE,
      ),
      'file' => 'components/file.inc',
    ),
    'grid' => array(
      'label' => t('Grid'),
      'description' => t('Allows creation of grid questions, denoted by radio buttons.'),
      'features' => array(
        'conditional' => FALSE,
        'title_inline' => FALSE,
      ),
      'file' => 'components/grid.inc',
    ),
    'hidden' => array(
      'label' => t('Hidden'),
      'description' => t('A field which is not visible to the user, but is recorded with the submission.'),
      'file' => 'components/hidden.inc',
      'features' => array(
        'required' => FALSE,
        'email_address' => TRUE,
        'email_name' => TRUE,
        'title_display' => FALSE,
      ),
    ),
    'markup' => array(
      'label' => t('Markup'),
      'description' => t('Displays text as HTML in the form; does not render a field.'),
      'features' => array(
        'csv' => FALSE,
        'email' => FALSE,
        'required' => FALSE,
        'conditional' => FALSE,
        'title_display' => FALSE,
      ),
      'file' => 'components/markup.inc',
    ),
    'pagebreak' => array(
      'label' => t('Page break'),
      'description' => t('Organize forms into multiple pages.'),
      'features' => array(
        'csv' => FALSE,
        'required' => FALSE,
        'title_display' => FALSE,
      ),
      'file' => 'components/pagebreak.inc',
    ),
    'select' => array(
      'label' => t('Select options'),
      'description' => t('Allows creation of checkboxes, radio buttons, or select menus.'),
      'file' => 'components/select.inc',
      'features' => array(
        'email_address' => TRUE,
        'email_name' => TRUE,
      ),
    ),
    'textarea' => array(
      'label' => t('Textarea'),
      'description' => t('A large text area that allows for multiple lines of input.'),
      'file' => 'components/textarea.inc',
      'features' => array(
        'spam_analysis' => TRUE,
        'title_inline' => FALSE,
      ),
    ),
    'textfield' => array(
      'label' => t('Textfield'),
      'description' => t('Basic textfield type.'),
      'file' => 'components/textfield.inc',
      'features' => array(
        'email_name' => TRUE,
        'spam_analysis' => TRUE,
      ),
    ),
    'time' => array(
      'label' => t('Time'),
      'description' => t('Presents the user with hour and minute fields. Optional am/pm fields.'),
      'features' => array(
        'conditional' => FALSE,
      ),
      'file' => 'components/time.inc',
    ),
  );
}

/**
 * Implements hook_forms().
 *
=======
 * Implementation of hook_node_info().
 */
function webform_node_info() {
  return array(
    'webform' => array(
      'name' => t('Webform'),
      'module' => 'webform',
      'description' => t('Create a new form or questionnaire accessible to users. Submission results and statistics are recorded and accessible to privileged users.'),
    )
  );
}

/**
 * Implementation of hook_access().
 */
function webform_access($op, $node, $account) {
  switch ($op) {
    case 'create':
      return user_access('create webforms', $account);
    case 'update':
    case 'delete':
      if (user_access('edit webforms', $account) || (user_access('edit own webforms', $account) && ($account->uid == $node->uid))) {
        return TRUE;
      }
  }
}

/**
 * Implementation of hook_forms().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 * All webform_client_form forms share the same form handler
 */
function webform_forms($form_id) {
  $forms = array();
  if (strpos($form_id, 'webform_client_form_') === 0) {
    $forms[$form_id]['callback'] = 'webform_client_form';
  }
  return $forms;
}

/**
<<<<<<< HEAD
 * Implements hook_webform_select_options_info().
 */
function webform_webform_select_options_info() {
  module_load_include('inc', 'webform', 'includes/webform.options');
  return _webform_options_info();
}

/**
 * Implements hook_webform_webform_submission_actions().
 */
function webform_webform_submission_actions($node, $submission) {
  $actions = array();
  $destination = drupal_get_destination();

  if (module_exists('print_pdf') && user_access('access PDF version')) {
    $actions['printpdf'] = array(
      'title' => t('Download PDF'),
      'href' => 'printpdf/' . $node->nid . '/submission/' . $submission->sid,
      'query' => $destination,
    );
  }

  if (module_exists('print') && user_access('access print')) {
    $actions['print'] = array(
      'title' => t('Print'),
      'href' => 'print/' . $node->nid . '/submission/' . $submission->sid,
    );
  }

  if (webform_results_access($node)) {
    $actions['resend'] = array(
      'title' => t('Resend e-mails'),
      'href' => 'node/' . $node->nid . '/submission/' . $submission->sid . '/resend',
      'query' => drupal_get_destination(),
    );
  }

  return $actions;
}

/**
 * Implements hook_file_download().
=======
 * Implementation of hook_file_download().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 *
 * Only allow users with view webform submissions to download files.
 */
function webform_file_download($file) {
<<<<<<< HEAD
  global $user;

  // If the Webform directory doesn't exist, don't attempt to deliver a file.
  $webform_directory = file_directory_path() . '/webform/';
  if (!is_dir($webform_directory)) {
    return;
  }

  $file = file_check_location(file_directory_path() . '/' . $file, $webform_directory);
  if ($file && (user_access('access all webform results') || user_access('access own webform results'))) {
    $info = image_get_info(file_create_path($file));
    if (isset($info['mime_type'])) {
      $headers = array('Content-type: ' . $info['mime_type']);
=======
  $file = file_check_location(file_directory_path() .'/'. $file, file_directory_path() .'/webform/');
  if ($file && user_access('access webform results')) {
    $info = image_get_info(file_create_path($file));
    if (isset($info['mime_type'])) {
      $headers = array('Content-type: '. $info['mime_type']);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
    else {
      $headers = array(
        'Content-type: force-download',
        'Content-disposition: attachment',
      );
    }
    return $headers;
  }
}

/**
<<<<<<< HEAD
 * Implements hook_node_type().
 */
function webform_node_type($op, $info) {
  $webform_types = webform_variable_get('webform_node_types');
  $affected_type = isset($info->old_type) ? $info->old_type : $info->type;
  $key = array_search($affected_type, $webform_types);
  if ($key !== FALSE) {
    if ($op == 'update') {
      $webform_types[$key] = $info->type;
    }
    if ($op == 'delete') {
      unset($webform_types[$key]);
    }
    variable_set('webform_node_types', $webform_types);
  }
}

/**
 * Implements hook_nodeapi().
 */
function webform_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  switch ($op) {
    case 'insert':
      webform_node_insert($node);
      break;
    case 'update':
      webform_node_update($node);
      break;
    case 'delete':
      webform_node_delete($node);
      break;
    case 'prepare':
      webform_node_prepare($node);
      break;
    case 'prepare translation':
      webform_node_prepare_translation($node);
      break;
    case 'load':
      return webform_node_load($node);
    case 'view':
      return webform_node_view($node, $teaser, $page);
  }
}

/**
 * Implements hook_node_insert().
 */
function webform_node_insert($node) {
  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  // If added directly through node_save(), set defaults for the node.
  if (!isset($node->webform)) {
    $node->webform = webform_node_defaults();
  }

  // Do not make an entry if this node does not have any Webform settings.
  if ($node->webform == webform_node_defaults() && !in_array($node->type, webform_variable_get('webform_node_types_primary'))) {
    return;
  }

  module_load_include('inc', 'webform', 'includes/webform.components');
  module_load_include('inc', 'webform', 'includes/webform.emails');

  // Insert the webform.
  $node->webform['nid'] = $node->nid;
  $node->webform['record_exists'] = (bool) drupal_write_record('webform', $node->webform);
=======
 * Implementation of hook_insert().
 */
function webform_insert($node) {
  module_load_include('inc', 'webform', 'webform_components');

  // If this is submitted from the node form, do a little extra cleanup.
  if (isset($node->op) && $node->op == $node->submit) {
    webform_submit($node);
  }

  // Insert the Webform.
  db_query("INSERT INTO {webform} (nid, confirmation, teaser, submit_text, submit_limit, submit_interval, email, email_from_name, email_from_address, email_subject, additional_validate, additional_submit) VALUES (%d, '%s', %d, '%s', %d, %d, '%s', '%s', '%s', '%s', '%s', '%s')", $node->nid, $node->webform['confirmation'], $node->webform['teaser'], $node->webform['submit_text'], $node->webform['submit_limit'], $node->webform['submit_interval'], $node->webform['email'], $node->webform['email_from_name'], $node->webform['email_from_address'], $node->webform['email_subject'], $node->webform['additional_validate'], $node->webform['additional_submit']);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

  // Insert the components into the database. Used with clone.module.
  if (isset($node->webform['components']) && !empty($node->webform['components'])) {
    foreach ($node->webform['components'] as $cid => $component) {
<<<<<<< HEAD
      $component['nid'] = $node->nid; // Required for clone.module.
=======
      $component['nid'] = $node->nid;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
      webform_component_insert($component);
    }
  }

<<<<<<< HEAD
  // Insert emails. Also used with clone.module.
  if (isset($node->webform['emails']) && !empty($node->webform['emails'])) {
    foreach ($node->webform['emails'] as $eid => $email) {
      $email['nid'] = $node->nid;
      webform_email_insert($email);
    }
  }

  // Set the per-role submission access control.
  foreach (array_filter($node->webform['roles']) as $rid) {
=======
  // Set the per-role submission access control.
  foreach ($node->webform['roles'] as $rid) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    db_query('INSERT INTO {webform_roles} (nid, rid) VALUES (%d, %d)', $node->nid, $rid);
  }
}

/**
<<<<<<< HEAD
 * Implements hook_node_update().
 */
function webform_node_update($node) {
  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  // Check if this node needs a webform record at all. If it matches the
  // defaults, any existing record will be deleted.
  webform_check_record($node);

  // If a webform row doesn't even exist, we can assume it needs to be inserted.
  // If the the webform matches the defaults, no row will be inserted.
  if (!$node->webform['record_exists']) {
    webform_node_insert($node);
    return;
  }

  // Update the webform entry.
  $node->webform['nid'] = $node->nid;
  drupal_write_record('webform', $node->webform, array('nid'));

  // Compare the webform components and don't do anything if it's not needed.
  $original = node_load($node->nid);

  if ($original->webform['components'] != $node->webform['components']) {
    module_load_include('inc', 'webform', 'includes/webform.components');

    $original_cids = array_keys($original->webform['components']);
    $current_cids = array_keys($node->webform['components']);

    $all_cids = array_unique(array_merge($original_cids, $current_cids));
    $deleted_cids = array_diff($original_cids, $current_cids);
    $inserted_cids = array_diff($current_cids, $original_cids);

    foreach ($all_cids as $cid) {
      if (in_array($cid, $inserted_cids)) {
        webform_component_insert($node->webform['components'][$cid]);
      }
      elseif (in_array($cid, $deleted_cids)) {
        webform_component_delete($node, $original->webform['components'][$cid]);
      }
      elseif ($node->webform['components'][$cid] != $original->webform['components'][$cid]) {
        $node->webform['components'][$cid]['nid'] = $node->nid;
        webform_component_update($node->webform['components'][$cid]);
      }
    }
  }

  // Compare the webform e-mails and don't do anything if it's not needed.
  if ($original->webform['emails'] != $node->webform['emails']) {
    module_load_include('inc', 'webform', 'includes/webform.emails');

    $original_eids = array_keys($original->webform['emails']);
    $current_eids = array_keys($node->webform['emails']);

    $all_eids = array_unique(array_merge($original_eids, $current_eids));
    $deleted_eids = array_diff($original_eids, $current_eids);
    $inserted_eids = array_diff($current_eids, $original_eids);

    foreach ($all_eids as $eid) {
      if (in_array($eid, $inserted_eids)) {
        webform_email_insert($node->webform['emails'][$eid]);
      }
      elseif (in_array($eid, $deleted_eids)) {
        webform_email_delete($node, $original->webform['emails'][$eid]);
      }
      elseif ($node->webform['emails'][$eid] != $original->webform['emails'][$eid]) {
        $node->webform['emails'][$eid]['nid'] = $node->nid;
        webform_email_update($node->webform['emails'][$eid]);
      }
    }
  }

  // Just delete and re-insert roles if they've changed.
  if ($original->webform['roles'] != $node->webform['roles']) {
    db_query('DELETE FROM {webform_roles} WHERE nid = %d', $node->nid);
    foreach (array_filter($node->webform['roles']) as $rid) {
      db_query('INSERT INTO {webform_roles} (nid, rid) VALUES (%d, %d)', $node->nid, $rid);
    }
  }
}

/**
 * Implements hook_delete().
 */
function webform_node_delete($node) {
  if (!in_array($node->type, webform_variable_get('webform_node_types'))) {
    return;
  }

  // Allow components clean up extra data, such as uploaded files.
  module_load_include('inc', 'webform', 'includes/webform.components');
  foreach ($node->webform['components'] as $cid => $component) {
    webform_component_delete($node, $component);
=======
 * Implementation of hook_update().
 */
function webform_update($node) {
  // Update the webform by deleting existing data and replacing with the new.
  db_query('DELETE FROM {webform} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_component} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_roles} WHERE nid = %d', $node->nid);
  webform_insert($node);
}

/**
 * Implementation of hook_delete().
 */
function webform_delete(&$node) {
  // Allow components clean up extra data, such as uploaded files.
  module_load_include('inc', 'webform', 'webform_components');
  foreach ($node->webform['components'] as $cid => $component) {
    webform_component_delete($node->nid, $cid);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }

  // Remove any trace of webform data from the database.
  db_query('DELETE FROM {webform} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_component} WHERE nid = %d', $node->nid);
<<<<<<< HEAD
  db_query('DELETE FROM {webform_emails} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_roles} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_submissions} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_submitted_data} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_last_download} WHERE nid = %d', $node->nid);
}

/**
 * Default settings for a newly created webform node.
 */
function webform_node_defaults() {
  $defaults = array(
    'confirmation' => '',
    'confirmation_format' => (string) filter_resolve_format(FILTER_FORMAT_DEFAULT),
    'redirect_url' => '<confirmation>',
    'teaser' => '0',
    'block' => '0',
    'allow_draft' => '0',
    'auto_save' => '0',
    'submit_notice' => '1',
    'submit_text' => '',
    'submit_limit' => '-1',
    'submit_interval' => '-1',
    'status' => '1',
    'record_exists' => FALSE,
    'roles' => array('1', '2'),
    'emails' => array(),
    'components' => array(),
  );
  drupal_alter('webform_node_defaults', $defaults);
  return $defaults;
}

/**
 * Implements hook_node_prepare().
 */
function webform_node_prepare(&$node) {
  if (!isset($node->webform)) {
    $node->webform = webform_node_defaults();
  }
}

/**
 * Implements hook_node_prepare_translation().
 */
function webform_node_prepare_translation(&$node) {
  // Copy all Webform settings over to translated versions of this node.
  if (isset($node->translation_source)) {
    $source_node = node_load($node->translation_source->nid);
    $node->webform = $source_node->webform;
  }
}

/**
 * Implements hook_node_load().
 */
function webform_node_load($node) {
  module_load_include('inc', 'webform', 'includes/webform.components');
  $additions = array();

  if (isset($node->nid)) {
    $webform = db_fetch_array(db_query('SELECT * FROM {webform} WHERE nid = %d', $node->nid));

    // If a webform record doesn't exist, just return the defaults.
    if (!$webform) {
      $additions['webform'] = webform_node_defaults();
      return $additions;
    }

    $additions['webform'] = $webform;
    $additions['webform']['record_exists'] = TRUE;

    $additions['webform']['roles'] = array();
    $result = db_query('SELECT rid FROM {webform_roles} WHERE nid = %d', $node->nid);
    while ($role = db_fetch_object($result)) {
      $additions['webform']['roles'][] = $role->rid;
    }

    $additions['webform']['emails'] = array();
    $result = db_query('SELECT * FROM {webform_emails} WHERE nid = %d', $node->nid);
    while ($email = db_fetch_array($result)) {
      $additions['webform']['emails'][$email['eid']] = $email;
      $additions['webform']['emails'][$email['eid']]['excluded_components'] = array_filter(explode(',', $email['excluded_components']));
      if (variable_get('webform_format_override', 0)) {
        $additions['webform']['emails'][$email['eid']]['html'] = variable_get('webform_default_format', 0);
      }
    }
  }

  $additions['webform']['components'] = array();
  $result = db_query('SELECT * FROM {webform_component} WHERE nid = %d ORDER BY weight, name', $node->nid);
  while ($c = db_fetch_array($result)) {
    $component =& $additions['webform']['components'][$c['cid']];
    $component['nid'] = $node->nid;
    $component['cid'] = $c['cid'];
    $component['form_key'] = $c['form_key'] ? $c['form_key'] : $c['cid'];
    $component['name'] = $c['name'];
=======
  db_query('DELETE FROM {webform_roles} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_submissions} WHERE nid = %d', $node->nid);
  db_query('DELETE FROM {webform_submitted_data} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function webform_load($node) {
  module_load_include('inc', 'webform', 'webform_components');
  $additions = new stdClass();

  if ($webform = db_fetch_array(db_query('SELECT * FROM {webform} WHERE nid = %d', $node->nid))) {
    $additions->webform = $webform;

    $additions->webform['roles'] = array();
    $result = db_query('SELECT rid FROM {webform_roles} WHERE nid = %d', $node->nid);
    while ($role = db_fetch_object($result)) {
      $additions->webform['roles'][] = $role->rid;
    }
  }
  else {
    $additions->webform = array(
      'confirmation' => '',
      'teaser' => 0,
      'submit_text' => '',
      'submit_limit' => -1,
      'submit_interval' => -1,
      'email' => '',
      'email_from_name' => 'default',
      'email_from_address' => 'default',
      'email_subject' => 'default',
      'additional_validate' => '',
      'additional_submit' => '',
      'roles' => array(1, 2),
    );
  }

  $additions->webform['components'] = array();
  $additions->webform['additional_emails'] = array();
  $result = db_query('SELECT * FROM {webform_component} WHERE nid = %d ORDER BY weight, name', $node->nid);
  while ($c = db_fetch_array($result)) {
    $component =& $additions->webform['components'][$c['cid']];
    $component['nid'] = $node->nid;
    $component['cid'] = $c['cid'];
    $component['form_key'] = $c['form_key'] ? $c['form_key'] : $c['cid'];
    $component['name'] = t($c['name']);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    $component['type'] = $c['type'];
    $component['value'] = $c['value'];
    $component['extra'] = unserialize($c['extra']);
    $component['mandatory'] = $c['mandatory'];
<<<<<<< HEAD
    $component['pid'] = $c['pid'];
    $component['weight'] = $c['weight'];
=======
    $component['email'] = $c['email'];
    $component['pid'] = $c['pid'];
    $component['weight'] = $c['weight'];
    if (isset($component['extra']['email']) && $component['extra']['email']) {
      $additions->webform['additional_emails'][$c['cid']] = $c['cid'];
    }
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

    webform_component_defaults($component);
  }

  // Organize the components into a fieldset-based order.
<<<<<<< HEAD
  if (!empty($additions['webform']['components'])) {
    $component_tree = array();
    $page_count = 1;
    _webform_components_tree_build($additions['webform']['components'], $component_tree, 0, $page_count);
    $additions['webform']['components'] = _webform_components_tree_flatten($component_tree['children']);
=======
  if (!empty($additions->webform['components'])) {
    $component_tree = array();
    $page_count = 1;
    _webform_components_tree_build($additions->webform['components'], $component_tree, 0, $page_count);
    $additions->webform['components'] = _webform_components_tree_flatten($component_tree['children']);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }
  return $additions;
}

/**
<<<<<<< HEAD
 * Implements hook_link().
=======
 * Implementation of hook_link().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 * Always add a "view form" link.
 */
function webform_link($type, $node = NULL, $teaser = FALSE) {
  $links = array();
  if (isset($node->type) && $node->type === 'webform') {
    if ($teaser && !$node->webform['teaser']) {
      $links['webform_goto'] = array(
        'title' => t('Go to form'),
<<<<<<< HEAD
        'href' => 'node/' . $node->nid,
=======
        'href' => 'node/'. $node->nid,
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
        'attributes' => array('title' => t('View this form.'), 'class' => 'read-more')
      );
    }
  }
  return $links;
}

/**
<<<<<<< HEAD
 * Implements hook_form_alter().
 */
function webform_form_alter(&$form, $form_state, $form_id) {
  $matches = array();
  if (isset($form['#node']->type) && $form_id == $form['#node']->type . '_node_form' && in_array($form['#node']->type, webform_variable_get('webform_node_types'))) {
    $node = $form['#node'];
    // Preserve all Webform options currently set on the node.
    $form['webform'] = array(
      '#type' => 'value',
      '#value' => $node->webform,
    );

    // If a new node, redirect the user to the components form after save.
    if (empty($node->nid) && in_array($node->type, webform_variable_get('webform_node_types_primary'))) {
      $form['buttons']['submit']['#submit'][] = 'webform_form_submit';
=======
 * Implementation of hook_form().
 * Creates the standard form for editing or creating a webform.
 */
function webform_form(&$node, &$param) {
  $form['webform'] = array(
    '#type' => 'markup',
    '#tree' => TRUE,
  );

  // Set node defaults if empty.
  if (!isset($node->nid) && !isset($node->webform)) {
    $node->nid = 0;
    $additions = webform_load($node);
    $node->webform = $additions->webform;
    $node->nid = NULL;
  }

  // When the form is rebuilt for a preview, submit_limit may be set incorrectly.
  if (isset($node->build_mode) && $node->build_mode == NODE_BUILD_PREVIEW && $node->webform['enforce_limit'] == 'no') {
    $node->webform['submit_limit'] = -1;
  }

  /* Save Components in a value (helps with clone.module) */
  $form['webform']['components'] = array(
    '#type' => 'value',
    '#value' => $node->webform['components'],
  );

  /* Start Edit Form */
  $form['webform']['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -4,
    '#parents' => array('webform'),
  );

  $form['webform']['settings']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $node->title,
    '#maxlength' => 128,
    '#required' => TRUE,
    '#tree' => FALSE,
  );

  $form['webform']['settings']['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#description' => t('Text to be shown as teaser and before the form.'),
    '#default_value' => $node->body,
    '#cols' => 40,
    '#rows' => 10,
    '#tree' => FALSE,
  );

  $form['webform']['settings']['confirmation'] = array(
    '#type' => 'textarea',
    '#title' => t('Confirmation message or redirect URL'),
    '#description' => t('Message to be shown upon successful submission or a path to a redirect page. Preface message with <em>message:</em> for a simple message that does not require a page refresh. Redirect pages must start with <em>http://</em> for external sites or <em>internal:</em> for an internal path. i.e. <em>http://www.example.com</em> or <em>internal:node/10</em>'),
    '#default_value' => $node->webform['confirmation'],
    '#cols' => 40,
    '#rows' => 10,
  );

  $form['webform']['settings']['format'] = filter_form($node->format);
  /* End Edit Form */

  /* Start per-role submission control */
  $form['webform']['role_control'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform access control'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -3,
    '#parents' => array('webform'),
    '#description' => t('These permissions affect which roles can submit this webform. It does not prevent access to the webform page. If needing to prevent access to the webform page entirely, use a content access module such as <a href="http://drupal.org/project/taxonomy_access">Taxonomy Access</a> or <a href="http://drupal.org/project/node_privacy_byrole">Node Privacy by Role</a>.'),
    '#access' => variable_get('webform_submission_access_control', 1),
  );
  $user_roles = user_roles();
  $form['webform']['role_control']['roles'] = array(
    '#default_value' => $node->webform['roles'],
    '#options' => $user_roles,
    '#type' => 'checkboxes',
    '#title' => t('Roles that can submit this webform'),
    '#description' => t('Uncheck all roles to prevent new submissions. The %authenticated role applies to any user signed into the site, regardless of other assigned roles.', array('%authenticated' => $user_roles[2])),
  );
  /* End per-role submission control */

  /* Start E-mail Settings Form */
  $form['webform']['mail_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform mail settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#weight' => -2,
    '#parents' => array('webform'),
    '#theme' => 'webform_mail_settings_form',
  );

  $form['webform']['mail_settings']['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail to address'),
    '#maxlength' => 255,
    '#default_value' => $node->webform['email'],
    '#description' => t('Form submissions will be e-mailed to this address. Leave blank for none. Multiple e-mail addresses may be separated by commas.'),
  );

  $form['webform']['mail_settings']['email_components'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#theme' => 'webform_mail_components_form',
    '#title' => t('Conditional e-mail recipients'),
    '#description' => t('The settings below allow you to send e-mails to multiple recipients based off the value of a component.'),
    '#node' => $node,
  );

  $options = _webform_component_options($node->webform['components'], 'email');
  $default_value = array();
  if (is_array($node->webform['components'])) {
    foreach ($node->webform['components'] as $cid => $component) {
      if (isset($component['extra']['email']) && $component['extra']['email']) {
        $default_value[] = $cid;
      }
    }
  }
  $form['webform']['mail_settings']['email_components']['email_components'] = array(
    '#type' => 'checkboxes',
    '#options' => $options,
    '#default_value' => $default_value,
    '#parents' => array('webform', 'email_components'),
  );

  foreach (array('from_name', 'from_address', 'subject') as $field) {
    switch ($field) {
      case 'from_name':
        $default_value = webform_variable_get('webform_default_from_name');
        $title = t('E-mail from name');
        $description = t('After adding components to this form any email, select, or hidden form element may be selected as the sender\'s name for e-mails.');
        break;
      case 'from_address':
        $default_value = webform_variable_get('webform_default_from_address');
        $title = t('E-mail from address');
        $description = t('After adding components to this form any textfield, select, or hidden form element may be selected as the sender\'s e-mail address.');
        break;
      case 'subject':
        $default_value = webform_variable_get('webform_default_subject');
        $title = t('E-mail subject');
        $description = t('After adding components to this form any textfield, select, or hidden form element may be selected as the subject for e-mails.');
        break;
    }

    $form['webform']['mail_settings']['email_'. $field .'_option'] = array(
      '#title' => $title,
      '#type' => 'radios',
      '#default_value' => is_numeric($node->webform['email_'. $field]) ? 'component' : ((empty($default_value) || ($node->webform['email_'. $field] != 'default' && isset($node->webform['email_'. $field]))) ? 'custom' : 'default'),
      '#description' => $description,
    );
    if (!empty($default_value)) {
      $form['webform']['mail_settings']['email_'. $field .'_option']['#options']['default'] = $default_value;
    }
    $form['webform']['mail_settings']['email_'. $field .'_option']['#options']['custom'] = 'custom';
    $form['webform']['mail_settings']['email_'. $field .'_option']['#options']['component'] = 'component';

    $form['webform']['mail_settings']['email_'. $field .'_custom'] = array(
      '#type' => 'textfield',
      '#size' => 40,
      '#default_value' => (!is_numeric($node->webform['email_'. $field]) && $node->webform['email_'. $field] != 'default') ? $node->webform['email_'. $field] : NULL,
    );
    $options = _webform_component_options($node->webform['components'], $field == 'from_address' ? 'email' : 'string');
    $form['webform']['mail_settings']['email_'. $field .'_component'] = array(
      '#type' => 'select',
      '#default_value' =>  is_numeric($node->webform['email_'. $field]) ? $node->webform['email_'. $field] : NULL,
      '#options' => empty($options) ? array('' => t('No available components')) : $options,
      '#disabled' => empty($options) ? TRUE : FALSE,
      '#weight' => 6,
    );
  }
  /* End mail settings form */

  /* Start advanced settings form */
  $form['webform']['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Webform advanced settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => -1,
    '#parents' => array('webform'),
  );
  $form['webform']['advanced']['teaser'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show complete form in teaser'),
    '#default_value' => $node->webform['teaser'],
    '#description' => t('Display the entire form in the teaser display of this node.'),
  );
  $form['webform']['advanced']['submit_limit'] = array(
    '#type' => 'fieldset',
    '#title' => t('Limit the number of submissions a user may send within a specified time period'),
    '#theme' => 'webform_advanced_submit_limit_form',
  );
  $form['webform']['advanced']['submit_limit']['enforce_limit'] = array(
    '#type' => 'radios',
    '#options' => array('no' => t('Unlimited'), 'yes' => 'Limit to !count submission(s) !timespan'),
    '#default_value' => $node->webform['submit_limit'] == -1 ? 'no' : 'yes',
    '#parents' => array('webform', 'enforce_limit'),
  );
  $form['webform']['advanced']['submit_limit']['submit_limit'] = array(
    '#type' => 'textfield',
    '#maxlength' => 2,
    '#size' => 2,
    '#default_value' => $node->webform['submit_limit'] != -1 ? $node->webform['submit_limit'] : '',
    '#parents' => array('webform', 'submit_limit'),
  );
  $form['webform']['advanced']['submit_limit']['submit_interval'] = array(
    '#type' => 'select',
    '#options' => array(
      '-1' => t('ever'),
      '3600' => t('every hour'),
      '86400' => t('every day'),
      '604800' => t('every week'),
    ),
    '#default_value' => $node->webform['submit_interval'],
    '#parents' => array('webform', 'submit_interval'),
  );
  $form['webform']['advanced']['submit_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit button text'),
    '#default_value' => $node->webform['submit_text'],
    '#description' => t('By default the submit button on this form will have the label <em>Submit</em>. Enter a new title here to override the default.'),
  );
  if (user_access('use PHP for additional processing')) {
    $form['webform']['advanced']['additional_validate'] = array(
      '#type' => 'textarea',
      '#title' => t('Additional Validation'),
      '#description' => t('Enter PHP code to perform additional validation for this form. Include the &lt;?php ?&gt; tags. $form and $form_state are available variables. If validation fails, use the form_set_error function to prevent the form from being submitted. Use the same syntax as a _validate function used in the <a href="http://api.drupal.org/api/file/developer/topics/forms_api.html">Forms API</a>.'),
      '#default_value' => $node->webform['additional_validate'],
      '#cols' => 40,
      '#rows' => 10,
    );

    $form['webform']['advanced']['additional_submit'] = array(
      '#type' => 'textarea',
      '#title' => t('Additional Processing'),
      '#description' => t('Enter PHP code to perform additional processing for this form (after the validation). Include the &lt;?php ?&gt; tags. $form and $form_state are available variables, use the same syntax as a _submit function used in the <a href="http://api.drupal.org/api/file/developer/topics/forms_api.html">Forms API</a>.'),
      '#default_value' => $node->webform['additional_submit'],
      '#cols' => 40,
      '#rows' => 10,
    );
  }
  else {
    $form['webform']['advanced']['additional_validate'] = array(
      '#type' => 'value',
      '#value' => $node->webform['additional_validate'],
    );

    $form['webform']['advanced']['additional_submit'] = array(
      '#type' => 'value',
      '#value' => $node->webform['additional_submit'],
    );
  }
  /* End Advanced Settings Form */

  return $form;
}

/**
 * Implementation of hook_content_extra_fields().
 */
function webform_content_extra_fields($type_name) {
  $extra = array();

  if ($type_name == 'webform') {
    $extra['webform'] = array(
      'label' => t('Webform'),
      'description' => t('Webform settings and display.'),
      'weight' => 1,
    );
  }

  return $extra;
}

/**
 * Theme the component options for sending e-mails.
 */
function theme_webform_mail_components_form($form) {
  drupal_add_css(drupal_get_path('module', 'webform') .'/webform.css');
  $node = $form['#node'];
  $header = array(
    array('data' => t('To'), 'class' => 'webform-checkbox'),
    t('Name'),
    t('Type'),
  );
  $rows = array();
  foreach (element_children($form['email_components']) as $cid) {
    $title = $form['email_components'][$cid]['#title'];
    unset($form['email_components'][$cid]['#title']);
    $rows[] = array(
      array('data' => drupal_render($form['email_components'][$cid]), 'class' => 'webform-checkbox'),
      $title,
      $node->webform['components'][$cid]['type'],
    );
  }
  if (empty($rows)) {
    $rows[] = array(array('colspan' => 5, 'data' => t('No components yet in this webform.')));
  }

  $form['#children'] = theme('table', $header, $rows);
  return drupal_render($form);
}

/**
 * Theme the Webform mail settings section of the node form.
 */
function theme_webform_mail_settings_form($form) {
  drupal_add_js(drupal_get_path('module', 'webform') .'/webform.js');

  // Loop through fields, rendering them into radio button options.
  foreach (array('from_name', 'from_address', 'subject') as $field) {
    foreach (array('custom' => t('Custom'), 'component' => t('Component')) as $option => $title) {
      $form['email_'. $field .'_'. $option]['#attributes']['class'] = 'webform-set-active';
      $form['email_'. $field .'_option'][$option]['#title'] = $title .': '. drupal_render($form['email_'. $field .'_'. $option]);
    }
    // For spacing consitency, every option is wrapped in container-inline.
    foreach (element_children($form['email_'. $field .'_option']) as $option) {
      $form['email_'. $field .'_option'][$option]['#prefix'] = '<div class="container-inline">';
      $form['email_'. $field .'_option'][$option]['#suffix'] = '</div>';
    }
    // Wrap the default option in a placeholder tag..
    if (isset($form['email_'. $field .'_option']['#options']['default'])) {
      $form['email_'. $field .'_option']['default']['#title'] = t('Default') .': '. theme('placeholder', $form['email_'. $field .'_option']['default']['#title']);
    }
  }

  return drupal_render($form);
}

/**
 * Theme the submit limit fieldset on the webform node form.
 */
function theme_webform_advanced_submit_limit_form($form) {
  $form['submit_limit']['#attributes']['class'] = 'webform-set-active';
  $form['submit_interval']['#attributes']['class'] = 'webform-set-active';
  $replacements = array(
    '!count' => drupal_render($form['submit_limit']),
    '!timespan' => drupal_render($form['submit_interval']),
  );
  $form['enforce_limit']['no']['#prefix'] = '<div class="container-inline">';
  $form['enforce_limit']['no']['#suffix'] = '</div>';
  $form['enforce_limit']['yes']['#prefix'] = '<div class="container-inline">';
  $form['enforce_limit']['yes']['#suffix'] = '</div>';
  $form['enforce_limit']['yes']['#title'] = t('Limit to !count submission(s) !timespan', $replacements);
  return drupal_render($form);
}

/**
 * Implementation of hook_validate().
 */
function webform_validate(&$node) {
  // Ensure the entered e-mail addresses are valid.
  if (!empty($node->webform['email'])) {
    $emails = explode(',', $node->webform['email']);
    foreach ($emails as $email) {
      if (!valid_email_address(trim($email))) {
        form_set_error('webform][email', t('The entered email address %address is not a valid address.', array('%address' => $email)));
        break;
      }
    }
  }
  if ($node->webform['email_from_address_option'] == 'custom') {
    if (!valid_email_address($node->webform['email_from_address_custom'])) {
      form_set_error('webform][email_from_address_custom', t('The entered email address %address is not a valid address.', array('%address' => $node->webform['email_from_address_custom'])));
    }
  }
}

/**
 * Implementation of hook_submit().
 */
function webform_submit(&$node) {
  // Add the conditional e-mail recipients to components.
  if (empty($node->is_new)) {
    $original_node = node_load($node->nid);

    foreach ($original_node->webform['components'] as $cid => $component) {
      if (!isset($node->webform['components'][$cid])) {
        $node->webform['components'][$cid] = $component;
      }
      if (isset($node->webform['email_components'][$cid])) {
        $node->webform['components'][$cid]['extra']['email'] = $node->webform['email_components'][$cid];
      }
    }
  }
  unset($node->webform['email_components']);

  // Merge the e-mail name, address, and subject options into single values.
  foreach (array('from_name', 'from_address', 'subject') as $field) {
    $option = $node->webform['email_'. $field .'_option'];
    if ($option == 'default') {
      $node->webform['email_'. $field] = 'default';
    }
    else {
      $node->webform['email_'. $field] = $node->webform['email_'. $field .'_'. $option];
    }
    unset($node->webform['email_'. $field .'_option']);
    unset($node->webform['email_'. $field .'_component']);
    unset($node->webform['email_'. $field .'_custom']);
  }

  // Set the submit limit to -1 if set to unlimited.
  if ($node->webform['enforce_limit'] == 'no') {
    $node->webform['submit_limit'] = -1;
    $node->webform['submit_interval'] = -1;
  }
  unset($node->webform['enforce_limit']);

  // Save roles.
  $node->webform['roles'] = array_keys(array_filter($node->webform['roles']));
}

/**
 * Implementation of hook_form_alter().
 */
function webform_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'webform_node_form' && empty($form['nid']['#value'])) {
    $form['buttons']['submit']['#submit'][] = 'webform_form_submit';
    // Force webforms to be unpublished initially.
    if (user_access('administer nodes')) {
      $form['options']['status']['#default_value'] = FALSE;
    }
    else {
      $form['status']['#value'] = FALSE;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
  }
}

/**
 * Submit handler for the webform node form.
 *
 * Redirect the user to the components form on new node inserts. Note that this
 * fires after the hook_submit() function above.
 */
function webform_form_submit($form, &$form_state) {
<<<<<<< HEAD
  drupal_set_message(t('The new webform %title has been created. Add new fields to your webform with the form below.', array('%title' => $form_state['values']['title'])));
  $form_state['redirect'] = 'node/' . $form_state['nid'] . '/webform/components';
}

/**
 * Implements hook_node_view().
 */
function webform_node_view(&$node, $teaser, $page) {
  global $user;
  // If empty, a teaser, or a new node (during preview) do not display.
  if (empty($node->webform['components']) || ($teaser && !$node->webform['teaser']) || empty($node->nid)) {
    return;
  }

  // Do not include the form in the search index if indexing is disabled.
  if (module_exists('search') && $node->build_mode == NODE_BUILD_SEARCH_INDEX && !variable_get('webform_search_index', 1)) {
    return;
  }

  $info = array();
  $submission = array();
  $submission_count = 0;
  $enabled = TRUE;
  $logging_in = FALSE;
  $limit_exceeded = FALSE;
  $closed = FALSE;
  $allowed_roles = array();

  // When logging in using a form on the same page as a webform node, suppress
=======
  $nid = $form_state['nid'];

  // Remove the the submitted message added by node module.
  unset($_SESSION['messages']['status']);

  drupal_set_message(t('The new webform %title has been created. Add new fields to your webform with the form below.', array('%title' => $form_state['values']['title'])));

  if (!$form_state['values']['status']) {
    drupal_set_message(t('This webform is currently unpublished. After finishing your changes to the webform, use the <em>Publish</em> button below.'));
  }

  $form_state['redirect'] = 'node/'. $nid .'/edit/components';
}

/**
 * Implementation of hook_view().
 */
function webform_view(&$node, $teaser = 0, $page = 0) {
  global $user;

  // If a teaser, do not display the form.
  if ($teaser && !$node->webform['teaser']) {
    $node->content['teaser'] = array('#value' => check_markup($node->teaser, $node->format, FALSE));
    return $node;
  }

  $submission = array();
  $submission_count = 0;
  $enabled = TRUE;
  $preview = FALSE;
  $logging_in = FALSE;
  $limit_exceeded = FALSE;

  if ($node->build_mode == NODE_BUILD_PREVIEW) {
    $preview = TRUE;
    $additions = webform_load($node);
    $node->webform['components'] = $additions->webform['components'];
  }

  // When logging in using a form on the same page as a webform node, surpress
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  // output messages so that they don't show up after the user has logged in.
  // See http://drupal.org/node/239343.
  if (isset($_POST['op']) && isset($_POST['name']) && isset($_POST['pass'])) {
    $logging_in = TRUE;
  }

<<<<<<< HEAD
  if ($node->webform['status'] == 0) {
    $closed = TRUE;
    $enabled = FALSE;
  }
  else {
    // Check if the user's role can submit this webform.
    if (variable_get('webform_submission_access_control', 1)) {
      foreach ($node->webform['roles'] as $rid) {
        $allowed_roles[$rid] = isset($user->roles[$rid]) ? TRUE : FALSE;
      }
      if (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
        $enabled = FALSE;
      }
    }
    else {
      // If not using Webform submission access control, allow for all roles.
      $allowed_roles = array_keys(user_roles());
    }
  }

  // Get a count of previous submissions by this user. Note that the
  // webform_submission_access() function may disable the page cache for
  // anonymous users if they are allowed to edit their own submissions!
  if ($page && webform_submission_access($node, NULL, 'list')) {
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    $submission_count = webform_get_submission_count($node->nid, $user->uid);
  }

  // Check if this page is cached or not.
  $cached = $user->uid == 0 && (variable_get('cache', 0) || (function_exists('drupal_page_is_cacheable') && drupal_page_is_cacheable() === FALSE));

  // Check if the user can add another submission.
  if ($node->webform['submit_limit'] != -1) { // -1: Submissions are never throttled.
    module_load_include('inc', 'webform', 'includes/webform.submissions');

    // Disable the form if the limit is exceeded and page cache is not active.
    if (($limit_exceeded = _webform_submission_limit_check($node)) && !$cached) {
=======
  // Check if the user's role can submit this webform.
  if (variable_get('webform_submission_access_control', 1)) {
    $allowed_roles = array();
    foreach ($node->webform['roles'] as $rid) {
      $allowed_roles[$rid] = isset($user->roles[$rid]) ? TRUE : FALSE;
    }
    if (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
      $enabled = FALSE;
    }
  }
  else {
    // If not using Webform submission access control, allow for all roles.
    $allowed_roles = array_keys(user_roles());
  }

  // Check if the user can add another submission.
  if ($node->webform['submit_limit'] != -1) { // -1: Submissions are never throttled.
    module_load_include('inc', 'webform', 'webform_submissions');

    // Disable the form if the limit is exceeded and page cache is not active.
    if (($limit_exceeded = _webform_submission_limit_check($node)) && ($user->uid != 0 || variable_get('cache', CACHE_DISABLED) == CACHE_DISABLED)) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
      $enabled = FALSE;
    }
  }

<<<<<<< HEAD
  // Check if this user has a draft for this webform.
  $is_draft = FALSE;
  if (($node->webform['allow_draft'] || $node->webform['auto_save']) && $user->uid != 0) {
    // Draft found - display form with draft data for further editing.
    if ($draft_sid = _webform_fetch_draft_sid($node->nid, $user->uid)) {
      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $submission = webform_get_submission($node->nid, $draft_sid);
      $enabled = TRUE;
      $is_draft = TRUE;
    }
  }

  // Render the form and generate the output.
  $form = !empty($node->webform['components']) ? drupal_get_form('webform_client_form_' . $node->nid, $node, $submission, $is_draft) : '';
  $output = theme('webform_view', $node, $teaser, $page, $form, $enabled);

  // Remove the surrounding <form> tag if this is a preview.
  if ($node->build_mode == NODE_BUILD_PREVIEW) {
=======
  // Get a count of previous submissions by this user.
  if ($user->uid && (user_access('access own webform submissions') || user_access('access webform results') || user_access('access webform submissions'))) {
    $submission_count = db_result(db_query('SELECT count(*) FROM {webform_submissions} WHERE nid = %d AND uid = %d', $node->nid, $user->uid));
  }

  // Render the form and generate the output.
  $form = drupal_get_form('webform_client_form_'. $node->nid, $node, $submission, $enabled, $preview);
  $output = theme('webform_view', $node, $teaser, $page, $form, $enabled);

  // Remove the surrounding <form> tag if this is a preview.
  if ($preview) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    $output = preg_replace('/<\/?form[^>]*>/', '', $output);
  }

  // Print out messages for the webform.
<<<<<<< HEAD
  if ($node->build_mode != NODE_BUILD_PREVIEW && !isset($node->webform_block) && !$logging_in) {
    theme('webform_view_messages', $node, $teaser, $page, $submission_count, $limit_exceeded, $allowed_roles, $closed, $cached);
  }

  if (isset($output)) {
    if (module_exists('content')) {
      $weight = content_extra_field_weight($node->type, 'webform');
    }
    $node->content['webform'] = array('#value' => $output, '#weight' => isset($weight) ? $weight : 10);
  }
=======
  if ($node->build_mode != NODE_BUILD_PREVIEW && !$logging_in && ($user->uid != 0 || !variable_get('cache', CACHE_DISABLED))) {
    theme('webform_view_messages', $node, $teaser, $page, $submission_count, $limit_exceeded, $allowed_roles);
  }

  // Add the output to the node.
  $node = node_prepare($node, $teaser);
  if (isset($output)) {
    $node->content['webform'] = array('#value' => $output, '#weight' => 1);
  }

  return $node;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Output the Webform into the node content.
 *
 * @param $node
 *   The webform node object.
 * @param $teaser
 *   If this webform is being displayed as the teaser view of the node.
 * @param $page
 *   If this webform node is being viewed as the main content of the page.
 * @param $form
 *   The rendered form.
 * @param $enabled
 *   If the form allowed to be completed by the current user.
 */
function theme_webform_view($node, $teaser, $page, $form, $enabled) {
  // Only show the form if this user is allowed access.
  if ($enabled) {
    return $form;
  }
}

/**
 * Display a message to a user if they are not allowed to fill out a form.
 *
 * @param $node
 *   The webform node object.
 * @param $teaser
 *   If this webform is being displayed as the teaser view of the node.
 * @param $page
 *   If this webform node is being viewed as the main content of the page.
 * @param $submission_count
 *   The number of submissions this user has already submitted. Not calculated
 *   for anonymous users.
 * @param $limit_exceeded
 *   Boolean value if the submission limit for this user has been exceeded.
 * @param $allowed_roles
 *   A list of user roles that are allowed to submit this webform.
<<<<<<< HEAD
 * @param $closed
 *   Boolean value if submissions are closed.
 * @param $cached
 *   Whether the page contents are being cached. Messages that are user-specific
 *   should not be shown when the page is cached, otherwise the message may be
 *   shown to other users. Some messages should always be shown even if the page
 *   is cached, such as "Submissions for this form are closed", because they
 *   apply to all users equally.
 */
function theme_webform_view_messages($node, $teaser, $page, $submission_count, $limit_exceeded, $allowed_roles, $closed, $cached) {
  global $user;

  $type = 'status';

  if ($closed) {
    $message = t('Submissions for this form are closed.');
  }
  // If open and not allowed to submit the form, give an explanation.
  elseif (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
=======
 */
function theme_webform_view_messages($node, $teaser, $page, $submission_count, $limit_exceeded, $allowed_roles) {
  global $user;

  $type = 'notice';

  // If not allowed to submit the form, give an explaination.
  if (array_search(TRUE, $allowed_roles) === FALSE && $user->uid != 1) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    if (empty($allowed_roles)) {
      // No roles are allowed to submit the form.
      $message = t('Submissions for this form are closed.');
    }
    elseif (isset($allowed_roles[2])) {
      // The "authenticated user" role is allowed to submit and the user is currently logged-out.
      $login = url('user/login', array('query' => drupal_get_destination()));
      $register = url('user/register', array('query' => drupal_get_destination()));
      if (variable_get('user_register', 1) == 0) {
        $message = t('You must <a href="!login">login</a> to view this form.', array('!login' => $login));
      }
      else {
        $message = t('You must <a href="!login">login</a> or <a href="!register">register</a> to view this form.', array('!login' => $login, '!register' => $register));
      }
    }
    else {
      // The user must be some other role to submit.
      $message = t('You do not have permission to view this form.');
    }
  }

  // If the user has exceeded the limit of submissions, explain the limit.
<<<<<<< HEAD
  elseif ($limit_exceeded && !$cached) {
=======
  elseif ($limit_exceeded) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    if ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] > 1) {
      $message = t('You have submitted this form the maximum number of times (@count).', array('@count' => $node->webform['submit_limit']));
    }
    elseif ($node->webform['submit_interval'] == -1 && $node->webform['submit_limit'] == 1) {
      $message = t('You have already submitted this form.');
    }
    else {
      $message = t('You may not submit another entry at this time.');
    }
    $type = 'error';
  }

  // If the user has submitted before, give them a link to their submissions.
<<<<<<< HEAD
  if ($submission_count > 0 && $node->webform['submit_notice'] == 1 && !$cached) {
    if (empty($message)) {
      $message = t('You have already submitted this form.') . ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
    }
    else {
      $message .= ' ' . t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/' . $node->nid . '/submissions')));
=======
  if ($submission_count > 0) {
    if (empty($message)) {
      $message = t('You have already submitted this form.') .' '. t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/'. $node->nid .'/submissions')));
    }
    else {
      $message .= ' '. t('<a href="!url">View your previous submissions</a>.', array('!url' => url('node/'. $node->nid .'/submissions')));
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
  }

  if ($page && isset($message)) {
<<<<<<< HEAD
    drupal_set_message($message, $type, FALSE);
=======
    drupal_set_message($message, $type);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }
}

/**
<<<<<<< HEAD
 * Implements hook_mail().
=======
 * Implementation of hook_mail().
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 */
function webform_mail($key, &$message, $params) {
  $message['headers'] = array_merge($message['headers'], $params['headers']);
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['message'];
}

/**
<<<<<<< HEAD
 * Implements hook_block().
 */
function webform_block($op = 'list', $delta = 0, $edit = array()) {
  // Get the node ID from delta.
  $nid = drupal_substr($delta, strrpos($delta, '-') + 1);
  // The result will be FALSE if this is not a webform node block.
  if ($op != 'list' && !db_result(db_query("SELECT block FROM {webform} WHERE nid = %d", $nid))) {
    return;
  }

  switch ($op) {
    case 'list':
      return webform_block_info();
    case 'view':
      return webform_block_view($delta);
    case 'configure':
      return webform_block_configure($delta);
    case 'save':
      webform_block_save($delta, $edit);
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function webform_block_info() {
  $blocks = array();
  $webform_node_types = webform_variable_get('webform_node_types');
  if (!empty($webform_node_types)) {
    $placeholders = db_placeholders($webform_node_types, 'varchar');
    $result = db_query("SELECT n.title, n.nid FROM {webform} w LEFT JOIN {node} n ON w.nid = n.nid WHERE w.block = 1 AND n.type IN ($placeholders)", $webform_node_types);
    while ($data = db_fetch_object($result)) {
      $blocks['client-block-' . $data->nid] = array(
        'info' => t('Webform: !title', array('!title' => $data->title)),
        'cache' => BLOCK_NO_CACHE,
      );
    }
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function webform_block_view($delta = '') {
  global $user;

  // Load the block-specific configuration settings.
  $webform_blocks = variable_get('webform_blocks', array());
  $settings = isset($webform_blocks[$delta]) ? $webform_blocks[$delta] : array();
  $settings += array(
    'display' => 'form',
    'pages_block' => 0,
  );

  // Get the node ID from delta.
  $nid = drupal_substr($delta, strrpos($delta, '-') + 1);

  // Load node in current language.
  if (module_exists('translation')) {
    global $language;
    if (($translations = translation_node_get_translations($nid)) && (isset($translations[$language->language]))) {
      $nid = $translations[$language->language]->nid;
    }
  }

  // The webform node to display in the block.
  $node = node_load($nid);

  // Return if user has no access to the webform node.
  if (!node_access('view', $node)) {
    return;
  }

  // This is a webform node block.
  $node->webform_block = TRUE;

  // Use the node title for the block title.
  $subject = $node->title;

  // Generate the content of the block based on display settings.
  if ($settings['display'] == 'form') {
    webform_node_view($node, FALSE, TRUE, FALSE);
    $content = $node->content['webform']['#value'];
  }
  else {
    $teaser = ($settings['display'] == 'teaser') ? TRUE : FALSE;
    $content = node_view($node, $teaser, TRUE, FALSE);
  }

  // Create the block.
  $block = array(
    'subject' => $subject,
    'content' => $content,
  );
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function webform_block_configure($delta = '') {
  // Load the block-specific configuration settings.
  $webform_blocks = variable_get('webform_blocks', array());
  $settings = isset($webform_blocks[$delta]) ? $webform_blocks[$delta] : array();
  $settings += array(
    'display' => 'form',
    'pages_block' => 0,
  );

  $form = array();
  $form['display'] = array(
    '#type' => 'radios',
    '#title' => t('Display mode'),
    '#default_value' => $settings['display'],
    '#options' => array(
      'form' => t('Form only'),
      'full' => t('Full node'),
      'teaser' => t('Teaser'),
    ),
    '#description' => t('The display mode determines how much of the webform to show within the block.'),
  );

  $form['pages_block'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show all webform pages in block'),
    '#default_value' => $settings['pages_block'],
    '#description' => t('By default multi-page webforms redirect to the node page for all pages after the first one. If checked, all pages will be shown in the block instead.'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function webform_block_save($delta = '', $edit = array()) {
  // Load the previously defined block-specific configuration settings.
  $settings = variable_get('webform_blocks', array());
  // Build the settings array.
  $new_settings[$delta] = array(
    'display' => $edit['display'],
    'pages_block' => $edit['pages_block'],
  );
  // We store settings for multiple blocks in just one variable
  // so we merge the existing settings with the new ones before save.
  variable_set('webform_blocks', array_merge($settings, $new_settings));
=======
 * Menu callback for admin/webform/settings.
 */
function webform_admin_settings() {
  module_load_include('inc', 'webform', 'webform_export');

  $form['components'] = array(
    '#type' => 'fieldset',
    '#title' => t('Available components'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('These are the available field types for your installation of Webform. You may disable any of these components by unchecking its corresponding box. Only checked components will be available in existing or new webforms.'),
  );

  // Add each component to the form:
  $component_types = webform_load_components(TRUE);
  foreach ($component_types as $key => $component) {
    $form['components']['webform_enable_'. $key] = array(
      '#title' => $component,
      '#description' => module_invoke('webform', 'help', 'admin/settings/webform#'. $key .'_description'),
      '#type' => 'checkbox',
      '#checked_value' => 1,
      '#default_value' => variable_get('webform_enable_'. $key, 1),
    );
  }

  $form['email'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default e-mail values'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['email']['webform_default_from_address']  = array(
    '#type' => 'textfield',
    '#title' => t('From address'),
    '#default_value' => variable_get('webform_default_from_address', variable_get('site_mail', ini_get('sendmail_from'))),
    '#description' => t('The default sender address for emailed webform results; often the e-mail address of the maintainer of your forms.'),
  );

  $form['email']['webform_default_from_name']  = array(
    '#type' => 'textfield',
    '#title' => t('From name'),
    '#default_value' => variable_get('webform_default_from_name', variable_get('site_name', '')),
    '#description' => t('The default sender name which is used along with the default from address.'),
  );

  $form['email']['webform_default_subject']  = array(
    '#type' => 'textfield',
    '#title' => t('Default subject'),
    '#default_value' => variable_get('webform_default_subject', t('Form submission from: %title')),
    '#description' => t('The default subject line of any e-mailed results.'),
  );

  $form['advanced'] = array(
    '#type' => 'fieldset',
    '#title' => t('Advanced options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['advanced']['webform_use_cookies']  = array(
    '#type' => 'checkbox',
    '#checked_value' => 1,
    '#title' => t('Allow cookies for tracking submissions'),
    '#default_value' => variable_get('webform_use_cookies', 0),
    '#description' => t('<a href="http://www.wikipedia.org/wiki/HTTP_cookie">Cookies</a> can be used to help prevent the same user from repeatedly submitting a webform. This feature is not needed for limiting submissions per user, though it can increase accuracy in some situations. Besides cookies, Webform also uses IP addresses and site usernames to prevent repeated submissions.'),
  );

  $form['advanced']['webform_export_format'] = array(
    '#type' => 'radios',
    '#title' => t('Default export format'),
    '#options' => webform_export_list(),
    '#default_value' => variable_get('webform_export_format', 'delimited'),
  );

  $form['advanced']['webform_csv_delimiter']  = array(
    '#type' => 'select',
    '#title' => t('Default export delimiter'),
    '#description' => t('This is the delimiter used in the CSV/TSV file when downloading Webform results. Using tabs in the export is the most reliable method for preserving non-latin characters. You may want to change this to another character depending on the program with which you anticipate importing results.'),
    '#default_value' => variable_get('webform_csv_delimiter', '\t'),
    '#options' => array(
      ','  => t('Comma (,)'),
      '\t' => t('Tab (\t)'),
      ';'  => t('Semicolon (;)'),
      ':'  => t('Colon (:)'),
      '|'  => t('Pipe (|)'),
      '.'  => t('Period (.)'),
      ' '  => t('Space ( )'),
    ),
  );

  $form['advanced']['webform_submission_access_control']  = array(
    '#type' => 'radios',
    '#title' => t('Submission access control'),
    '#options' => array(
      '1' => t('Select the user roles that may submit each individual webform'),
      '0' => t('Disable Webform submission access control'),
    ),
    '#default_value' => variable_get('webform_submission_access_control', 1),
    '#description' => t('By default, the configuration form for each webform allows the administrator to choose which roles may submit the form. You may want to allow users to always submit the form if you are using a separate node access module to control access to webform nodes themselves.'),
  );

  $form['advanced']['webform_debug']  = array(
    '#type' => 'select',
    '#title' => t('Webforms debug'),
    '#default_value' => variable_get('webform_debug', 0),
    '#options' => array(0 => t('Off'), 1 => t('Log submissions'), 2 => t('Full debug')),
    '#description' => t('Set to "Log submissions" to log all submissions in the watchdog. Set to "Full debug" to print debug info on submission.')
  );

  $form = system_settings_form($form);
  $form['#theme'] = 'webform_admin_settings';

  return $form;
}

function theme_webform_admin_settings($form) {
  // Format the components into a table.
  foreach (element_children($form['components']) as $key) {
    $row = array();
    $row[] = $form['components'][$key]['#title'];
    $row[] = $form['components'][$key]['#description'];
    unset($form['components'][$key]['#title']);
    unset($form['components'][$key]['#description']);
    $row[] = array('data' => drupal_render($form['components'][$key]), 'align' => 'center');
    $rows[] = $row;
  }
  $header = array(t('Name'), t('Description'), t('Enabled'));

  // Create the table inside the form.
  $form['components']['table'] = array(
    '#value' => theme('table', $header, $rows)
  );

  $output = drupal_render($form);
  return $output;
}

/**
 * Menu callback to load the appropriate node form.
 */
function webform_client_form_load($node, $submission, $enabled, $preview) {
  return drupal_get_form('webform_client_form_'. $node->nid, $node, $submission, $enabled, $preview);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Client form generation function. If this is displaying an existing
 * submission, pass in the $submission variable with the contents of the
 * submission to be displayed.
 *
 * @param $form_state
 *   The current form values of a submission, used in multipage webforms.
 * @param $node
 *   The current webform node.
 * @param $submission
 *   An object containing information about the form submission if we're
 *   displaying a result.
<<<<<<< HEAD
 * @param $is_draft
 *   Optional. Set to TRUE if displaying a draft.
 * @param $filter
 *   Whether or not to filter the contents of descriptions and values when
 *   building the form. Values need to be unfiltered to be editable by
 *   Form Builder.
 */
function webform_client_form(&$form_state, $node, $submission, $is_draft = FALSE, $filter = TRUE) {
  global $user;

  module_load_include('inc', 'webform', 'includes/webform.components');
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  // If in a multi-step form, a submission ID may be specified in form state.
  // Load this submission. This allows anonymous users to use auto-save.
  if (empty($submission) && !empty($form_state['values']['details']['sid'])) {
    $submission = webform_get_submission($node->nid, $form_state['values']['details']['sid']);
    $is_draft = $submission->is_draft;
  }

  // Bind arguments to $form to make them available in theming and form_alter.
  $form['#node'] = $node;
  $form['#submission'] = $submission;
  $form['#is_draft'] = $is_draft;
  $form['#filter'] = $filter;

  // Add a theme function for this form.
  $form['#theme'] = array('webform_form_' . $node->nid, 'webform_form');
=======
 * @param $enabled
 *   If displaying a result, specify if form elements are enabled for
 *   editing.
 */
function webform_client_form(&$form_state, $node, $submission, $enabled = FALSE, $preview = FALSE) {
  module_load_include('inc', 'webform', 'webform_components');
  webform_load_components();

  if (isset($submission->sid)) {
    drupal_set_title(t('Submission #@sid', array('@sid' => $submission->sid)));
  }

  // Set a header for navigating results.
  if ($submission && user_access('access webform results')) {
    // Add CSS to display submission info. Don't preprocess because this CSS file is used rarely.
    drupal_add_css(drupal_get_path('module', 'webform') .'/webform.css', 'module', 'all', FALSE);

    $previous = db_result(db_query('SELECT MAX(sid) FROM {webform_submissions} WHERE nid = %d AND sid < %d', array($node->nid, $submission->sid)));
    $next = db_result(db_query('SELECT MIN(sid) FROM {webform_submissions} WHERE nid = %d AND sid > %d', array($node->nid, $submission->sid)));

    $form['submission'] = array(
      '#type' => 'value',
      '#value' => $submission,
    );
    $form['navigation'] = array(
      '#prefix' => '<div class="webform-submission-navigation">',
      '#suffix' => '</div>',
    );
    $form['navigation']['previous'] = array(
      '#value' => $previous ? l(t('Previous submission'), 'node/'. $node->nid .'/submission/'. $previous . ($enabled ? '/edit' : '') , array('attributes' => array('class' => 'webform-submission-previous'), 'query' => ($enabled ? 'destination=node/'. $node->nid .'/submission/'. $previous .'/edit' : NULL))) : '<span class="webform-submission-previous">'. t('Previous submission') .'</span>',
    );
    $form['navigation']['next'] = array(
      '#value' => $next ? l(t('Next submission'), 'node/'. $node->nid .'/submission/'. $next . ($enabled ? '/edit' : ''), array('attributes' => array('class' => 'webform-submission-next'), 'query' => ($enabled ? 'destination=node/'. $node->nid .'/submission/'. $next .'/edit' : NULL))) : '<span class="webform-submission-next">'. t('Next submission') .'</span>',
    );

    $form['submission_info'] = array(
      '#title' => t('Submission Information'),
      '#type' => 'fieldset',
      '#collapsible' => FALSE,
    );
    $account = user_load(array('uid' => $submission->uid));
    $form['submission_info']['user_picture'] = array(
      '#value' => theme('user_picture', $account),
    );
    $form['submission_info']['form'] = array(
      '#value' => '<div>'. t('Form: !form', array('!form' => l($node->title, 'node/'. $node->nid))) .'</div>',
    );
    $form['submission_info']['submitted'] = array(
      '#value' => '<div>'. t('Submitted by !name', array('!name' => theme('username', $account))) .'</div>',
    );
    $form['submission_info']['time'] = array(
      '#value' => '<div>'. format_date($submission->submitted, 'large') .'</div>',
    );
    $form['submission_info']['ip_address'] = array(
      '#value' => '<div>'. $submission->remote_addr .'</div>',
    );
  }

  // Add a theme function for this form.
  $form['#theme'] = array('webform_form_'. $node->nid, 'webform_form');
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

  // Add a css class for all client forms.
  $form['#attributes'] = array('class' => 'webform-client-form');

  // Set the encoding type (necessary for file uploads).
  $form['#attributes']['enctype'] = 'multipart/form-data';

<<<<<<< HEAD
  // If this is a webform block, load the block-specific configuration settings.
  $pages_in_node = TRUE;
  if (isset($node->webform_block)) {
    $webform_blocks = variable_get('webform_blocks', array());
    $delta = 'client-block-' . $node->nid;
    $block_settings = isset($webform_blocks[$delta]) ? $webform_blocks[$delta] : array();
    $pages_in_node = empty($block_settings['pages_block']);
  }

  // Set the form action to the node ID in case this is being displayed on the
  // teaser or in a block, subsequent pages should be on the node page directly.
  if ($pages_in_node && empty($submission)) {
    $query = $_GET;
    unset($query['q']);
    $form['#action'] = url('node/' . $node->nid, array('query' => $query));
  }

  $form['#submit'] = array('webform_client_form_pages', 'webform_client_form_submit');
  $form['#validate'] = array('webform_client_form_validate');
=======
  // Set the form action to the node ID in case this is being displayed on the
  // teaser, subsequent pages should be on the node page directly.
  if (empty($submission)) {
    $form['#action'] = url('node/'. $node->nid);
  }

  $form['#submit'][] = 'webform_client_form_submit';
  $form['#validate'][] = 'webform_client_form_validate';
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

  if (is_array($node->webform['components']) && !empty($node->webform['components'])) {
    // Prepare a new form array.
    $form['submitted'] = array(
      '#tree' => TRUE
    );
    $form['details'] = array(
      '#tree' => TRUE,
    );

    // Put the components into a tree structure.
<<<<<<< HEAD
    if (!isset($form_state['storage']['component_tree'])) {
      $form_state['webform']['component_tree'] = array();
      $form_state['webform']['page_count'] = 1;
      $form_state['webform']['page_num'] = 1;
      _webform_components_tree_build($node->webform['components'], $form_state['webform']['component_tree'], 0, $form_state['webform']['page_count']);
    }
    else {
      $form_state['webform']['component_tree'] = $form_state['storage']['component_tree'];
      $form_state['webform']['page_count'] = $form_state['storage']['page_count'];
      $form_state['webform']['page_num'] = $form_state['storage']['page_num'];
    }

    // Shorten up our variable names.
    $component_tree = $form_state['webform']['component_tree'];
    $page_count = $form_state['webform']['page_count'];
    $page_num = $form_state['webform']['page_num'];

    // Recursively add components to the form.
    foreach ($component_tree['children'] as $cid => $component) {
      $component_value = isset($form_state['values']['submitted'][$cid]) ? $form_state['values']['submitted'][$cid] : NULL;
      if (_webform_client_form_rule_check($node, $component, $page_num, $form_state)) {
        _webform_client_form_add_component($node, $component, $component_value, $form['submitted'], $form, $form_state, $submission, 'form', $page_num, $filter);
      }
    }

    // These form details help managing data upon submission.
    $form['details']['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid,
    );
    $form['details']['sid'] = array(
      '#type' => 'hidden',
      '#value' => isset($submission->sid) ? $submission->sid : '',
    );
    $form['details']['uid'] = array(
      '#type' => 'value',
      '#value' => isset($submission->uid) ? $submission->uid : $user->uid,
    );
    $form['details']['page_num'] = array(
      '#type'  => 'hidden',
      '#value' => $page_num,
    );
    $form['details']['page_count'] = array(
      '#type'  => 'hidden',
      '#value' => $page_count,
    );
    $form['details']['finished'] = array(
      '#type' => 'hidden',
      '#value' => isset($submission->is_draft) ? (!$submission->is_draft) : 0,
    );

    // Add buttons for pages, drafts, and submissions.
    $form['actions'] = array(
      '#tree' => FALSE,
      '#weight' => 1000,
      '#prefix' => '<div id="edit-actions" class="form-actions form-wrapper">',
      '#suffix' => '</div>',
    );

    // Add the draft button.
    if ($node->webform['allow_draft'] && (empty($submission) || $submission->is_draft) && $user->uid != 0) {
      $form['actions']['draft'] = array(
        '#type' => 'submit',
        '#value' => t('Save Draft'),
        '#weight' => -2,
        '#validate' => array(),
      );
    }

    if ($page_count > 1) {
      $next_page = t('Next Page >');
      $prev_page = t('< Previous Page');

      // Add the submit button(s).
      if ($page_num > 1) {
        $form['actions']['previous'] = array(
          '#type' => 'submit',
          '#value' => $prev_page,
          '#weight' => 5,
          '#validate' => array(),
        );
      }
      if ($page_num == $page_count) {
        $form['actions']['submit'] = array(
          '#type' => 'submit',
          '#value' => empty($node->webform['submit_text']) ? t('Submit') : t($node->webform['submit_text']),
          '#weight' => 10,
        );
      }
      elseif ($page_num < $page_count) {
        $form['actions']['next'] = array(
          '#type' => 'submit',
          '#value' => $next_page,
          '#weight' => 10,
        );
      }
    }
    else {
      // Add the submit button.
      $form['actions']['submit'] = array(
        '#type' => 'submit',
        '#value' => empty($node->webform['submit_text']) ? t('Submit') : t($node->webform['submit_text']),
        '#weight' => 10,
      );
    }
  }

  return $form;
}

/**
 * Check if a component should be displayed on the current page.
 */
function _webform_client_form_rule_check($node, $component, $page_num, $form_state = NULL, $submission = NULL) {
  $conditional_values = isset($component['extra']['conditional_values']) ? $component['extra']['conditional_values'] : NULL;
  $conditional_component = isset($component['extra']['conditional_component']) && isset($node->webform['components'][$component['extra']['conditional_component']]) ? $node->webform['components'][$component['extra']['conditional_component']] : NULL;
  $conditional_cid = $conditional_component['cid'];

  // Check the rules for this entire page. Note individual page breaks are
  // checked down below in the individual component rule checks.
  $show_page = TRUE;
  if ($component['page_num'] > 1 && $component['type'] != 'pagebreak') {
    foreach ($node->webform['components'] as $cid => $page_component) {
      if ($page_component['type'] == 'pagebreak' && $page_component['page_num'] == $page_num) {
        $show_page = _webform_client_form_rule_check($node, $page_component, $page_num, $form_state, $submission);
        break;
      }
    }
  }

  // Check any parents' visibility rules.
  $show_parent = $show_page;
  if ($show_parent && $component['pid'] && isset($node->webform['components'][$component['pid']])) {
    $parent_component = $node->webform['components'][$component['pid']];
    $show_parent = _webform_client_form_rule_check($node, $parent_component, $page_num, $form_state, $submission);
  }

  // Check the individual component rules.
  $show_component = $show_parent;
  if ($show_component && ($page_num == 0 || $component['page_num'] == $page_num) && $conditional_component && strlen(trim($conditional_values))) {
    $input_values = array();
    if (isset($form_state)) {
      $input_value = isset($form_state['values']['submitted'][$conditional_cid]) ? $form_state['values']['submitted'][$conditional_cid] : NULL;
      $input_values = is_array($input_value) ? $input_value : array($input_value);
    }
    elseif (isset($submission)) {
      $input_values = isset($submission->data[$conditional_cid]['value']) ? $submission->data[$conditional_cid]['value'] : array();
    }

    $test_values = array_map('trim', explode("\n", $conditional_values));
    if (empty($input_values) && !empty($test_values)) {
      $show_component = FALSE;
    }
    else {
      foreach ($input_values as $input_value) {
        if ($show_component = in_array($input_value, $test_values)) {
          break;
        }
      }
    }

    if ($component['extra']['conditional_operator'] == '!=') {
      $show_component = !$show_component;
    }
  }

  // Private component?
  if ($component['extra']['private']) {
    $show_component = webform_results_access($node);
  }

  return $show_component;
}

/**
 * Add a component to a renderable array. Called recursively for fieldsets.
 *
 * This function assists in the building of the client form, as well as the
 * display of results, and the text of e-mails.
 *
 * @param $component
 *   The component to be added to the form.
 * @param $component_value
 *   The components current value if known.
 * @param $parent_fieldset
 *   The fieldset to which this element will be added.
 * @param $form
 *   The entire form array.
 * @param $form_state
 *   The form state.
 * @param $submission
 *   The Webform submission as retrieved from the database.
 * @param $format
 *   The format the form should be displayed as. May be one of the following:
 *   - form: Show as an editable form.
 *   - html: Show as HTML results.
 *   - text: Show as plain text.
 * @param $filter
 *   Whether the form element properties should be filtered. Only set to FALSE
 *   if needing the raw properties for editing.
 *
 * @see webform_client_form()
 * @see webform_submission_render()
 */
function _webform_client_form_add_component($node, $component, $component_value, &$parent_fieldset, &$form, $form_state, $submission, $format = 'form', $page_num = 0, $filter = TRUE) {
  $cid = $component['cid'];

  // Load with submission information if necessary.
  if ($format != 'form') {
    // This component is display only.
    $data = empty($submission->data[$cid]['value']) ? NULL : $submission->data[$cid]['value'];
    if ($display_element = webform_component_invoke($component['type'], 'display', $component, $data, $format)) {
      // The form_builder() function usually adds #parents and #id for us, but
      // because these are not marked for #input, we need to add them manually.
      if (!isset($display_element['#parents'])) {
        $parents = isset($parent_fieldset['#parents']) ? $parent_fieldset['#parents'] : array('submitted');
        $parents[] = $component['form_key'];
        $display_element['#parents'] = $parents;
      }
      if (!isset($display_element['#id'])) {
        $display_element['#id'] = form_clean_id('edit-' . implode('-', $display_element['#parents']));
      }
      $parent_fieldset[$component['form_key']] = $display_element;
=======
    $component_tree = array();
    $page_count = 1;
    $page_num = 1;
    _webform_components_tree_build($node->webform['components'], $component_tree, 0, $page_count);

    if ((!$preview && $enabled)) {
      if ($page_count > 1) {
        $next_page = t('Next Page >');
        $prev_page = t('< Previous Page');

        // Check if we're in a multipage form and determine the page number.
        if (!empty($form_state['storage']['submitted'])) {
          $page_num = $form_state['values']['details']['page_num'];
          $errors = form_get_errors();
          if (empty($errors)) {
            if ($form_state['values']['op'] == $prev_page && $page_num > 1) {
              $page_num--;
            }
            elseif ($form_state['values']['op'] == $next_page && $page_num < $page_count) {
              $page_num++;
            }
          }
        }
        else {
          $page_num = 1;
        }

        $form['details']['page_num'] = array(
          '#type'      => 'hidden',
          '#value'     => $page_num,
        );

        $form['details']['page_count'] = array(
          '#type'      => 'hidden',
          '#value'     => $page_count,
        );

        // Add the submit button(s).
        if ($page_num > 1) {
          $form['previous'] = array(
            '#type' => 'submit',
            '#value' => $prev_page,
            '#weight' => 1000,
          );
        }
        if ($page_num == $page_count) {
          $form['submit'] = array(
            '#type' => 'submit',
            '#value' => empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'],
            '#weight' => 1001,
          );
        }
        elseif ($page_num < $page_count) {
          $form['next'] = array(
            '#type' => 'submit',
            '#value' => $next_page,
            '#weight' => 1001,
          );
        }
      }
      else {
        $page_num = 1;
        // Add the submit button.
        $form['submit'] = array(
          '#type' => 'submit',
          '#value' => empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'],
          '#weight' => 1000,
        );
      }
    }

    // Recursively add components to the form. Microweights keep things in webform order.
    $microweight = 0.001;
    foreach ($component_tree['children'] as $cid => $component) {
      $component_value = isset($form_state['values']['submitted'][$component['form_key']]) ? $form_state['values']['submitted'][$component['form_key']] : NULL;
      _webform_client_form_add_component($cid, $component, $component_value, $form['submitted'], $form, $submission, $page_num, $enabled);
      if (isset($form['submitted'][$component['form_key']])) {
        $form['submitted'][$component['form_key']]['#weight'] += $microweight;
        $microweight += 0.001;
      }
    }
    // Do not display the submit button if this is a preview or submission view.
    if ((!$preview && $enabled)) {
      // Additional hidden elements.
      $form['details']['email_subject'] = array(
        '#type'      => 'hidden',
        '#value'     => $node->webform['email_subject'],
      );
      $form['details']['email_from_name'] = array(
        '#type'      => 'hidden',
        '#value'     => $node->webform['email_from_name'],
      );
      $form['details']['email_from_address'] = array(
        '#type'      => 'hidden',
        '#value'     => $node->webform['email_from_address'],
      );
      $form['details']['nid'] = array(
        '#type'      => 'value',
        '#value'     => $node->nid,
      );
      if (isset($submission->sid)) {
        $form['details']['sid'] = array(
          '#type'      => 'hidden',
          '#value'     => $submission->sid,
        );
      }
    }
  }

  return $form;
}

function _webform_client_form_add_component($cid, $component, $component_value, &$parent_fieldset, &$form, $submission, $page_num, $enabled = FALSE) {
  // Load with submission information if necessary.
  if (!$enabled) {
    // This component is display only.
    $display_function = '_webform_submission_display_'. $component['type'];
    if (function_exists($display_function)) {
      $parent_fieldset[$component['form_key']] = $display_function(empty($submission->data[$cid]) ? NULL : $submission->data[$cid], $component, $enabled);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
  }
  elseif ($component['page_num'] == $page_num) {
    // Add this user-defined field to the form (with all the values that are always available).
<<<<<<< HEAD
    $data = isset($submission->data[$cid]['value']) ? $submission->data[$cid]['value'] : NULL;
    if ($element = webform_component_invoke($component['type'], 'render', $component, $data, $filter)) {
      $parent_fieldset[$component['form_key']] = $element;

      // Override the value if one already exists in the form state.
      if (isset($component_value)) {
        $parent_fieldset[$component['form_key']]['#default_value'] = $component_value;
        if (is_array($component_value)) {
          foreach ($component_value as $key => $value) {
            if (isset($parent_fieldset[$component['form_key']][$key])) {
              $parent_fieldset[$component['form_key']][$key]['#default_value'] = $value;
            }
          }
        }
      }
    }
    else {
      drupal_set_message(t('The webform component @type is not able to be displayed', array('@type' => $component['type'])));
    }
  }

  // Disable validation initially on all elements. We manually validate
  // all webform elements in webform_client_form_validate().
  if (isset($parent_fieldset[$component['form_key']])) {
    $parent_fieldset[$component['form_key']]['#validated'] = TRUE;
    $parent_fieldset[$component['form_key']]['#webform_validated'] = FALSE;
  }

  if (isset($component['children']) && is_array($component['children'])) {
    foreach ($component['children'] as $scid => $subcomponent) {
      $subcomponent_value = isset($form_state['values']['submitted'][$scid]) ? $form_state['values']['submitted'][$scid] : NULL;
      if (_webform_client_form_rule_check($node, $subcomponent, $page_num, $form_state, $submission)) {
        _webform_client_form_add_component($node, $subcomponent, $subcomponent_value, $parent_fieldset[$component['form_key']], $form, $form_state, $submission, $format, $page_num, $filter);
      }
=======
    if (isset($submission->data)) {
      $display_function = '_webform_submission_display_'. $component['type'];
      if (function_exists($display_function)) {
        $data = isset($submission->data[$cid]) ? $submission->data[$cid] : NULL;
        $parent_fieldset[$component['form_key']] = $display_function($data, $component, $enabled);
      }
    }
    else {
      $render_function = '_webform_render_'. $component['type'];
      if (function_exists($render_function)) {
        $parent_fieldset[$component['form_key']] = $render_function($component); // Call the component render function.

        // Set a value if one already exists in the form state.
        if (isset($component_value)) {
          if (is_array($component_value)) {
            foreach ($component_value as $key => $value) {
              $parent_fieldset[$component['form_key']][$key]['#default_value'] = $value;
            }
          }
          else {
            $parent_fieldset[$component['form_key']]['#default_value'] = $component_value;
          }
        }
      }
      else {
        drupal_set_message(t('The webform component @type is not able to be displayed', array('@type' => $component['type'])));
      }
    }
  }
  if (isset($component['children']) && is_array($component['children'])) {
    $microweight = 0.001;
    foreach ($component['children'] as $scid => $subcomponent) {
      $subcomponent_value = isset($component_value[$subcomponent['form_key']]) ? $component_value[$subcomponent['form_key']] : NULL;
      _webform_client_form_add_component($scid, $subcomponent, $subcomponent_value, $parent_fieldset[$component['form_key']], $form, $submission, $page_num, $enabled);
      $parent_fieldset[$component['form_key']][$subcomponent['form_key']]['#weight'] += $microweight;
      $microweight += 0.001;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
  }
}

<<<<<<< HEAD
function webform_client_form_validate($form, &$form_state) {
  $node = node_load($form_state['values']['details']['nid']);
  $finished = $form_state['values']['details']['finished'];
=======
function webform_client_form_validate($form, $form_state) {
  $node = node_load($form_state['values']['details']['nid']);
  $sid = $form_state['values']['details']['sid'];
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8

  // Check that the user has not exceeded the submission limit.
  // This usually will only apply to anonymous users when the page cache is
  // enabled, because they may submit the form even if they do not have access.
  if ($node->webform['submit_limit'] != -1) { // -1: Submissions are never throttled.
<<<<<<< HEAD
    module_load_include('inc', 'webform', 'includes/webform.submissions');

    if (!$finished && $limit_exceeded = _webform_submission_limit_check($node)) {
      // Assume that webform_view_messages will print out the necessary message,
      // then stop the processing of the form with an empty form error.
      theme('webform_view_messages', $node, 0, 1, 0, $limit_exceeded, array_keys(user_roles()), FALSE, FALSE);
      form_set_error('', NULL);
=======
    module_load_include('inc', 'webform', 'webform_submissions');

    if (empty($sid) && $limit_exceeded = _webform_submission_limit_check($node)) {
      $error = theme('webform_view_messages', $node, 0, 1, 0, $limit_exceeded, array_keys(user_roles()));
      form_set_error('', $error);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
      return;
    }
  }

<<<<<<< HEAD
  // Run all #element_validate and #required checks. These are skipped initially
  // by setting #validated = TRUE on all components when they are added.
  _webform_client_form_validate($form, $form_state);
}

/**
 * Recursive validation function to trigger normal Drupal validation.
 *
 * This function imitates _form_validate in Drupal's form.inc, only it sets
 * a different property to ensure that validation has occurred.
 */
function _webform_client_form_validate($elements, &$form_state, $first_run = TRUE) {
  static $form;
  if ($first_run) {
    $form = $elements;
  }

  // Recurse through all children.
  foreach (element_children($elements) as $key) {
    if (isset($elements[$key]) && $elements[$key]) {
      _webform_client_form_validate($elements[$key], $form_state, FALSE);
    }
  }
  // Validate the current input.
  if (isset($elements['#webform_validated']) && $elements['#webform_validated'] == FALSE) {
    if (isset($elements['#needs_validation'])) {
      // Make sure a value is passed when the field is required.
      // A simple call to empty() will not cut it here as some fields, like
      // checkboxes, can return a valid value of '0'. Instead, check the
      // length if it's a string, and the item count if it's an array. For
      // radios, FALSE means that no value was submitted, so check that too.
      if ($elements['#required'] && (!count($elements['#value']) || (is_string($elements['#value']) && strlen(trim($elements['#value'])) == 0) || $elements['#value'] === FALSE)) {
        form_error($elements, t('!name field is required.', array('!name' => $elements['#title'])));
      }

      // Verify that the value is not longer than #maxlength.
      if (isset($elements['#maxlength']) && drupal_strlen($elements['#value']) > $elements['#maxlength']) {
        form_error($elements, t('!name cannot be longer than %max characters but is currently %length characters long.', array('!name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title'], '%max' => $elements['#maxlength'], '%length' => drupal_strlen($elements['#value']))));
      }

      if (isset($elements['#options']) && isset($elements['#value'])) {
        if ($elements['#type'] == 'select') {
          $options = form_options_flatten($elements['#options']);
        }
        else {
          $options = $elements['#options'];
        }
        if (is_array($elements['#value'])) {
          $value = $elements['#type'] == 'checkboxes' ? array_keys(array_filter($elements['#value'])) : $elements['#value'];
          foreach ($value as $v) {
            if (!isset($options[$v])) {
              form_error($elements, t('An illegal choice has been detected. Please contact the site administrator.'));
              watchdog('form', 'Illegal choice %choice in !name element.', array('%choice' => $v, '!name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title']), WATCHDOG_ERROR);
            }
          }
        }
        elseif ($elements['#value'] !== '' && !isset($options[$elements['#value']])) {
          form_error($elements, t('An illegal choice has been detected. Please contact the site administrator.'));
          watchdog('form', 'Illegal choice %choice in %name element.', array('%choice' => $elements['#value'], '%name' => empty($elements['#title']) ? $elements['#parents'][0] : $elements['#title']), WATCHDOG_ERROR);
        }
      }
    }

    // Call any element-specific validators. These must act on the element
    // #value data.
    if (isset($elements['#element_validate'])) {
      foreach ($elements['#element_validate'] as $function) {
        if (function_exists($function))  {
          $function($elements, $form_state, $form);
        }
      }
    }
    $elements['#webform_validated'] = TRUE;
  }
}

/**
 * Handle the processing of pages and conditional logic.
 */
function webform_client_form_pages($form, &$form_state) {
  $node = node_load($form_state['values']['details']['nid']);

  // Move special settings to storage.
  if (isset($form_state['webform']['component_tree'])) {
    $form_state['storage']['component_tree'] = $form_state['webform']['component_tree'];
    $form_state['storage']['page_count'] = $form_state['webform']['page_count'];
    $form_state['storage']['page_num'] = $form_state['webform']['page_num'];
  }

  // Perform post processing by components.
  _webform_client_form_submit_process($node, $form_state['values']['submitted']);

  // Flatten trees within the submission.
  $form_state['values']['submitted_tree'] = $form_state['values']['submitted'];
  $form_state['values']['submitted'] = _webform_client_form_submit_flatten($node, $form_state['values']['submitted']);

  // Assume the form is completed unless the page logic says otherwise.
  $form_state['webform_completed'] = TRUE;

  // Check for a multi-page form that is not yet complete.
  $submit_op = !empty($form['actions']['submit']['#value']) ? $form['actions']['submit']['#value'] : t('Submit');
  $draft_op = !empty($form['actions']['draft']['#value']) ? $form['actions']['draft']['#value'] : t('Save Draft');
  if (!in_array($form_state['values']['op'], array($submit_op, $draft_op))) {
=======
  // Flatten trees within the submission.
  $form_state['values']['submitted_tree'] = $form_state['values']['submitted'];
  $form_state['values']['submitted'] = _webform_client_form_submit_flatten($node, $form_state['values']['submitted']);

  if (trim($node->webform['additional_validate'])) {
    // Support for Drupal 5 validation code.
    $form_values =& $form_state['values'];
    // We use eval here (rather than drupal_eval) because the user needs access to local variables.
    eval('?>'. $node->webform['additional_validate']);
  }
}

function webform_client_form_submit($form, &$form_state) {
  global $user, $base_url;
  module_load_include('inc', 'webform', 'webform_submissions');
  webform_load_components();

  $node = node_load(array('nid' => $form_state['values']['details']['nid']));

  // Check for a multi-page form that is not yet complete.
  $submit_op = empty($node->webform['submit_text']) ? t('Submit') : $node->webform['submit_text'];
  if ($form_state['values']['op'] != $submit_op) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    // Checkboxes need post-processing to maintain their values.
    _webform_client_form_submit_process($node, $form_state['values']['submitted'], array('select', 'grid'));

    // Store values from the current page in the form state storage.
    if (is_array($form_state['values']['submitted'])) {
      foreach ($form_state['values']['submitted'] as $key => $val) {
        $form_state['storage']['submitted'][$key] = $val;
      }
    }

    // Update form state values with those from storage.
<<<<<<< HEAD
    if (isset($form_state['storage']['submitted'])) {
=======
    if (is_array($form_state['storage']['submitted'])) {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
      foreach ($form_state['storage']['submitted'] as $key => $val) {
        $form_state['values']['submitted'][$key] = $val;
      }
    }

<<<<<<< HEAD
    // Set the page number.
    if (!isset($form_state['storage']['page_num'])) {
      $form_state['storage']['page_num'] = 1;
    }
    if (end($form_state['clicked_button']['#parents']) == 'next') {
      $direction = 1;
    }
    else {
      $direction = 0;
    }

    // If the next page has no components that need to be displayed, skip it.
    if (isset($direction)) {
      $components = $direction ? $node->webform['components'] : array_reverse($node->webform['components'], TRUE);
      $last_component = end($node->webform['components']);
      foreach ($components as $component) {
        if ($component['type'] == 'pagebreak' && (
            $direction == 1 && $component['page_num'] > $form_state['storage']['page_num'] ||
            $direction == 0 && $component['page_num'] <= $form_state['storage']['page_num'])) {
          $previous_pagebreak = $component;
          continue;
        }
        if (isset($previous_pagebreak)) {
          $page_num = $previous_pagebreak['page_num'] + $direction - 1;
          // If we've found an component on this page, advance to that page.
          if ($component['page_num'] == $page_num && _webform_client_form_rule_check($node, $component, $page_num, $form_state)) {
            $form_state['storage']['page_num'] = $page_num;
            break;
          }
          // If we've gotten to the end of the form without finding any more
          // components, set the page number more than the max, ending the form.
          elseif ($direction && $component['cid'] == $last_component['cid']) {
            $form_state['storage']['page_num'] = $page_num + 1;
          }
        }
      }
    }

    // The form is done if the page number is greater than the page count.
    $form_state['webform_completed'] = $form_state['storage']['page_num'] > $form_state['storage']['page_count'];
  }

  // Merge any stored submission data for multistep forms.
  if (isset($form_state['storage']['submitted'])) {
=======
    // Rebuild the form, allowing the rebuild to determine the next page.
    $form_state['rebuild'] = TRUE;
    return;
  }

  if (isset($form_state['storage']['submitted'])) {
    // Merge any stored submission data for multistep forms.
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    $original_values = is_array($form_state['values']['submitted']) ? $form_state['values']['submitted'] : array();
    unset($form_state['values']['submitted']);

    foreach ($form_state['storage']['submitted'] as $key => $val) {
      $form_state['values']['submitted'][$key] = $val;
    }
    foreach ($original_values as $key => $val) {
      $form_state['values']['submitted'][$key] = $val;
    }

<<<<<<< HEAD
    // Remove the variable so it doesn't show up in the additional processing.
    unset($original_values);
  }

  // Inform the submit handlers that a draft will be saved.
  $form_state['save_draft'] = $form_state['values']['op'] == $draft_op || ($node->webform['auto_save'] && !$form_state['webform_completed']);

  // Determine what we need to do on the next page.
  if (!empty($form_state['save_draft']) || !$form_state['webform_completed']) {
    // Rebuild the form and display the current (on drafts) or next page.
    $form_state['rebuild'] = TRUE;
  }
  else {
    // Remove the form state storage now that we're done with the pages.
    unset($form_state['rebuild']);
    unset($form_state['storage']);
  }
}

/**
 * Submit handler for saving the form values and sending e-mails.
 */
function webform_client_form_submit($form, &$form_state) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  module_load_include('inc', 'webform', 'includes/webform.components');
  global $user;

  if (empty($form_state['save_draft']) && empty($form_state['webform_completed'])) {
    return;
  }

  $node = $form['#node'];
  $sid = $form_state['values']['details']['sid'] ? (int) $form_state['values']['details']['sid'] : NULL;

  // Check if user is submitting as a draft.
  $is_draft = (int) !empty($form_state['save_draft']);

  if (!$sid) {
    // Create a submission object.
    $submission = (object) array(
      'nid' => $node->nid,
      'uid' => $user->uid,
      'submitted' => time(),
      'remote_addr' => ip_address(),
      'is_draft' => $is_draft,
      'data' => webform_submission_data($node, $form_state['values']['submitted']),
    );
  }
  else {
    // To maintain time and user information, load the existing submission.
    $submission = webform_get_submission($node->nid, $sid);
    $submission->is_draft = $is_draft;

    // Merge with new submission data. The + operator maintains numeric keys.
    // This maintains existing data with just-submitted data when a user resumes
    // a submission previously saved as a draft.
    $new_data = webform_submission_data($node, $form_state['values']['submitted']);
    $submission->data = $new_data + $submission->data;
  }

  // Save the submission to the database.
  if (!$sid) {
    // No sid was found thus insert it in the dataabase.
    $form_state['values']['details']['sid'] = $sid = webform_submission_insert($node, $submission);
=======
    // Remove the form state storage now that we're done with the pages.
    unset($form_state['rebuild']);
    unset($form_state['storage']);

    // Remove the variable so it doesn't show up in the additional processing.
    unset($original_values);
  }

  // Perform post processing by components.
  _webform_client_form_submit_process($node, $form_state['values']['submitted']);
  // Flatten trees within the submission.
  $form_state['values']['submitted_tree'] = $form_state['values']['submitted'];
  $form_state['values']['submitted'] = _webform_client_form_submit_flatten($node, $form_state['values']['submitted']);

  // Convert additional email addresses into actual values.
  foreach ($node->webform['additional_emails'] as $cid => $value) {
    if (is_array($form_state['values']['submitted'][$cid])) {
      $node->webform['additional_emails'][$cid] = array();
      foreach ($form_state['values']['submitted'][$cid] as $submitted_value) {
        if ($submitted_value) {
          $node->webform['additional_emails'][$cid][] = $submitted_value;
        }
      }
    }
    else {
      $node->webform['additional_emails'][$cid] = $form_state['values']['submitted'][$cid];
    }
    if (empty($node->webform['additional_emails'][$cid])) {
      unset($node->webform['additional_emails'][$cid]);
    }
  }

  // Perform additional submit processing.
  if (trim($node->webform['additional_submit'])) {
    // Support for Drupal 5 validation code.
    $form_values =& $form_state['values'];
    // We use eval here (rather than drupal_eval) because the user needs access to local variables.
    eval('?>'. $node->webform['additional_submit']);
  }

  // Save the submission to the database.
  if (empty($form_state['values']['details']['sid'])) {
    // No sid was found thus insert it in the datatabase.
    $form_state['values']['details']['sid'] = webform_submission_insert($node, $form_state['values']['submitted']);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    $form_state['values']['details']['is_new'] = TRUE;

    // Set a cookie including the server's submission time.
    // The cookie expires in the length of the interval plus a day to compensate for different timezones.
    if (variable_get('webform_use_cookies', 0)) {
<<<<<<< HEAD
      $cookie_name = 'webform-' . $node->nid;
      $time = time();
      setcookie($cookie_name . '[' . $time . ']', $time, $time + $node->webform['submit_interval'] + 86400);
    }

    // Save session information about this submission for anonymous users,
    // allowing them to access or edit their submissions.
    if (!$user->uid && user_access('access own webform submissions')) {
      $_SESSION['webform_submission'][$form_state['values']['details']['sid']] = $node->nid;
    }
  }
  else {
    // Sid was found thus update the existing sid in the database.
    webform_submission_update($node, $submission);
    $form_state['values']['details']['is_new'] = FALSE;
  }

  // Check if this form is sending an email.
  if (!$is_draft && !$form_state['values']['details']['finished']) {
    $submission = webform_get_submission($node->nid, $sid, TRUE);
    webform_submission_send_mail($node, $submission);
  }

  // Strip out empty tags added by WYSIWYG editors if needed.
  $confirmation = strlen(trim(strip_tags($node->webform['confirmation']))) ? $node->webform['confirmation'] : '';

  // Clean up the redirect URL and filter it for webform tokens.
  $redirect_url = trim($node->webform['redirect_url']);
  $redirect_url = _webform_filter_values($redirect_url, $node, $submission, NULL, FALSE, TRUE);

  // Remove the domain name from the redirect.
  $redirect_url = preg_replace('/^' . preg_quote($GLOBALS['base_url'], '/') . '\//', '', $redirect_url);

  // Check confirmation and redirect_url fields.
  $message = NULL;
  $redirect = NULL;
  $external_url = FALSE;
  if (isset($form['actions']['draft']['#value']) && $form_state['values']['op'] == $form['actions']['draft']['#value']) {
    $message = t('Submission saved. You may return to this form later and it will restore the current values.');
  }
  elseif ($is_draft) {
    $redirect = NULL;
  }
  elseif (!empty($form_state['values']['details']['finished'])) {
    $message = t('Submission updated.');
  }
  elseif ($redirect_url == '<none>') {
    $redirect = NULL;
  }
  elseif ($redirect_url == '<confirmation>') {
    $redirect = array('node/' . $node->nid . '/done', 'sid=' . $sid);
  }
  elseif (valid_url($redirect_url, TRUE)) {
    $redirect = $redirect_url;
    $external_url = TRUE;
  }
  elseif ($redirect_url && strpos($redirect_url, 'http') !== 0) {
    $parts = parse_url($redirect_url);
    $query = $parts['query'] ? ($parts['query'] . '&sid=' . $sid) : ('sid=' . $sid);
    $redirect = array($parts['path'], $query, $parts['fragment']);
  }

  // Show a message if manually set.
  if (isset($message)) {
    drupal_set_message($message);
  }
  // If redirecting and we have a confirmation message, show it as a message.
  elseif (!$is_draft && !$external_url && (!empty($redirect_url) && $redirect_url != '<confirmation>') && !empty($confirmation)) {
    drupal_set_message(check_markup($confirmation, $node->webform['confirmation_format'], FALSE));
  }

=======
      $cookie_name = 'webform-'. $node->nid;
      $time = time();
      setcookie($cookie_name .'['. $time .']', $time, $time + $node->webform['submit_interval'] + 86400);
    }
  }
  else {
    // Sid was found thus update the existing sid in the datatbase.
    webform_submission_update($node, $form_state['values']['details']['sid'], $form_state['values']['submitted']);
    $form_state['values']['details']['is_new'] = FALSE;
  }

  $sid = $form_state['values']['details']['sid'];

  // Check if this form is sending an email.
  if ((!empty($node->webform['email']) || !empty($node->webform['additional_emails'])) && $form_state['values']['details']['is_new']) {

    // Set values for the name, address, and subject for the email.
    $email_from_name = $node->webform['email_from_name'];
    $email_from_address = $node->webform['email_from_address'];
    $email_subject = $node->webform['email_subject'];
    foreach (array('from_name', 'from_address', 'subject') as $field) {
      if ($node->webform['email_'. $field] == 'default') {
        ${'email_'. $field} = _webform_filter_values(webform_variable_get('webform_default_'. $field), $node, $form_state['values']['submitted'], FALSE, TRUE);
      }
      elseif (is_numeric($node->webform['email_'. $field])) {
        if (is_array($form_state['values']['submitted'][${'email_'. $field}])) {
          $values = array();
          foreach ($form_state['values']['submitted'][${'email_'. $field}] as $key => $value) {
            $values[] = _webform_filter_values($value, $node, $form_state['values']['submitted'], FALSE, TRUE);
          }
          ${'email_'. $field} = implode(', ', $values);
        }
        else {
          ${'email_'. $field} = _webform_filter_values($form_state['values']['submitted'][${'email_'. $field}], $node, $form_state['values']['submitted'], FALSE, TRUE);
        }
      }
      else {
        ${'email_'. $field} = _webform_filter_values(${'email_'. $field}, $node, $form_state['values']['submitted'], FALSE, TRUE);
      }
    }

    // Create a themed message for mailing.
    // Check for a node-specific message:
    $emails = $node->webform['additional_emails'];
    if ($node->webform['email']) {
      $emails['default'] = $node->webform['email'];
    }
    $messages = array();
    $headers = array();
    $froms = array();
    $subjects = array();
    foreach ($emails as $cid => $email) {
      $messages[$cid] = theme(array('webform_mail_'. $node->nid, 'webform_mail', 'webform_mail_message'), $form_state['values'], $node, $sid, $cid);
      $headers[$cid] = theme(array('webform_mail_headers_'. $node->nid, 'webform_mail_headers'), $form_state['values'], $node, $sid, $cid);

      // Assemble the FROM string.
      if (isset($headers[$cid]['From'])) {
        $froms[$cid] = $headers[$cid]['From'];
        unset($headers[$cid]['From']);
      }
      elseif (drupal_strlen($email_from_name) > 0) {
        $froms[$cid] = '"'. mime_header_encode($email_from_name) .'" <'. $email_from_address .'>';
      }
      else {
        $froms[$cid] = $email_from_address;
      }

      // Update the subject if set in the themed headers.
      if (isset($headers[$cid]['Subject'])) {
        $subjects[$cid] = $headers[$cid]['Subject'];
        unset($headers[$cid]['Subject']);
      }
      else {
        $subjects[$cid] = $email_subject;
      }

      // Update the to e-mail if set in the themed headers.
      if (isset($headers[$cid]['To'])) {
        $emails[$cid] = $headers[$cid]['To'];
        unset($headers[$cid]['To']);
      }
    }

    // Verify that this submission is not attempting to send any spam hacks.
    if (_webform_submission_spam_check($emails['default'], $subjects['default'], $froms['default'], $headers['default'])) {
      watchdog('webform', 'Possible spam attempt from @remote_addr'."<br />\n". nl2br(htmlentities($messages['default'])), array('@remote_add' => ip_address()));
      drupal_set_message(t('Illegal information. Data not submitted.'), 'error');
      return FALSE;
    }

    // Mail the webform results.
    foreach ($emails as $cid => $address) {
      // In the case of checkboxes or multiple select, multiple e-mails may need
      // to be sent out.
      if (is_array($address)) {
        foreach ($address as $single_address) {
          drupal_mail('webform', 'submission', $single_address, user_preferred_language($user), array('message' => $messages[$cid], 'subject' => $subjects[$cid], 'headers' => $headers[$cid]), $froms[$cid]);

          // Debugging output for email.
          if (variable_get('webform_debug', 0) >= 2) {
            drupal_set_message('E-mail Headers: <pre>'. htmlentities(print_r($headers[$cid], TRUE)) .'</pre>To: '. $single_address .'<br />From: '. htmlentities($froms[$cid]) .'<br />Subject: '. $subjects[$cid] .'<br />E-mail Body: <pre>'. $messages[$cid] .'</pre>');
          }
        }
      }
      else {
        drupal_mail('webform', 'submission', $address, user_preferred_language($user), array('message' => $messages[$cid], 'subject' => $subjects[$cid], 'headers' => $headers[$cid]), $froms[$cid]);

        // Debugging output for email.
        if (variable_get('webform_debug', 0) >= 2) {
          drupal_set_message('E-mail Headers: <pre>'. htmlentities(print_r($headers[$cid], TRUE)) .'</pre>To: '. $address .'<br />From: '. htmlentities($froms[$cid]) .'<br />Subject: '. $subjects[$cid] .'<br />E-mail Body: <pre>'. $messages[$cid] .'</pre>');
        }
      }
    }
  }

  // More debugging output.
  if (variable_get('webform_debug', 0) >= 2) {
    drupal_set_message('$form_state is: <pre>'. htmlentities(print_r($form_state, TRUE)) .'</pre>');
    drupal_set_message('$_SERVER is: <pre>'. htmlentities(print_r($_SERVER, TRUE)) .'</pre>');
    drupal_set_message('$_POST is: <pre>'. htmlentities(print_r($_POST, TRUE)) .'</pre>');
  }

  // Log to watchdog if normal debug is on.
  if (variable_get('webform_debug', 0) >= 1) {
    watchdog('webform', 'Submission posted to %title. <a href="!url">Results</a>. !details', array('%title' => $node->title, '!url' => url('node/'. $node->nid .'/submission/'. $sid), '!results' => "<br />\n<pre>". htmlentities(print_r($form_state['values'], TRUE)) .'</pre>'));
  }

  // Check confirmation field to see if redirect should be to another node or a message.
  if (isset($form_state['values']['submission'])) {
    drupal_set_message(t('Submission updated.'));
    $redirect = NULL;
  }
  elseif (valid_url(trim($node->webform['confirmation']), TRUE)) {
    $redirect = trim($node->webform['confirmation']);
  }
  // Check if the form should redirect to an internal URL, strip tags off
  // first in case a WYSIWYG editor messed it up.
  elseif (preg_match('/^internal:/', trim(strip_tags($node->webform['confirmation'])))) {
    $path = preg_replace('/^internal:/', '', trim(strip_tags($node->webform['confirmation'])));
    $redirect = array(trim($path), 'sid='. $sid);
  }
  elseif (preg_match('/^message:/', $node->webform['confirmation'])) {
    $message = preg_replace('/^message:/', '', $node->webform['confirmation']);
    drupal_set_message($message);
    $redirect = NULL;
  }
  else {
    $redirect = array('node/'. $node->nid .'/done', 'sid='. $sid);
  }
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  $form_state['redirect'] = $redirect;
}

/**
 * Post processes the submission tree with any updates from components.
 *
 * @param $node
 *   The full webform node.
 * @param $form_values
 *   The form values for the form.
 * @param $types
 *   Optional. Specific types to perform processing.
 * @param $parent
 *   Internal use. The current parent CID whose children are being processed.
 */
function _webform_client_form_submit_process($node, &$form_values, $types = NULL, $parent = 0) {
  if (is_array($form_values)) {
    foreach ($form_values as $form_key => $value) {
      $cid = webform_get_cid($node, $form_key, $parent);
<<<<<<< HEAD
      if (is_array($value) && isset($node->webform['components'][$cid]['type']) && webform_component_feature($node->webform['components'][$cid]['type'], 'group')) {
=======
      if (is_array($value) && isset($node->webform['components'][$cid]['type']) && $node->webform['components'][$cid]['type'] == 'fieldset') {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
        _webform_client_form_submit_process($node, $form_values[$form_key], $types, $cid);
      }

      if (isset($node->webform['components'][$cid])) {
<<<<<<< HEAD
        // Call the component process submission function.
        $component = $node->webform['components'][$cid];
        if ((!isset($types) || in_array($component['type'], $types)) && webform_component_implements($component['type'], 'submit')) {
          $form_values[$component['form_key']] = webform_component_invoke($component['type'], 'submit', $component, $form_values[$component['form_key']]);
=======
        $component = $node->webform['components'][$cid];
        $submit_function = '_webform_submit_'. $component['type'];
        if (function_exists($submit_function) && (!isset($types) || in_array($component['type'], $types))) {
          // Call the component process submission function.
          $submit_function($form_values[$component['form_key']], $component);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
        }
      }
    }
  }
}

/**
 * Flattens a submitted form back into a single array representation (rather than nested fields)
 */
function _webform_client_form_submit_flatten($node, $fieldset, $parent = 0) {
  $values = array();

  if (is_array($fieldset)) {
    foreach ($fieldset as $form_key => $value) {
      $cid = webform_get_cid($node, $form_key, $parent);

<<<<<<< HEAD
      if (is_array($value) && webform_component_feature($node->webform['components'][$cid]['type'], 'group')) {
=======
      if (is_array($value) && $node->webform['components'][$cid]['type'] == 'fieldset') {
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
        $values += _webform_client_form_submit_flatten($node, $value, $cid);
      }
      else {
        $values[$cid] = $value;
      }
    }
  }

  return $values;
}

/**
 * Prints the confirmation message after a successful submission.
 */
function _webform_confirmation($node) {
  drupal_set_title(check_plain($node->title));
<<<<<<< HEAD
  webform_set_breadcrumb($node);
  $sid = isset($_GET['sid']) ? $_GET['sid'] : NULL;
  return theme(array('webform_confirmation_' . $node->nid, 'webform_confirmation'), $node, $sid);
=======
  if (empty($output)) {
    $output = theme(array('webform_confirmation_'. $node->nid, 'webform_confirmation'), $node, $_GET['sid']);
  }
  return $output;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Prepare for theming of the webform form.
 */
function template_preprocess_webform_form(&$vars) {
<<<<<<< HEAD
  drupal_add_css(drupal_get_path('module', 'webform') . '/css/webform.css');
  drupal_add_js(drupal_get_path('module', 'webform') . '/js/webform.js');

=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  if (isset($vars['form']['details']['nid']['#value'])) {
    $vars['nid'] = $vars['form']['details']['nid']['#value'];
  }
  elseif (isset($vars['form']['submission']['#value'])) {
    $vars['nid'] = $vars['form']['submission']['#value']->nid;
  }
}

/**
 * Prepare for theming of the webform submission confirmation.
 */
function template_preprocess_webform_confirmation(&$vars) {
<<<<<<< HEAD
  $confirmation = check_markup($vars['node']->webform['confirmation'], $vars['node']->webform['confirmation_format'], FALSE);
  // Strip out empty tags added by WYSIWYG editors if needed.
  $vars['confirmation_message'] = strlen(trim(strip_tags($confirmation))) ? $confirmation : '';
=======
  if (empty($vars['node']->webform['confirmation'])) {
    drupal_set_message(t('Thank you, your submission has been received.'));
    drupal_goto('node/'. $vars['node']->nid);
  }

  $vars['confirmation_message'] = check_markup($vars['node']->webform['confirmation'], $vars['node']->format, FALSE);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Prepare to theme the contents of e-mails sent by webform.
 */
function template_preprocess_webform_mail_message(&$vars) {
  global $user;

  $vars['user'] = $user;
  $vars['ip_address'] = ip_address();
}

/**
<<<<<<< HEAD
 * A Form API #pre_render function. Sets display based on #title_display.
 *
 * Note: this entire function may be removed in Drupal 7, which supports
 * #title_display natively.
 */
function webform_element_title_display($element) {
  if (isset($element['#title_display']) && $element['#title_display'] == 'none') {
    $element['#title'] = NULL;
  }
  return $element;
}

/**
 * A Form API #post_render function. Wraps displayed elements in their label.
 *
 * Note: this entire function may be removed in Drupal 7, which supports
 * #theme_wrappers natively.
 */
function webform_element_wrapper($content, $elements) {
  if (isset($elements['#theme_wrappers'])) {
    foreach ($elements['#theme_wrappers'] as $theme_wrapper) {
      $content = theme($theme_wrapper, $elements, $content);
    }
  }
  return $content;
}

/**
 * Replacement for theme_form_element().
 */
function theme_webform_element($element, $value) {
  $wrapper_classes = array(
   'form-item',
  );
  $output = '<div class="' . implode(' ', $wrapper_classes) . '" id="' . $element['#id'] . '-wrapper">' . "\n";
  $required = !empty($element['#required']) ? '<span class="form-required" title="' . t('This field is required.') . '">*</span>' : '';

  if (!empty($element['#title'])) {
    $title = $element['#title'];
    $output .= ' <label for="' . $element['#id'] . '">' . t('!title: !required', array('!title' => filter_xss_admin($title), '!required' => $required)) . "</label>\n";
  }

  $output .= '<div id="' . $element['#id'] . '">' . $value . '</div>' . "\n";

  if (!empty($element['#description'])) {
    $output .= ' <div class="description">' . $element['#description'] . "</div>\n";
  }

  $output .= "</div>\n";

  return $output;
}

/**
 * Wrap form elements in a DIV with appropriate classes and an ID.
 *
 * This is a temporary work-around until we can use theme_webform_element() for
 * all webform form elements in Drupal 7.
 */
function theme_webform_element_wrapper($element, $content) {
  // All elements using this for display only are given the "display" type.
  if (isset($element['#format']) && $element['#format'] == 'html') {
    $type = 'display';
  }
  else {
    $type = (isset($element['#type']) && !in_array($element['#type'], array('markup', 'textfield'))) ? $element['#type'] : $element['#webform_component']['type'];
  }

  $parents = str_replace('_', '-', implode('--', array_slice($element['#parents'], 1)));

  $wrapper_classes = array(
    'webform-component',
    'webform-component-' . $type,
  );
  if (isset($element['#title_display']) && $element['#title_display'] == 'inline') {
    $wrapper_classes[] = 'webform-container-inline';
  }

  $output = '';
  $output .= '<div class="' . implode(' ', $wrapper_classes) . '" id="webform-component-' . $parents . '">';
  $output .= $content;
  $output .= '</div>';
  return $output;
}

/**
 * Output a form element in plain text format.
 */
function theme_webform_element_text($element, $value) {
  $output = '';
  $is_group = webform_component_feature($element['#webform_component']['type'], 'group');

  // Output the element title.
  if (isset($element['#title'])) {
    if ($is_group) {
      $output .= '--' . $element['#title'] . '--';
    }
    elseif (!in_array(drupal_substr($element['#title'], -1), array('?', ':', '!', '%', ';', '@'))) {
      $output .= $element['#title'] . ':';
    }
    else {
      $output .= $element['#title'];
    }
  }

  // Wrap long values at 65 characters, allowing for a few fieldset indents.
  // It's common courtesy to wrap at 75 characters in e-mails.
  if ($is_group && drupal_strlen($value) > 65) {
    $value = wordwrap($value, 65, "\n");
    $lines = explode("\n", $value);
    foreach ($lines as $key => $line) {
      $lines[$key] = '  ' . $line;
    }
    $value = implode("\n", $lines);
  }

  // Add the value to the output.
  if ($value) {
    $output .= (strpos($value, "\n") === FALSE ? ' ' : "\n") . $value;
  }

  // Indent fieldsets.
  if ($is_group) {
    $lines = explode("\n", $output);
    foreach ($lines as $number => $line) {
      if (strlen($line)) {
        $lines[$number] = '  ' . $line;
      }
    }
    $output = implode("\n", $lines);
    $output .= "\n";
  }

  if ($output) {
    $output .= "\n";
  }

  return $output;
=======
 * Prepare to theme the fields portion of the e-mails sent by webform.
 *
 * This function calls itself recursively to maintain the tree structure of
 * components in the webform. It is called intially by
 * theme_webform_create_mailmessage().
 *
 * @param $cid
 *   The parent component ID we're currently printing.
 * @param $value
 *   The value of the component to be printed. May be an array of other components.
 * @param $node
 *   The full node object.
 * @param $indent
 *   The current amount of indentation being applied to printed components.
 */
function theme_webform_mail_fields($cid, $value, $node, $indent = "") {
  $component = $cid ? $node->webform['components'][$cid] : null;

  // Check if this component needs to be included in the email at all.
  if ($cid && !$component['email'] && !in_array($component['type'], array('markup', 'fieldset', 'pagebreak'))) {
    return '';
  }

  // First check for component-level themes.
  $themed_output = theme('webform_mail_'. $component['type'], $value, $component);

  $message = '';
  if ($themed_output) {
    // Indent the output and add to message.
    $message .= $indent;
    $themed_output = rtrim($themed_output, "\n");
    $message .= str_replace("\n", "\n". $indent, $themed_output);
    $message .= "\n";
  }
  // Generic output for single values.
  elseif (!is_array($value)) {
    // Note that newlines cannot be preceeded by spaces to display properly in some clients.
    if ($component['name']) {
      // If text is more than 60 characters, put it on a new line with space after.
      $long = (drupal_strlen($indent . $component['name'] . $value)) > 60;
      $message .= $indent . $component['name'] .':'. (empty($value) ? "\n" : ($long ? "\n$value\n\n" : " $value\n"));
    }
  }
  // Else use a generic output for arrays.
  else {
    if ($cid != 0) {
      $message .= $indent . $component['name'] .":\n";
    }
    foreach ($value as $k => $v) {
      foreach ($node->webform['components'] as $local_key => $local_value) {
        if ($local_value['form_key'] == $k && $local_value['pid'] == $cid) {
          $form_key = $local_key;
          break;
        }
      }
      $message .= theme('webform_mail_fields', $form_key, $v, $node, $indent .'  ');
    }
  }

  return ($message);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Theme the headers when sending an email from webform.
 *
<<<<<<< HEAD
 * @param $node
 *   The complete node object for the webform.
 * @param $submission
 *   The webform submission of the user.
 * @param $email
 *   If you desire to make different e-mail headers depending on the recipient,
 *   you can check the $email['email'] property to output different content.
 *   This will be the ID of the component that is a conditional e-mail
 *   recipient. For the normal e-mails, it will have the value of 'default'.
 * @return
 *   An array of headers to be used when sending a webform email. If headers
 *   for "From", "To", or "Subject" are set, they will take precedence over
 *   the values set in the webform configuration.
 */
function theme_webform_mail_headers($node, $submission, $email) {
  $headers = array(
    'X-Mailer' => 'Drupal Webform (PHP/' . phpversion() . ')',
=======
 * @param $form_values
 *   An array of all form values submitted by the user. The array contains three
 *   keys containing the following:
 *   - submitted: All the submitted values in a single array keyed by webform
 *     component IDs. Useful for simply looping over the values.
 *   - submitted_tree: All the submitted values in a tree-structure array, keyed
 *     by the Form Key values defined by the user.
 * @param $node
 *   The complete node object for the webform.
 * @param $sid
 *   The submission ID of the new submission.
 * @param $cid
 *   If you desire to make different e-mail headers depending on the recipient,
 *   you can check this component ID to output different content. This will be
 *   the ID of the component that is a conditional e-mail recipient. For the
 *   normal e-mails, it will have the value of 'default'.
 * @return
 *   An array of headers to be used when sending a webform email. If headers
 *   for "From", "To", or "Subject" are set, they will take precendence over
 *   the values set in the webform configuration.
 */
function theme_webform_mail_headers($form_values, $node, $sid, $cid) {
  $headers = array(
    'X-Mailer' => 'Drupal Webform (PHP/'. phpversion() .')',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  );
  return $headers;
}

/**
<<<<<<< HEAD
 * Check if current user has a draft of this webform, and return the sid.
 */
function _webform_fetch_draft_sid($nid, $uid) {
  $result = db_query("SELECT * FROM {webform_submissions} WHERE nid = %d AND uid = %d AND is_draft = 1 ORDER BY submitted DESC", $nid, $uid);
  $row = db_fetch_array($result);
  if (isset($row['sid'])) {
    return (int) $row['sid'];
  }
  return FALSE;
}

/**
 * Filters all special tokens provided by webform, such as %post and %profile.
 *
 * @param $string
 *   The string to have its tokens replaced.
=======
 * Filters all special tokens provided by webform, such as %post and %profile.
 *
 * @param $string
 *   The string to have its toknes replaced.
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 * @param $node
 *   If replacing node-level tokens, the node for which tokens will be created.
 * @param $submission
 *   If replacing submission-level tokens, the submission for which tokens will
 *   be created.
<<<<<<< HEAD
 * @param $email
 *   If replacing tokens within the context of an e-mail, the Webform e-mail
 *   settings array.
=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
 * @param $strict
 *   Boolean value indicating if the results should be run through check_plain.
 *   This is used any time the values will be output as HTML, but not in
 *   default values or e-mails.
 * @param $allow_anonymous
 *   Boolean value indicating if all tokens should be replaced for anonymous
 *   users, even if they contain sensitive user information such as %session or
 *   %ip_address. This is disabled by default to prevent user data from being
 *   preserved in the anonymous page cache and should only be used in
 *   non-cached situations, such as e-mails.
 */
<<<<<<< HEAD
function _webform_filter_values($string, $node = NULL, $submission = NULL, $email = NULL, $strict = TRUE, $allow_anonymous = FALSE) {
  global $user;
  static $replacements;

  // Don't do any filtering if the string is empty.
  if (strlen(trim($string)) == 0) {
    return $string;
  }

=======
function _webform_filter_values($string, $node = NULL, $submission = NULL, $strict = TRUE, $allow_anonymous = FALSE) {
  global $user;
  static $replacements;

>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  // Setup default token replacements.
  if (!isset($replacements)) {
    $replacements['unsafe'] = array();
    $replacements['safe']['%site'] = variable_get('site_name', 'drupal');
    $replacements['safe']['%date'] = format_date(time(), 'large');
  }

  // Node replacements.
<<<<<<< HEAD
  if (isset($node) && !array_key_exists('%nid', $replacements['safe'])) {
    $replacements['safe']['%nid'] = $node->nid;
    $replacements['safe']['%title'] = $node->title;
  }

  // Determine the display format.
  $format = isset($email['html']) && $email['html'] ? 'html' : 'text';

  // Submission replacements.
  if (isset($submission) && !isset($replacements['email'][$format])) {
    module_load_include('inc', 'webform', 'includes/webform.components.inc');

    // Set the submission ID.
    $replacements['unsafe']['%sid'] = $submission->sid;

    // E-mails may be sent in two formats, keep tokens separate for each one.
    $replacements['email'][$format] = array();

    // Populate token values for each component.
    foreach ($submission->data as $cid => $value) {
      $component = $node->webform['components'][$cid];

      // Find by form key.
      $parents = webform_component_parent_keys($node, $component);
      $form_key = implode('][', $parents);
      $display_element = webform_component_invoke($component['type'], 'display', $component, $value['value'], $format);
      if (empty($display_element['#parents'])) {
        $display_element['#parents'] = array_merge(array('submitted'), $parents);
      }
      if (empty($display_element['#id'])) {
        $display_element['#id'] = form_clean_id('edit-' . implode('-', $display_element['#parents']));
      }
      $replacements['email'][$format]['%email[' . $form_key . ']'] = drupal_render($display_element);
      $replacements['email'][$format]['%value[' . $form_key . ']'] = isset($display_element['#children']) ? $display_element['#children'] : '';
    }

    // Provide blanks for components in the webform but not in the submission.
    $missing_components = array_diff_key($node->webform['components'], $submission->data);
    foreach ($missing_components as $component) {
      $parents = webform_component_parent_keys($node, $component);
      $form_key = implode('][', $parents);
      $replacements['email'][$format]['%email[' . $form_key . ']'] = '';
      $replacements['email'][$format]['%value[' . $form_key . ']'] = '';
    }

    // Submission edit URL.
    $replacements['unsafe']['%submission_url'] = url('node/' . $node->nid . '/submission/' . $submission->sid, array('absolute' => TRUE));
  }

  // Token for the entire form tree for e-mails.
  if (isset($submission) && isset($email)) {
    $replacements['email'][$format]['%email_values'] = webform_submission_render($node, $submission, $email, $format);
  }

  // Provide a list of candidates for token replacement.
  $special_tokens = array(
    'safe' => array(
      '%get' => $_GET,
      '%post' => $_POST,
    ),
    'unsafe' => array(
      '%cookie' => $_COOKIE,
      '%session' => isset($_SESSION) ? $_SESSION : array(),
      '%request' => $_REQUEST,
      '%server' => $_SERVER,
      '%profile' => (array) $user,
    ),
  );

  // Replacements of global variable tokens.
  if (!isset($replacements['specials_set'])) {
    $replacements['specials_set'] = TRUE;

    // Load profile information if available.
    if ($user->uid) {
      $account = user_load($user->uid);
      $special_tokens['unsafe']['%profile'] = (array) $account;
    }

    // User replacements.
    if (!array_key_exists('%uid', $replacements['unsafe'])) {
      $replacements['unsafe']['%uid'] = !empty($user->uid) ? $user->uid : '';
      $replacements['unsafe']['%username'] = isset($user->name) ? $user->name : '';
      $replacements['unsafe']['%useremail'] = isset($user->mail) ? $user->mail : '';
      $replacements['unsafe']['%ip_address'] = ip_address();
    }

    // Populate the replacements array with special variables.
    foreach ($special_tokens as $safe_state => $tokens) {
      foreach ($tokens as $token => $variable) {
        // Safety check in case $_POST or some other global has been removed
        // by a naughty module, in which case $variable may be NULL.
        if (!is_array($variable)) {
          continue;
        }

        foreach ($variable as $key => $value) {
          // This special case for profile module dates.
          if ($token == '%profile' && is_array($value) && isset($value['year'])) {
            $replacement = webform_strtodate(webform_date_format(), $value['month'] . '/' . $value['day'] . '/' . $value['year'], 'UTC');
          }
          else {
            $replacement = (!is_array($value) && !is_object($value)) ? $value : '';
          }
          $replacements[$safe_state][$token . '[' . $key . ']'] = $replacement;
=======
  if (isset($node) && !array_key_exists('%title', $replacements)) {
    $replacements['safe']['%title'] = $node->title;
  }

  // Submission replacements.
  if (isset($submission) && !array_key_exists('%email_values', $replacements)) {
    foreach ($submission as $cid => $value) {
      $replacements['unsafe']['%cid[' . $cid . ']'] = (string) $value;
    }
  }

  // Provide a list of candidates for token replacement.
  // Note these tokens are not cached as they may change frequently.
  $special_tokens = array(
    'safe' => array(
      '%get' => $_GET,
    ),
    'unsafe' => array(
      '%cookie' => $_COOKIE,
      '%session' => $_SESSION,
      '%post' => $_POST,
      '%request' => $_REQUEST,
    ),
  );

  // User replacements.
  if (!array_key_exists('%username', $replacements['unsafe'])) {
    $replacements['unsafe']['%username'] = isset($user->name) ? $user->name : '';
    $replacements['unsafe']['%useremail'] = isset($user->mail) ? $user->mail : '';
    $replacements['unsafe']['%ip_address'] = ip_address();

    // Doesn't really belong here with user things, but works.
    $special_tokens['unsafe']['%server'] = $_SERVER;
  }

  // User profile replacements.
  if (!isset($replacements['unsafe']['%profile[uid]'])) {
    if ($user->uid && module_exists('profile')) {
      profile_load_profile($user);
    }
    $special_tokens['unsafe']['%profile'] = $user;
  }

  foreach ($special_tokens as $safe_state => $tokens) {
    foreach ($tokens as $token => $variable) {
      if (strpos($string, $token) !== FALSE) {
        foreach ($variable as $key => $value) {
          // This special case for profile module dates.
          if ($token == '%profile' && is_array($value) && isset($value['year'])) {
            $replacement = format_date(strtotime($value['month'] .'/'. $value['day'] .'/'. $value['year']), 'custom', 'F j, Y', '0');
          }
          else {
            $replacement = (string) $value;
          }
          $replacements[$safe_state][$token .'['. $key .']'] = $replacement;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
        }
      }
    }
  }

  // Make a copy of the replacements so we don't affect the static version.
  $safe_replacements = $replacements['safe'];

  // Restrict replacements for anonymous users. Not all tokens can be used
  // because they may expose session or other private data to other users when
  // anonymous page caching is enabled.
  if ($user->uid || $allow_anonymous) {
    $safe_replacements += $replacements['unsafe'];
<<<<<<< HEAD
    if (isset($replacements['email'][$format])) {
      $safe_replacements += $replacements['email'][$format];
    }
=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }
  else {
    foreach ($replacements['unsafe'] as $key => $value) {
      $safe_replacements[$key] = '';
    }
  }

  $find = array_keys($safe_replacements);
  $replace = array_values($safe_replacements);
  $string = str_replace($find, $replace, $string);

  // Clean up any unused tokens.
  foreach ($special_tokens as $safe_state => $tokens) {
    foreach (array_keys($tokens) as $token) {
<<<<<<< HEAD
      $string = preg_replace('/\\' . $token . '\[\w+\]/', '', $string);
    }
  }

  return $strict ? _webform_filter_xss($string) : $string;
=======
      $string = preg_replace('/\\'. $token .'\[\w+\]/', '', $string);
    }
  }

  return $strict ? filter_xss($string) : $string;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Filters all special tokens provided by webform, and allows basic layout in descriptions.
 */
<<<<<<< HEAD
function _webform_filter_descriptions($string, $node = NULL, $submission = NULL) {
  return strlen($string) == 0 ? '' : check_markup(_webform_filter_values($string, $node, $submission, NULL, FALSE));
}

/**
 * Filter labels for display by running through XSS checks.
 */
function _webform_filter_xss($string) {
  static $allowed_tags;
  $allowed_tags = isset($allowed_tags) ? $allowed_tags : webform_variable_get('webform_allowed_tags');
  return filter_xss($string, $allowed_tags);
=======
function _webform_filter_descriptions($string, $node = NULL, $submission = NULL, $strict = TRUE) {
  return check_markup(_webform_filter_values($string, $node, $submission, $strict));
}

/**
 * Menu callback for admin/content/webform. Displays all webforms on the site.
 */
function webform_admin_content() {
  $result = db_query(db_rewrite_sql("SELECT n.* FROM {node} n WHERE n.type = 'webform'"));
  $nodes = array();
  while ($node = db_fetch_object($result)) {
    $nodes[] = $node;
  }

  return theme('webform_admin_content', $nodes);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}


/**
<<<<<<< HEAD
 * Utility function to ensure that a webform record exists in the database.
 *
 * @param $node
 *   The node object to check if a database entry exists.
 * @return
 *   This function should always return TRUE if no errors were encountered,
 *   ensuring that a webform table row has been created. Will return FALSE if
 *   a record does not exist and a new one could not be created.
 */
function webform_ensure_record(&$node) {
  if (!$node->webform['record_exists']) {
    // Even though webform_node_insert() would set this property to TRUE,
    // we set record_exists to trigger a difference from the defaults.
    $node->webform['record_exists'] = TRUE;
    webform_node_insert($node);
  }
  return $node->webform['record_exists'];
}

/**
 * Utility function to check if a webform record is necessary in the database.
 *
 * If the node is no longer using any webform settings, this function will
 * delete the settings from the webform table. Note that this function will NOT
 * delete rows from the webform table if the node-type is exclusively used for
 * webforms (per the "webform_node_types_primary" variable).
 *
 * @param $node
 *   The node object to check if a database entry is still required.
 * @return
 *   Returns TRUE if the webform still has a record in the database. Returns
 *   FALSE if the webform does not have a record or if the previously existing
 *   record was just deleted.
 */
function webform_check_record(&$node) {
  $webform = $node->webform;
  $webform['record_exists'] = FALSE;
  unset($webform['nid']);

  // Don't include empty values in the comparison, this makes it so modules that
  // extend Webform with empty defaults won't affect cleanup of rows.
  $webform = array_filter($webform);
  $defaults = array_filter(webform_node_defaults());
  if ($webform == $defaults && !in_array($node->type, webform_variable_get('webform_node_types_primary'))) {
    webform_node_delete($node);
    $node->webform = webform_node_defaults();
  }
  return $node->webform['record_exists'];
=======
 * Generate a list of all webforms avaliable on this site.
 */
function theme_webform_admin_content($nodes) {
  $header = array(
    t('Title'),
    array('data' => t('View'), 'colspan' => '4'),
    array('data' => t('Operations'), 'colspan' => '2')
  );

  $rows = array();
  foreach ($nodes as $node) {
    $rows[] = array(
      l($node->title, 'node/'. $node->nid),
      l(t('Submissions'), 'node/'. $node->nid .'/webform-results'),
      l(t('Analysis'), 'node/'. $node->nid .'/webform-results/analysis'),
      l(t('Table'), 'node/'. $node->nid .'/webform-results/table'),
      l(t('Download'), 'node/'. $node->nid .'/webform-results/download'),
      node_access('update', $node) ? l(t('Edit'), 'node/'. $node->nid .'/edit') : '',
      user_access('clear webform results') ? l(t('Clear'), 'node/'. $node->nid .'/webform-results/clear') : '',
    );
  }

  return theme('table', $header, $rows);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Given a form_key and a list of form_key parents, determine the cid.
 *
 * @param $node
 *   A fully loaded node object.
 * @param $form_key
 *   The form key for which we're finding a cid.
 * @param $parent
 *   The cid of the parent component.
 */
function webform_get_cid(&$node, $form_key, $pid) {
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['form_key'] == $form_key && $component['pid'] == $pid) {
      return $cid;
    }
  }
}

/**
 * Retreive a Drupal variable with the appropriate default value.
 */
function webform_variable_get($variable) {
  switch ($variable) {
<<<<<<< HEAD
    case 'webform_allowed_tags':
      $result = variable_get('webform_allowed_tags', array('a', 'em', 'strong', 'code', 'img'));
      break;
=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    case 'webform_default_from_name':
      $result = variable_get('webform_default_from_name', variable_get('site_name', ''));
      break;
    case 'webform_default_from_address':
      $result = variable_get('webform_default_from_address', variable_get('site_mail', ini_get('sendmail_from')));
      break;
    case 'webform_default_subject':
      $result = variable_get('webform_default_subject', t('Form submission from: %title'));
      break;
<<<<<<< HEAD
    case 'webform_node_types':
      $result = variable_get('webform_node_types', array('webform'));
      break;
    case 'webform_node_types_primary':
      $result = variable_get('webform_node_types_primary', array('webform'));
      break;
=======
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }
  return $result;
}

<<<<<<< HEAD
function theme_webform_token_help($groups = array()) {
  $groups = empty($groups) ? array('basic', 'node', 'special') : $groups;

  static $tokens = array();

  if (empty($tokens)) {
    $tokens['basic'] = array(
      'title' => t('Basic tokens'),
      'tokens' => array(
        '%username' => t('The name of the user if logged in. Blank for anonymous users.'),
        '%useremail' => t('The e-mail address of the user if logged in. Blank for anonymous users.'),
        '%ip_address' => t('The IP address of the user.'),
        '%site' => t('The name of the site (i.e. %site_name)', array('%site_name' => variable_get('site_name', ''))),
        '%date' => t('The current date, formatted according to the site settings.'),
      ),
    );

    $tokens['node'] = array(
      'title' => t('Node tokens'),
      'tokens' => array(
        '%nid' => t('The node ID.'),
        '%title' => t('The node title.'),
      ),
    );

    $tokens['special'] = array(
      'title' => t('Special tokens'),
      'tokens' => array(
        '%profile[' . t('key') . ']' => t('Any user profile field or value, such as %profile[name] or %profile[profile_first_name]'),
        '%get[' . t('key') . ']' => t('Tokens may be populated from the URL by creating URLs of the form http://example.com/my-form?foo=bar. Using the token %get[foo] would print "bar".'),
        '%post[' . t('key') . ']' => t('Tokens may also be populated from POST values that are submitted by forms.'),
      ),
      'description' => t('In addition to %get and %post, the following super tokens may be used, though only with logged-in users: %server, %cookie, and %request. For example %server[HTTP_USER_AGENT] or %session[id].'),
    );

    $tokens['email'] = array(
      'title' => t('E-mail tokens'),
      'tokens' => array(
        '%email_values' => t('All included components in a hierarchical structure.'),
        '%email[' . t('key') . '] ' => t('A formatted value and field label. Elements may be accessed such as <em>%email[fieldset_a][key_b]</em>. Do not include quotes.'),
        '%submission_url' => t('The URL for viewing the completed submission.'),
      ),
    );

    $tokens['submission'] = array(
      'title' => t('Submission tokens'),
      'tokens' => array(
        '%sid' => t('The unique submission ID.'),
        '%value[key]' => t('A value without additional formatting. Elements may be accessed such as <em>%value[fieldset_a][key_b]</em>. Do not include quotes.'),
      ),
    );
  }

  $output = '';
  $output .= '<p>' . t('You may use special tokens in this field that will be replaced with dynamic values.') . '</p>';

  foreach ($tokens as $group_name => $group) {
    if (!is_array($groups) || in_array($group_name, $groups)) {
      $items = array();
      foreach ($group['tokens'] as $token => $token_description) {
        $items[] = $token . ' - ' . $token_description;
      }
      $output .= theme('item_list', $items, $group['title']);
      $output .= isset($group['description']) ? '<p>' . $group['description']  . '</p>' : '';
    }
=======
function theme_webform_token_help() {
  $tokens = array(
    '%username',
    '%useremail',
    '%session['. t('key') .']',
    '%post['. t('key') .']',
    '%request['. t('key') .']',
    '%cookie['. t('key') .']',
    '%server['. t('key') .']',
  );
  if (module_exists('profile')) {
    $tokens[] = '%profile['. t('key') .']';
  }

  $anonymous_tokens = array(
    '%site',
    '%date',
    '%get['. t('key') .']',
  );

  $output = '';
  $output .= t('You may use special tokens in this field that will be replaced with dynamic values.');
  $output .= theme('item_list', $anonymous_tokens, t('all users:'));
  $output .= theme('item_list', $tokens, t('authorized users only:'));
  $output .= t('You can use %server[key] to add any of the special PHP <a href="http://www.php.net/reserved.variables#reserved.variables.server">$_SERVER</a> variables, %session[key] to add any of the special PHP <a href="http://www.php.net/reserved.variables#reserved.variables.session">$_SESSION</a> variables and %get[key] to create prefilled forms from the <a href="http://www.php.net/reserved.variables#reserved.variables.get">URL</a>. %cookie, %request and %post also work with their respective PHP variables. For example %server[HTTP_USER_AGENT], %session[id], or %get[q].');
  if (module_exists('profile')) {
    $output .= ' '. t('If you are using the profiles module, you can also access all profile data using the syntax %profile[form_name]. If you for example have a profile value named profile_city, add the variable %profile[profile_city].');
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  }

  $fieldset = array(
    '#title' => t('Token values'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
<<<<<<< HEAD
    '#children' => '<div>' . $output . '</div>',
=======
    '#children' => '<div>'. $output .'</div>',
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
  );
  return theme('fieldset', $fieldset);
}

function _webform_safe_name($name) {
  $new = trim($name);

  // If transliteration is available, use it to convert names to ASCII.
  if (function_exists('transliteration_get')) {
    $new = transliteration_get($new, '');
<<<<<<< HEAD
    $new = str_replace(array(' ', '-', '/'), array('_', '_', '_'), $new);
  }
  else {
    $new = str_replace(
      array(' ', '-', '/', '€', 'ƒ', 'Š', 'Ž', 'š', 'ž', 'Ÿ', '¢', '¥', 'µ', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'à', 'á', 'â', 'ã', 'ä', 'å', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Œ',  'œ',  'Æ',  'Ð',  'Þ',  'ß',  'æ',  'ð',  'þ'),
      array('_', '_', '_', 'E', 'f', 'S', 'Z', 's', 'z', 'Y', 'c', 'Y', 'u', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th'),
=======
    $new = str_replace(array(' ', '-'), array('_', '_'), $new);
  }
  else {
    $new = str_replace(
      array(' ', '-', '€', 'ƒ', 'Š', 'Ž', 'š', 'ž', 'Ÿ', '¢', '¥', 'µ', 'À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'à', 'á', 'â', 'ã', 'ä', 'å', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Œ',  'œ',  'Æ',  'Ð',  'Þ',  'ß',  'æ',  'ð',  'þ'),
      array('_', '_', 'E', 'f', 'S', 'Z', 's', 'z', 'Y', 'c', 'Y', 'u', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 'a', 'a', 'a', 'a', 'a', 'a', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'OE', 'oe', 'AE', 'DH', 'TH', 'ss', 'ae', 'dh', 'th'),
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
      $new);
  }

  $new = drupal_strtolower($new);
  $new = preg_replace('/[^a-z0-9_]/', '', $new);
  return $new;
}

/**
<<<<<<< HEAD
 * Given an email address and a name, format an e-mail address.
 *
 * @param $address
 *   The e-mail address.
 * @param $name
 *   The name to be used in the formatted address.
 * @param $node
 *   The webform node if replacements will be done.
 * @param $submission
 *   The webform submission values if replacements will be done.
 * @param $encode
 *   Encode the text for use in an e-mail.
 * @param $single
 *   Force a single value to be returned, even if a component expands to
 *   multiple addresses. This is useful to ensure a single e-mail will be
 *   returned for the "From" address.
 * @param $format
 *   The e-mail format, defaults to the site-wide setting. May be either "short"
 *   or "long".
 */
function webform_format_email_address($address, $name, $node = NULL, $submission = NULL, $encode = TRUE, $single = TRUE, $format = NULL) {
  if (!isset($format)) {
    $format = variable_get('webform_email_address_format', 'long');
  }

  if ($name == 'default') {
    $name = webform_variable_get('webform_default_from_name');
  }
  elseif (is_numeric($name) && isset($node->webform['components'][$name])) {
    if (isset($submission->data[$name]['value'])) {
      $name = $submission->data[$name]['value'];
    }
    else {
      $name = t('Value of !component', array('!component' => $node->webform['components'][$name]['name']));
    }
  }

  if ($address == 'default') {
    $address = webform_variable_get('webform_default_from_address');
  }
  elseif (is_numeric($address) && isset($node->webform['components'][$address])) {
    if (isset($submission->data[$address]['value'])) {
      $values = $submission->data[$address]['value'];;
      $address = array();
      foreach ($values as $value) {
        $address = array_merge($address, explode(',', $value));
      }
    }
    else {
      $address = t('Value of "!component"', array('!component' => $node->webform['components'][$address]['name']));
    }
  }

  // Convert arrays into a single value for From values.
  if ($single) {
    $address = is_array($address) ? reset($address) : $address;
    $name = is_array($name) ? reset($name) : $name;
  }

  // Address may be an array if a component value was used on checkboxes.
  if (is_array($address)) {
    foreach ($address as $key => $individual_address) {
      $address[$key] = _webform_filter_values($individual_address, $node, $submission, NULL, FALSE, TRUE);
    }
  }
  else {
    $address = _webform_filter_values($address, $node, $submission, NULL, FALSE, TRUE);
  }

  if ($format == 'long' && !empty($name)) {
    $name = _webform_filter_values($name, $node, $submission, NULL, FALSE, TRUE);
    if ($encode) {
      $name = mime_header_encode($name);
    }
    return '"' . $name . '" <' . $address . '>';
  }
  else {
    return $address;
  }
}

/**
 * Given an email subject, format it with any needed replacements.
 */
function webform_format_email_subject($subject, $node = NULL, $submission = NULL) {
  if ($subject == 'default') {
    $subject = webform_variable_get('webform_default_subject');
  }
  elseif (is_numeric($subject) && isset($node->webform['components'][$subject])) {
    $component = $node->webform['components'][$subject];
    if (isset($submission->data[$subject]['value'])) {
      $display_function = '_webform_display_' . $component['type'];
      $value = $submission->data[$subject]['value'];

      // Convert the value to a clean text representation if possible.
      if (function_exists($display_function)) {
        $display = $display_function($component, $value, 'text');
        $display['#theme_wrappers'] = array();
        $subject = str_replace("\n", ' ', drupal_render($display));
      }
      else {
        $subject = $value;
      }
    }
    else {
      $subject = t('Value of "!component"', array('!component' => $component['name']));
    }
  }

  // Convert arrays to strings (may happen if checkboxes are used as the value).
  if (is_array($subject)) {
    $subject = reset($subject);
  }

  return _webform_filter_values($subject, $node, $submission, NULL, FALSE, TRUE);
=======
 * Given a set of components, determine which one are appropriate for a
 * particular use, such as an email address or subject.
 *
 * @param $components
 *   An array of components.
 * @param $type
 *   Either 'email' or 'string' (for use as subject or from value).
 *
 */
function _webform_component_options($components, $type) {
  $acceptable_types = $type == 'email' ? array('email', 'select', 'hidden') : array('textfield', 'select', 'hidden');
  $options = array();
  foreach ((array)$components as $cid => $component) {
    if (in_array($component['type'], $acceptable_types)) {
      $options[$cid] = $component['name'];
    }
  }
  return $options;
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}

/**
 * Convert an array of components into a tree
 */
function _webform_components_tree_build($src, &$tree, $parent, &$page_count) {
  foreach ($src as $cid => $component) {
    if ($component['pid'] == $parent) {
      _webform_components_tree_build($src, $component, $cid, $page_count);
<<<<<<< HEAD
      if ($component['type'] == 'pagebreak') {
        $page_count++;
      }
      $tree['children'][$cid] = $component;
      $tree['children'][$cid]['page_num'] = $page_count;
=======
      $tree['children'][$cid] = $component;
      $tree['children'][$cid]['page_num'] = $page_count;
      if ($component['type'] == 'pagebreak') {
        $page_count++;
      }
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
    }
  }
  return $tree;
}

/**
 * Flatten a component tree into a flat list.
 */
function _webform_components_tree_flatten($tree) {
  $components = array();
  foreach ($tree as $cid => $component) {
    if (isset($component['children'])) {
      unset($component['children']);
      $components[$cid] = $component;
      // array_merge() can't be used here because the keys are numeric.
      $children = _webform_components_tree_flatten($tree[$cid]['children']);
      foreach ($children as $ccid => $ccomponent) {
        $components[$ccid] = $ccomponent;
      }
    }
    else {
      $components[$cid] = $component;
    }
  }
  return $components;
}

/**
 * Helper for the uasort in webform_tree_sort()
 */
function _webform_components_sort($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return strcasecmp($a['name'], $b['name']);
  }
  return ($a['weight'] < $b['weight']) ? -1 : 1;
}

/**
 * Sort each level of a component tree by weight and name
 */
function _webform_components_tree_sort($tree) {
  if (isset($tree['children']) && is_array($tree['children'])) {
    $children = array();
    uasort($tree['children'], '_webform_components_sort');
    foreach ($tree['children'] as $cid => $component) {
      $children[$cid] = _webform_components_tree_sort($component);
    }
    $tree['children'] = $children;
  }
  return $tree;
}

/**
<<<<<<< HEAD
 * Get a list of all available component definitions.
 */
function webform_components($include_disabled = FALSE, $reset = FALSE) {
  static $components, $disabled;

  if (!isset($components) || $reset) {
    $components = array();
    $disabled = array_flip(variable_get('webform_disabled_components', array()));
    foreach (module_implements('webform_component_info') as $module) {
      $module_components = module_invoke($module, 'webform_component_info');
      foreach ($module_components as $type => $info) {
        $module_components[$type]['module'] = $module;
        $module_components[$type]['enabled'] = !array_key_exists($type, $disabled);
      }
      $components += $module_components;
    }
    drupal_alter('webform_component_info', $components);
    ksort($components);
  }

  return $include_disabled ? $components : array_diff_key($components, $disabled);
}

/**
 * Build a list of components suitable for use as select list options.
 */
function webform_component_options($include_disabled = FALSE) {
  $component_info = webform_components($include_disabled);
  $options = array();
  foreach ($component_info as $type => $info) {
    $options[$type] = $info['label'];
  }
  return $options;
}

/**
 * Load a component file into memory.
 *
 * @param $component_type
 *   The string machine name of a component.
 */
function webform_component_include($component_type) {
  static $included = array();

  // No need to load components that have already been added once.
  if (!isset($included[$component_type])) {
    $components = webform_components(TRUE);
    $included[$component_type] = TRUE;

    if (($info = $components[$component_type]) && isset($info['file'])) {
      $pathinfo = pathinfo($info['file']);
      $basename = basename($pathinfo['basename'], '.' . $pathinfo['extension']);
      $path = (!empty($pathinfo['dirname']) ? $pathinfo['dirname'] . '/' : '') . $basename;
      module_load_include($pathinfo['extension'], $info['module'], $path);
    }
  }
}

/**
 * Invoke a component callback.
 *
 * @param $type
 *   The component type as a string.
 * @param $callback
 *   The callback to execute.
 * @param ...
 *   Any additional parameters required by the $callback.
 */
function webform_component_invoke($type, $callback) {
  $args = func_get_args();
  $type = array_shift($args);
  $callback = array_shift($args);
  $function = '_webform_' . $callback . '_' . $type;
  webform_component_include($type);
  if (function_exists($function)) {
    return call_user_func_array($function, $args);
  }
}

/**
 * Check if a component implements a particular hook.
 *
 * @param $type
 *   The component type as a string.
 * @param $callback
 *   The callback to check.
 */
function webform_component_implements($type, $callback) {
  $function = '_webform_' . $callback . '_' . $type;
  webform_component_include($type);
  return function_exists($function);
}

/**
 * Disable the Drupal page cache.
 */
function webform_disable_page_cache() {
  // PressFlow and Drupal 7 method.
  if (function_exists('drupal_page_is_cacheable')) {
    drupal_page_is_cacheable(FALSE);
  }
  // Drupal 6 hack to disable page cache.
  else {
    $GLOBALS['conf']['cache'] = CACHE_DISABLED;
  }
}

/**
 * Set the necessary breadcrumb for the page we are on.
 */
function webform_set_breadcrumb($node, $submission = NULL) {
  $breadcrumb = drupal_get_breadcrumb();

  if (isset($node)) {
    $webform_breadcrumb = array();
    $webform_breadcrumb[] = array_shift($breadcrumb);
    $webform_breadcrumb[] = l($node->title, 'node/' . $node->nid);
    if (isset($submission)) {
      $last_link = array_shift($breadcrumb);
      $webform_breadcrumb[] = l(t('Submissions'), 'node/' . $node->nid . '/submissions');
      if (isset($last_link)) {
        $webform_breadcrumb[] = $last_link;
      }
    }
    $breadcrumb = $webform_breadcrumb;
  }

  drupal_set_breadcrumb($breadcrumb);
}

/**
 * Convert an ISO 8601 date or time into an array.
 *
 * This converts full format dates or times. Either a date or time may be
 * provided, in which case only those portions will be returned. Dashes and
 * colons must be used, never implied.
 *
 * Formats:
 * Dates: YYYY-MM-DD
 * Times: HH:MM:SS
 * Datetimes: YYYY-MM-DDTHH:MM:SS
 *
 * @param $string
 *   An ISO 8601 date, time, or datetime.
 * @param $type
 *   If wanting only specific fields back, specify either "date" or "time".
 *   Leaving empty will return an array with both date and time keys, even if
 *   some are empty. Returns an array with the following keys:
 *   - year
 *   - month
 *   - day
 *   - hour (in 24hr notation)
 *   - minute
 *   - second
 */
function webform_date_array($string, $type = NULL) {
  $pattern = '/((\d{4}?)-(\d{2}?)-(\d{2}?))?(T?(\d{2}?):(\d{2}?):(\d{2}?))?/';
  $matches = array();
  preg_match($pattern, $string, $matches);
  $matches += array_fill(0, 9, '');

  $return = array();

  // Check for a date string.
  if ($type == 'date' || !isset($type)) {
    $return['year'] = $matches[2] !== '' ? (int) $matches[2] : '';
    $return['month'] = $matches[3] !== '' ? (int) $matches[3] : '';
    $return['day'] = $matches[4] !== '' ? (int) $matches[4] : '';
  }

  // Check for a time string.
  if ($type == 'time' || !isset($type)) {
    $return['hour'] = $matches[6] !== '' ? (int) $matches[6] : '';
    $return['minute'] = $matches[7] !== '' ? (int) $matches[7] : '';
    $return['second'] = $matches[8] !== '' ? (int) $matches[8] : '';
  }

  return $return;
}

/**
 * Convert an array of a date or time into an ISO 8601 compatible string.
 *
 * @param $array
 *   The array to convert to a date or time string.
 * @param $type
 *   If wanting a specific string format back specify either "date" or "time".
 *   Otherwise a full ISO 8601 date and time string will be returned.
 */
function webform_date_string($array, $type = NULL) {
  $string = '';

  if ($type == 'date' || !isset($type)) {
    $string .= empty($array['year']) ? '0000' : sprintf('%04d', $array['year']);
    $string .= '-';
    $string .= empty($array['month']) ? '00' : sprintf('%02d', $array['month']);
    $string .= '-';
    $string .= empty($array['day']) ? '00' : sprintf('%02d', $array['day']);
  }

  if (!isset($type)) {
    $string .= 'T';
  }

  if ($type == 'time' || !isset($type)) {
    $string .= empty($array['hour']) ? '00' :  sprintf('%02d', $array['hour']);
    $string .= ':';
    $string .= empty($array['minute']) ? '00' :  sprintf('%02d', $array['minute']);
    $string .= ':';
    $string .= empty($array['second']) ? '00' :  sprintf('%02d', $array['second']);
  }

  return $string;
}

/**
 * Get a date format according to the site settings.
 *
 * @param $size
 *   A choice of 'short', 'medium', or 'long' date formats.
 */
function webform_date_format($size = 'medium') {
    // Format date according to site's given format.
    $format = variable_get('date_format_' . $size, 'D, m/d/Y - H:i');
    $time = 'aABgGhHisueIOPTZ';
    $day_of_week = 'Dlw';
    $special = ',-: ';
    $date_format = trim($format, $time . $day_of_week . $special);

    // Ensure that a day, month, and year value are present. Use a default
    // format if all the values are not found.
    if (!preg_match('/[dj]/', $date_format) || !preg_match('/[FmMn]/', $date_format) || !preg_match('/[oYy]/', $date_format)) {
      $date_format = 'm/d/Y';
    }

    return $date_format;
}

/**
 * Return a date in the desired format taking into consideration user timezones.
 */
function webform_strtodate($format, $string, $timezone_name = NULL) {
  // Adjust the time based on the user or site timezone.
  // The "timezone_name" variable is provided by DateAPI in Drupal 6.
  if (variable_get('configurable_timezones', 1) && $timezone_name == 'user') {
    $timezone_name = isset($GLOBALS['user']->timezone_name) ? $GLOBALS['user']->timezone_name : NULL;
  }
  elseif (empty($timezone_name) || $timezone_name == 'user') {
    $timezone_name = variable_get('date_default_timezone_name', NULL);
  }

  if (!empty($timezone_name) && class_exists('DateTimeZone')) {
    // Suppress errors if encountered during string conversion. Exceptions are
    // only supported for DateTime in PHP 5.3 and higher.
    try {
      @$timezone = new DateTimeZone($timezone_name);
      @$datetime = new DateTime($string, $timezone);
      return @$datetime->format($format);
    }
    catch (Exception $e) {
      return '';
    }
  }
  else {
    return date($format, strtotime($string));
  }
}

/**
 * Get a timestamp in GMT time, ensuring timezone accuracy.
 */
function webform_strtotime($date) {
  $current_tz = date_default_timezone_get();
  date_default_timezone_set('UTC');
  $timestamp = strtotime($date);
  date_default_timezone_set($current_tz);
  return $timestamp;
}

/**
 * Wrapper function for tt() if i18nstrings enabled.
 */
function webform_tt($name, $string, $langcode = NULL, $update = FALSE) {
  if (function_exists('tt')) {
    return tt($name, $string, $langcode, $update);
  }
  else {
    return $string;
  }
}

/**
 * Check if any available HTML mail handlers are available for Webform to use.
 */
function webform_email_html_capable() {
  // The D7 version of this function is much more capable. This function exists
  // as a wrapper for consistency in the rest of Webform.
  return module_exists('mimemail');
}

/**
 * Implements hook_views_api().
 */
function webform_views_api() {
  return array(
    'api' => 2.0,
    'path' => drupal_get_path('module', 'webform') . '/views',
  );
}

/**
 * Implements hook_content_extra_fields().
 */
function webform_content_extra_fields($type_name) {
  $extra = array();
  if (in_array($type_name, webform_variable_get('webform_node_types'))) {
    $extra['webform'] = array(
      'label' => t('Webform'),
      'description' => t('Webform client form.'),
      'weight' => 10,
    );
  }
  return $extra;
}

/**
 * Implements hook_mollom_form_list().
 */
function webform_mollom_form_list() {
  $forms = array();
  $webform_types = webform_variable_get('webform_node_types');
  if (empty($webform_types)) {
    return $forms;
  }

  $placeholders = db_placeholders($webform_types, 'varchar');
  $result = db_query(db_rewrite_sql("SELECT n.nid, n.title FROM {node} n WHERE n.type IN ($placeholders)", 'n', 'nid', $webform_types), $webform_types);

  while ($node = db_fetch_object($result)) {
    $form_id = 'webform_client_form_' . $node->nid;
    $forms[$form_id] = array(
      'title' => t('@name form', array('@name' => $node->title)),
      'entity' => 'webform',
      'delete form' => 'webform_submission_delete_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_mollom_form_info().
 */
function webform_mollom_form_info($form_id) {
  module_load_include('inc', 'webform', 'includes/webform.components');

  $nid = drupal_substr($form_id, 20);
  $node = node_load($nid);
  $form_info = array(
    'title' => t('@name form', array('@name' => $node->title)),
    'mode' => MOLLOM_MODE_ANALYSIS,
    'bypass access' => array('edit all webform submissions', 'edit any webform content'),
    'entity' => 'webform',
    'elements' => array(),
    'mapping' => array(
      'post_id' => 'details][sid',
      'author_id' => 'details][uid',
    ),
  );
  // Add components as elements.
  // These components can be enabled for textual analysis (when not using a
  // CAPTCHA-only protection) in Mollom's form configuration.
  foreach ($node->webform['components'] as $cid => $component) {
    if (webform_component_feature($component['type'], 'spam_analysis')) {
      $parents = implode('][', webform_component_parent_keys($node, $component));
      $form_info['elements']['submitted][' . $parents] = check_plain(t($component['name']));
    }
  }
  // Assign field mappings based on webform configuration.
  // Since multiple emails can be configured, we iterate over all and take
  // over the assigned component for the field mapping in any email, unless
  // we already assigned one. We are not interested in administratively
  // configured static strings, only user-submitted values.
  foreach ($node->webform['emails'] as $email) {
    // Subject (post_title).
    if (!isset($form_info['mapping']['post_title'])) {
      $cid = $email['subject'];
      if (is_numeric($cid)) {
        $parents = implode('][', webform_component_parent_keys($node, $node->webform['components'][$cid]));
        $form_info['mapping']['post_title'] = 'submitted][' . $parents;
      }
    }
    // From name (author_name).
    if (!isset($form_info['mapping']['author_name'])) {
      $cid = $email['from_name'];
      if (is_numeric($cid)) {
        $parents = implode('][', webform_component_parent_keys($node, $node->webform['components'][$cid]));
        $form_info['mapping']['author_name'] = 'submitted][' . $parents;
      }
    }
    // From address (author_mail).
    if (!isset($form_info['mapping']['author_mail'])) {
      $cid = $email['from_address'];
      if (is_numeric($cid)) {
        $parents = implode('][', webform_component_parent_keys($node, $node->webform['components'][$cid]));
        $form_info['mapping']['author_mail'] = 'submitted][' . $parents;
=======
 * Load all necessary component.inc files into memory.
 */
function webform_load_components($return_all = FALSE, $reset = FALSE) {
  static $component_list, $enabled_list;

  if (!isset($component_list) || $reset) {
    $component_list = array();
    $enabled_list = array();
    $path = drupal_get_path('module', 'webform') .'/components';
    $files = file_scan_directory($path, '^.*\.inc$');
    foreach ($files as $filename => $file) {
      $enabled = variable_get('webform_enable_'. $file->name, 1);
      if ($return_all || $enabled) {
        module_load_include('inc', 'webform', 'components/'. $file->name);
        $component_list[$file->name] = t($file->name);
      }
      if ($enabled) {
        $enabled_list[$file->name] = t($file->name);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
      }
    }
  }

<<<<<<< HEAD
  return $form_info;
=======
  // Ensure only wanted components are returned, even all are loaded.
  return $return_all ? $component_list : array_intersect_assoc($component_list, $enabled_list);
>>>>>>> 11c42aacd2cce208210c8578843c892e1112f1a8
}
