<?php

function videos_nodeapi(&$node, $op, $a3 = NULL, $page = NULL) {
  if ($op == 'view' && $page && $node->type == 'videos') {
    $vid_channel = 1;
    $vid_artist = 2;
    
    foreach ((array)$node->taxonomy as $term) {
      if ($term->vid == $vid_channel) {
        context_set('bridge', 'channel tid', $term->tid);
        break;
      }
    }
  }
}

// @@TODO: add "Content: Video Image Thumbnail" and "Content: Video URL to original video (plain text url)" (in that order) to exported view code
function videos_get_ajax_gallery_enabled_views() {
  static $enabled_views = NULL;
  if (!$enabled_views) {
    $enabled_views = array();
    foreach ((array)variable_get('videos_ajax_gallery_enabled_displays', array()) as $enabled) {
      list($view_id, $display) = explode(':', $enabled);
      if (!is_array($enabled_view[$view_id])) {
        $enabled_view[$view_id] = array();
      }
      $enabled_views[$view_id][] = $display;
    }
  }
  return $enabled_views;
}

function videos_get_page_title_enabled_views() {
  static $enabled_views = NULL;
  if (!$enabled_views) {
    $enabled_views = array();
    foreach ((array)variable_get('videos_page_title_enabled_displays', array()) as $enabled) {
      list($view_id, $display) = explode(':', $enabled);
      if (!is_array($enabled_view[$view_id])) {
        $enabled_view[$view_id] = array();
      }
      $enabled_views[$view_id][] = $display;
    }
  }
  return $enabled_views;
}

function videos_views_pre_view(&$view, &$display_id, &$args) {
  static $global_js_already_added = FALSE;

  $ajax_gallery_enabled_views = videos_get_ajax_gallery_enabled_views();
  if (array_key_exists($view->name, $ajax_gallery_enabled_views) && in_array($display_id, $ajax_gallery_enabled_views[$view->name])) {
    if (!$global_js_already_added) {
      drupal_add_js(drupal_get_path('module', 'videos') . '/js/ajax-video-gallery.js');
      drupal_add_js('misc/jquery.form.js');
      $global_js_already_added = TRUE;
    }

    $view_display = "{$view->name}:{$display_id}";

    $replacement_view_display = variable_get("rd_videos_ajax:$view_display:replacement_view_display", array());
    list($replacementView, $replacementDisplay) = explode(':', $replacement_view_display);

    $settings = array(
      'insertVideoDiv'=> variable_get("rd_videos_ajax:$view_display:insert_video_div", TRUE),
      'wholeRowClickable' => variable_get("rd_videos_ajax:$view_display:whole_row_clickable", TRUE),
      'containerSelectors' => variable_get("rd_videos_ajax:$view_display:container_selectors", ".view-{$view->name}.view-display-id-{$display_id} .large-video-container"),
      'clickableElementSelectors' => variable_get("rd_videos_ajax:$view_display:clickable_element_selectors", '.views-field-field-video-embed-embed'),
      'videoNidFieldSelector' => variable_get("rd_videos_ajax:$view_display:video_nid_field_selector", '.views-field-nid'),
      'replacementViewName' => $replacementView,
      'replacementViewDisplayName' => $replacementDisplay,
      'taxonomyFieldSelector' => variable_get("rd_videos_ajax:$view_display:taxonomy_field_selector", ''),
    );

    $settings = array(
      $view->name => array(
        $display_id => $settings,
      ),
    );

    drupal_add_js(array('rootdownVideos' => $settings), 'setting');
  }
  
  $page_title_enabled_views = videos_get_page_title_enabled_views();
  if (array_key_exists($view->name, $page_title_enabled_views) && in_array($display_id, $page_title_enabled_views[$view->name])) {
    $title = &ctools_static('bridge : allow page title', NULL);
    $title = TRUE;
  }
}

function videos_menu() {
  $items = array();
  $items['admin/settings/feature-video'] = array(
    'title' => 'Root Down: Video Feature',
    'description' => '.', // @@TODO desc
    'page callback' => 'drupal_get_form',
    'page arguments' => array('videos_admin_form_ajax'),
    'access arguments' => array('administer root down video feature'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/feature-video/ajax-gallery'] = array(
    'title' => 'Root Down: Video Feature / AJAX Gallery settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/settings/feature-video/page-titles'] = array(
    'title' => 'Root Down: Video Feature / Page title settings',
    'description' => '.', // @@TODO desc
    'page callback' => 'drupal_get_form',
    'page arguments' => array('videos_admin_form_page_titles'),
    'access arguments' => array('administer root down video feature'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/feature-video/taxonomy'] = array(
    'title' => 'Root Down: Video Feature / Taxonomy settings',
    'description' => '.', // @@TODO desc
    'page callback' => 'drupal_get_form',
    'page arguments' => array('videos_admin_form_taxonomy'),
    'access arguments' => array('administer root down video feature'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

function videos_menu_alter(&$items) {
  unset($items['taxonomy/term/%']);
  $items['taxonomy/term/%video_tid'] = array(
/*    'page callback' => 'views_page',
    'page arguments' => array('videos', 'page_5'),
    // Default access check (per display)
    'access callback' => 'views_access',
    'access arguments' => TRUE,
    // Identify URL embedded arguments and correlate them to a handler
    'load arguments'  => array('videos', 'page_5', '%index')
*/
    'page callback' => 'videos_taxonomy_view_handler',
    'page arguments' => array(2),
    // Default access check (per display)
    'access callback' => TRUE,
  );
}

function video_tid_load($tid) {
  return $tid;
}

function videos_taxonomy_view_handler($tid) {
  $term = taxonomy_get_term($tid);
  if (variable_get("rd_videos_tax:voc_{$term->vid}_enabled", FALSE) && ($replacement = variable_get("rd_videos_tax:{$term->vid}:replacement_view", NULL))) {
    list($view_name, $display_id) = explode(':', $replacement);
    $arg = views_arg_load($tid, $view_name, $display_id, 1); // this runs the views argument validation for us
    $view = views_get_view($view_name);
    return $view->execute_display($display_id, array($arg));
    //return views_embed_view($view_name, $display_id, $arg);
  }
  else {
    require_once drupal_get_path('module', 'taxonomy') . '/taxonomy.pages.inc';
    return taxonomy_term_page($tid);
  }
}

function videos_get_view_options($display_type = NULL) {
  $views_options = array();
  $views = views_get_all_views();
  foreach ($views as $view) {
    foreach ($view->display as $id => $display) {
      if ($display_type && strpos($id, $display_type) !== 0) {
        continue;
      }
      $views_options["{$view->name}:{$id}"] = "[{$view->name} / {$id}] {$display->display_title}";
    }
  }
  return $views_options;
}

function videos_admin_form_ajax() {
  $form = array();

  $views_options = videos_get_view_options();

  $form['videos_ajax_gallery_enabled_displays'] = array(
    '#type' => 'select',
    '#title' => 'Enable AJAX gallery on the following Views/displays',
    '#description' => 'If you select a new set of displays, you must click Save in order to see the configuration options for each.',
    '#multiple' => TRUE,
    '#options' => $views_options,
    '#default_value' => variable_get('videos_ajax_gallery_enabled_displays', array()),
  );

  foreach ((array)variable_get('videos_ajax_gallery_enabled_displays', array()) as $view_display) {
    list($view, $display) = explode(':', $view_display);
    if ($view && $display) {
      if (!isset($form['view_' . $view])) {
        $form['view_' . $view] = array(
          '#type' => 'fieldset',
          '#title' => "View {$view}",
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        );
      }

      $form['view_' . $view][$display] = array(
        '#type' => 'fieldset',
        '#title' => "Display {$display}",
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );

      $form['view_' . $view][$display]["rd_videos_ajax:$view_display:insert_video_div"] = array(
        '#type' => 'checkbox',
        '#title' => 'Automatically insert ".large-video-container" DIV at top of view',
        '#default_value' => variable_get("rd_videos_ajax:$view_display:insert_video_div", TRUE),
      );

      $form['view_' . $view][$display]["rd_videos_ajax:$view_display:whole_row_clickable"] = array(
        '#type' => 'checkbox',
        '#title' => 'Should the whole Views row be clickable?',
        '#description' => 'If not, you will need to specify selectors for the elements that should trigger the AJAX replacement when clicked.',
        '#default_value' => variable_get("rd_videos_ajax:$view_display:whole_row_clickable", TRUE),
      );

      $form['view_' . $view][$display]["rd_videos_ajax:$view_display:clickable_element_selectors"] = array(
        '#type' => 'textfield',
        '#title' => 'Selectors for clickable elements',
        '#description' => 'jQuery-ish selector(s) for the element(s) that should trigger the AJAX replacement when clicked.',
        '#default_value' => variable_get("rd_videos_ajax:$view_display:clickable_element_selectors", '.views-field-field-video-embed-embed'),
        '#required' => TRUE,
      );

      $form['view_' . $view][$display]["rd_videos_ajax:$view_display:container_selectors"] = array(
        '#type' => 'textfield',
        '#title' => 'Selectors for video container',
        '#description' => "jQuery-ish selector(s) for the element(s) on the page where the video should appear when a thumbnail is clicked (defaults to .view-{$view}.view-display-id-{$display} .large-video-container).",
        '#default_value' => variable_get("rd_videos_ajax:$view_display:container_selectors", ".view-{$view}.view-display-id-{$display} .large-video-container"),
        '#required' => TRUE,
      );

      $form['view_' . $view][$display]["rd_videos_ajax:$view_display:video_nid_field_selector"] = array(
        '#type' => 'textfield',
        '#title' => 'Selector for plaintext video node ID field',
        '#default_value' => variable_get("rd_videos_ajax:$view_display:video_nid_field_selector", '.views-field-nid'),
        '#required' => TRUE,
      );
      
      $form['view_' . $view][$display]['taxonomy']["rd_videos_ajax:$view_display:taxonomy_field_selector"] = array(
        '#type' => 'textfield',
        '#title' => 'Selector for plaintext video taxonomy term field',
        '#description' => 'Leave this field blank if no term argument should be passed to the view.',
        '#default_value' => variable_get("rd_videos_ajax:$view_display:taxonomy_field_selector", ''),
      );

      $form['view_' . $view][$display]["rd_videos_ajax:$view_display:replacement_view_display"] = array(
        '#type' => 'select',
        '#title' => 'View that will be used to generate AJAXed replacement content',
        '#description' => 'Choose a view that only displays a single node/video at a time.',
        '#options' => $views_options,
        '#default_value' => variable_get("rd_videos_ajax:$view_display:replacement_view_display", array()),
      );
    }
  }
  return system_settings_form($form);
}

function videos_admin_form_page_titles() {
  $views_options = videos_get_view_options();
  
  $form = array();
  $form['videos_page_title_enabled_displays'] = array(
    '#type' => 'select',
    '#title' => 'Allow the following Views/displays to display a page title (otherwise, no title is shown)',
    '#multiple' => TRUE,
    '#options' => $views_options,
    '#default_value' => variable_get('videos_page_title_enabled_displays', array()),
  );
  return system_settings_form($form);
}

function videos_admin_form_taxonomy() {
  
  $form = array('#prefix' => '<div class="description">If you select a new set of overridden terms, you must click Save in order to see the configuration options for each.</div>');
  
  $vocs = taxonomy_get_vocabularies();
  $already_enabled = array();
  foreach ($vocs as $voc) {
    $already_enabled[$voc->vid] = variable_get("rd_videos_tax:voc_{$voc->vid}_enabled", FALSE);
    $form["rd_videos_tax:voc_{$voc->vid}_enabled"] = array(
      '#type' => 'checkbox',
      '#title' => "Override terms from the {$voc->name} vocabulary with custom views",
      '#default_value' => $already_enabled[$voc->vid],
    );
  }
  
  foreach ($already_enabled as $vid => $enabled) {
    if (!$enabled) {
      continue;
    }
    
    $form["rd_videos_tax:{$vid}"] = array(
      '#type' => 'fieldset',
      '#title' => $vocs[$vid]->name,
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    
    $views_options = videos_get_view_options('page');
    $form["rd_videos_tax:{$vid}"]["rd_videos_tax:{$vid}:replacement_view"] = array(
      '#type' => 'select',
      '#title' => 'View that will replace the default Drupal taxonomy page',
      '#options' => $views_options,
      '#default_value' => variable_get("rd_videos_tax:{$vid}:replacement_view", NULL),
    );
  }
  
  return system_settings_form($form);
}

function videos_views_query_alter(&$view, &$query) {
  switch($view->name) {
    case 'related_videos':
      //$tid = _videos_get_tid(1 ,arg(1)); // 1 : Channels
      $artist = _videos_get_tid(2 ,arg(1)); // 2 : Artists
      $clause = $query->where[0]['clauses'][2];
      $query->where[0]['clauses'][2] = '(' . $clause . ' OR term_node.tid = %d)';
      $query->where[0]['args'][] = $artist;
    break;
  }
}

function _videos_get_tid($vid, $tid) {
  $args[] = $vid; // vid Channels
  $args[] = $tid; // tid
  $query =  'SELECT t.tid FROM term_data t INNER JOIN {term_node} tn ON t.tid = tn.tid WHERE t.vid = %d AND tn.nid = %d';
  $result = db_query($query, $args);
  $row = db_fetch_object($result);
  $output = $row->tid;

  return $output;
}

function videos_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && in_array($form['#id'], array('views-exposed-form-search-default','views-exposed-form-search-page-1'))) {
    drupal_add_js(drupal_get_path('module', 'videos') . '/js/jquery.clearfield.js', 'footer');
    drupal_add_js(drupal_get_path('module', 'videos') . '/js/formclear.js', 'footer');
    $form['submit']['#value'] = 'Search';
    $form['keys']['#default_value'] = 'Enter the terms you wish to search for.';
    $form['keys']['#attributes']['class'] = 'clearField';
  }
}

include_once('videos.features.inc');
