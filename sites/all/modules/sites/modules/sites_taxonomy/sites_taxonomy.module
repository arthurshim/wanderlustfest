<?php

// $Id$

module_load_include('inc', 'sites_taxonomy', 'sites_taxonomy.admin');

/**
 * Implementation of hook_menu().
 */
function sites_taxonomy_menu() {
  $items = array();
  
  $items['admin/build/sites/taxonomy'] = array(
    'title' => 'Sites Taxonomy',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_taxonomy_admin_form_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer sites'),
    'file' => 'sites_taxonomy.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/build/sites',
    'weight' => 10,
  );
  
  $items['admin/build/sites/taxonomy/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/build/sites/taxonomy/terms'] = array(
    'title' => 'Term/Site pairs',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_taxonomy_admin_form_terms_sites'),
    'access callback' => 'user_access',
    'access arguments' => array('administer sites'),
    'file' => 'sites_taxonomy.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/build/sites/taxonomy',
    'weight' => 20,
  );
  
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function sites_taxonomy_form_alter(&$form, $form_state, $form_id) {
  module_load_include('inc', 'sites', 'sites.helpers');
  $vid = sites_taxonomy_get_vid();
  $voc = taxonomy_vocabulary_load($vid);
  if (_sites_form_is_node_form($form, $form_id) && isset($form['options']['sites']['#type']) && $voc && isset($voc->nodes[$form['#node']->type])) {
    // if sites is present on the form
    if (isset($form['options']['sites'])) {
      // hide the Sites module form
      if (variable_get('sites_taxonomy_hide_sites_on_node_form', TRUE)) {
        $form['options']['sites']['#type'] = 'hidden';
        $form['options']['sites']['#value'] = $form['options']['sites']['#default_value'];
        unset($form['options']['sites']['#default_value']);
      }
      
      // add sites_taxonomy validate hook to top of validate stack
      array_unshift($form['#validate'], 'sites_taxonomy_node_form_validate');
    }
  }
}

/**
 * Validate hook for node forms.
 *
 * Reads the selected values in the vocabulary form associated with Sites and populates the node's sites
 * with the correct data.
 */
function sites_taxonomy_node_form_validate($form, &$form_state) {
  $sites_vid = sites_taxonomy_get_vid();
  
  if (isset($form_state['values']['taxonomy'][$sites_vid])) {
    $warning = 'This node is tagged with a term from the vocabulary used by the Sites module, but that term is not associated with any of your sites.  To correct this problem, navigate to ' . l('the Sites Taxonomy terms/sites association page', 'admin/build/sites/taxonomy/terms') . '.';
    
    if (is_array($form_state['values']['taxonomy'][$sites_vid])) { // multiple terms permitted per node by this vocab
      $form_state['values']['sites'] = array();
      foreach ($form_state['values']['taxonomy'][$sites_vid] as $tid) {
        if ($tid > 0) {
          if (($selected_sid = sites_taxonomy_get_sid_by_tid((int)$tid)) !== FALSE) { // retval of 0 indicates the 'all sites' term, FALSE is no term
            if ($selected_sid > 0) {
              $form_state['values']['sites'][$selected_sid] = $selected_sid;
            }
          }
          else {
            drupal_set_message($warning, 'warning');
          }
        }
      }
    }
    else if ((int)$form_state['values']['taxonomy'][$sites_vid] > 0) { // only one term permitted per node by this vocab
      $form_state['values']['sites'] = array();
      if (($selected_sid = sites_taxonomy_get_sid_by_tid((int)$form_state['values']['taxonomy'][$sites_vid])) !== FALSE) { // retval of 0 indicates the 'all sites' term, FALSE is no term
        if ($selected_sid > 0) {
          $form_state['values']['sites'][$selected_sid] = $selected_sid;
        }
      }
      else {
        drupal_set_message($warning, 'warning');
      }
    }
  }
}

/**
 * Returns the site id associated with a given taxonomy term id.
 *
 * @param $tid
 *   Taxonomy term id.
 *
 * @return
 *   Site id, 0 if the tid is the 'all sites' tid, or FALSE if an invalid tid is supplied.
 */
function sites_taxonomy_get_sid_by_tid($tid) {
  if ($tid) {
    if ($tid == variable_get('sites_taxonomy_tid_all_sites', NULL)) {
      return 0; // 0 for 'all sites'
    }
    $q = "SELECT sid FROM {sites} WHERE tid=%d";
    $res = db_query($q, $tid);
    $sid = db_result($res);
    return $sid;
  }
  return FALSE;
}

/**
 * Returns the all taxonomy term ids associated with a given site id.
 *
 * @param $sid
 *   Unique site id.
 *
 * @return
 *   Array containing zero or more tids.
 */
function sites_taxonomy_get_tids_by_sid($sid) {
  if ($sid) {
    $q = "SELECT tid FROM {sites} WHERE sid=%d";
    $res = db_query($q, $sid);
    $tids = array();
    while ($tid = db_result($res)) {
      $tids[] = $tid;
    }
    return $tids;
  }
  return FALSE;
}

/**
 * Get the vid of the vocabulary currently associated with the Sites module.
 *
 * @return
 *   Vocabulary id.
 */
function sites_taxonomy_get_vid() {
  return variable_get('sites_taxonomy_vid', NULL);
}

/**
 * Get all tids in the current Sites vocabulary.
 *
 * @return
 *   Array of tids.
 */
function sites_taxonomy_get_sites_vocabulary_tids() {
  static $tids = NULL;

  if ($tids == NULL) {
    $tids = array();
    $vid = sites_taxonomy_get_vid();
    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $term) {
      $tids[] = $term->tid;
    }
  }
  
  return $tids;
}

/**
 * Remove all Sites vocabulary terms from a node.
 *
 * @param
 *   Node object.
 *
 * @return
 *   Node without Sites terms.
 */
function sites_taxonomy_remove_all_sites_terms($node) {
  $tids = sites_taxonomy_get_sites_vocabulary_tids();
  foreach ($tids as $tid) {
    if ($node->taxonomy[$tid]) {
      unset($node->taxonomy[$tid]);
    }
  }
  return $node;
}

/**
 * Implementation of hook_sites_clone_node_alter (see sites_clone.module).
 */
function sites_taxonomy_sites_clone_node_alter(&$node, $original_node) {
  dsm(array('node' => $node, 'orig' => $original_node), "!!sites_tax clone node alter begin");
  if (sites_taxonomy_get_vid()) { // only act if there's a vid selected
    $node = sites_taxonomy_remove_all_sites_terms($node);
    // add current tids
    foreach ($node->sites as $sid) {
      foreach (sites_taxonomy_get_tids_by_sid($sid) as $tid) {
        $node->taxonomy[$tid] = $tid; // all taxonomy.module needs for saving the tid/nid relationship is the tid
      }
    }
  }
  dsm(array('node' => $node, 'orig' => $original_node), "!!sites_tax clone node alter end");
}


