<?php

// $Id$

/**
 * Implementation of hook_form_alter().
 */
function sites_path_aliasing_helper_form_alter(&$form, $form_state, $form_id) {  
  if (module_exists('sites_path_aliasing')) {
    module_load_include('inc', 'sites', 'sites.helpers');
    module_load_include('inc', 'sites_path_aliasing', 'sites_path_aliasing.helpers');
    if (_sites_form_is_node_form($form, $form_id)) {
      $node = $form['#node'];
      $prefix = sites_path_aliasing_extract_sites_prefix($node->path);
      
      if (!empty($prefix)) {
        $node->allow_shared_alias = TRUE;
      }
      else {
        $node->allow_shared_alias = FALSE;
      }
    
      $form['path']['allow_shared_alias'] = array(
        '#type' => 'checkbox',
        '#title' => t('Share alias across sites'),
        '#default_value' => $node->allow_shared_alias,
        '#description' => t('Check this box if you would like to be able to use this URL alias for other nodes on other sites (for example, if you want different versions of a page on different sites but all with the same path alias).  Note that you cannot make this alias point to some other node on the same site(s) as this node.'),
        '#weight' => -2,
      );
    
      // remove sites prefix from path textfield and node object so we can re-add later
      if (!empty($form['path']['path']['#default_value'])) {
        sites_path_aliasing_remove_sites_prefix($form['path']['path']['#default_value']);
        //sites_path_aliasing_remove_sites_prefix($node->path);
        //$form['path']['path']['#default_value'] = preg_replace('/^sites:[\d,]+\//', '', $form['path']['path']['#default_value']);
        //$node->path = preg_replace('/^sites:[\d,]+\//', '', $node->path);
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function sites_path_aliasing_helper_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  // bail out before doing any processing if this node doesn't want a shared alias or pathauto has already added it
  if (!isset($node->allow_shared_alias) || $node->allow_shared_alias == FALSE) {
    return;
  }
  
  switch ($op) {
    case 'insert':
    case 'update':
        // find the path that was just created or updated by either path or pathauto, sites-prefix it, and
        // link it to a set of records in the sites_path_aliasing tables
        $res = db_query("SELECT u.pid, u.dst FROM {url_alias} u WHERE u.src = 'node/%d'", $node->nid);
        if ($row = db_fetch_array($res)) {
          $alias = $row['dst'];
          $pid = $row['pid'];
      
          if (!empty($pid) && !empty($alias)) {
            if (!sites_node_has_sites($node)) { // remove shared path entry
              sites_path_aliasing_remove_shared_path_record($node->nid, 'nid');
            }
            else {
              sites_path_aliasing_remove_sites_prefix($alias);
              $shared_path = new shared_path(NULL, $pid, $alias, $node->sites);

              $res = db_query("SELECT ssp.spid FROM {sites_shared_paths} ssp WHERE pid = %d", $pid); // look for existing shared_path record
              $success = FALSE;
              if ($spid = db_result($res)) {
                $shared_path->spid = $spid;
                $success = drupal_write_record('sites_shared_paths', $shared_path, 'spid');
                db_query("DELETE FROM {sites_sid_spid} WHERE spid = %d", $shared_path->spid); // remove old sids for this spid
              }
              else {
                $success = drupal_write_record('sites_shared_paths', $shared_path); // insert new record
              }
          
              // record which sites this shared_path is used on
              if ($success && $shared_path->spid) {
                $values_sql = array();
                $values = array();
                foreach ($node->sites as $sid) {
                  $values_sql[] = '(%d, %d)';
                  $values[] = $sid;
                  $values[] = $shared_path->spid;
                }
                $values_sql = implode(', ', $values_sql);
                $success = db_query("INSERT INTO {sites_sid_spid} (sid, spid) VALUES $values_sql", $values);
              }
            }
            
            _sites_path_aliasing_cache_ready(FALSE); // invalidate cache
          }
          else {
            if (!empty($node->old_pid)) { // node had a path but now does not
              sites_path_aliasing_remove_shared_path_record($node->nid, 'nid');
            }
          }
        }
      break;
      
    default:
      break;
  }
}

/**
 * Implementation of hook_node_export_node_bulk_alter (used by import_export as well as plain old node_export).
 */
function sites_path_aliasing_helper_node_export_node_bulk_alter(&$nodes, $op) {
  if ($op == 'import') {
    foreach ($nodes as &$node) {
      if (sites_path_aliasing_extract_sites_prefix($node->path)) {
        $node->allow_shared_alias = TRUE;
        sites_path_aliasing_remove_sites_prefix($node->path);
      }
    }
  }
}

/**
 * Implementation of hook_import_export_new_node_alter (see Import Export's node plugin).
 */
function sites_path_aliasing_helper_import_export_node_alter(&$node, $op, $origin_namespace) {
  // @@TODO: do we need to vary what we're doing based on if $op is 'create' or 'update'?
  drupal_debug($node->path, '##SPA node path (nid: '.$node->nid.')');
  // if not using path aliases, don't bother with any of this
  if (isset($node->path) && strlen(trim($node->path)) > 0) {
    
    drupal_debug($node->sites, '##SPA node sites (nid: '.$node->nid.')');
    
    $has_shared_alias = FALSE;
    // recreate the sites prefix using the new site IDs
    if (sites_path_aliasing_extract_sites_prefix($node->path)) { // if the node is already sites-prefixed
      drupal_debug('##SPA extract sites prefix (nid: '.$node->nid.')');
      sites_path_aliasing_remove_sites_prefix($node->path);
      $node->path = sites_path_aliasing_make_prefix($node) . '/' . $node->path;
      drupal_debug($node->path, '##SPA prefixed node path (nid: '.$node->nid.')');
      
      if ($collision_nid = sites_path_aliasing_alias_in_use($node->path, $node)) { // @@TODO test to see if it's in use by the translated version of this node
        if ($collision_nid == $node->nid && $op == 'update') { // just colliding with its previously-imported self
          // @@TODO: do nothing?
        }
        else {
          drupal_debug('##SPA unfixable alias collision');
          //@@TODO: visible error
          return;
        }
      }
      
      $has_shared_alias = TRUE;
    }

    // check for basic (non-shared alias) collisions and try to fix them by creating shared aliases
    $already_exists = FALSE;
    if ($op == 'update') {
      $dest_nid = import_export_translate_id($origin_namespace, 'nid', $node->nid);
      $src = drupal_lookup_path('source', $node->path);
      if ($src != FALSE and $src != "node/$dest_nid") { // if the 'collision' is not actually just the existing node awaiting its update
        $already_exists = TRUE;
      }
    }
    else if ($op == 'create') {
      $src = drupal_lookup_path('source', $node->path);
      $already_exists = ($src != FALSE);
    }
    
    if ($already_exists) { // this path already exists in the system
      drupal_debug($src, '##SPA collision (nid: '.$node->nid.')');
      if (substr($src, 0, 5) == 'node/') { //@@TODO: this if statement only handles exact collisions, not partial sites-path-aliasing collisions... we can't handle partial collisions, so don't bother to try
        $other_nid = (int)substr($src, 5);
        $other_node = node_load($other_nid);
        $conflict_resolved = FALSE;
        drupal_debug($other_node->nid, '##SPA other node (nid: '.$node->nid.')');
        
        // @@TODO: maybe prefix the new node first, and try not to prefix any existing nodes if possible?
        
        // try to prefix the existing node's url if it has sites
        if (sites_node_has_sites($other_node) && !sites_path_aliasing_alias_in_use($other_node->path, $other_node)) {
          drupal_debug($node->path, '##SPA asdfasdf (nid: '.$node->nid.')');
          $other_node->allow_shared_alias = TRUE;
          $other_node->pathauto_perform_alias = FALSE;
          $other_node->path = sites_path_aliasing_make_prefix($other_node) . '/' . $other_node->path;
          drupal_debug($other_node->path, '##SPA other_node path (nid: '.$node->nid.')');
          $other_node->pid = db_result(db_query("SELECT pid FROM {url_alias} WHERE src = '%s' AND language = '%s'", 'node/' . $other_node->nid, $other_node->language));
          drupal_debug($other_node->pid, '##SPA other_node pid (nid: '.$node->nid.')');
          node_save($other_node);
          $conflict_resolved = TRUE;
        }
        
        // try to prefix the new node's url if it has sites
        if (!$has_shared_alias && sites_node_has_sites($node) && !sites_path_aliasing_alias_in_use($node->path, $node)) {
          sites_path_aliasing_remove_sites_prefix($node->path);
          $node->path = sites_path_aliasing_make_prefix($node) . '/' . $node->path;
          $node->allow_shared_alias = TRUE;
          $node->pathauto_perform_alias = FALSE;
          _sites_path_aliasing_cache_ready(FALSE);
          $conflict_resolved = TRUE;
        }
        
        if (!$conflict_resolved) {
          unset($node->path);
          drupal_set_message('The path of global node "'.$other_node->title.'" (nid: '.$other_node->nid.') conflicts with new global node "'.$node->title.'" being created for this import.  The new node has been set to not use any URL alias.');
          return;
        }
      }
      else {
        // node does not actually exist, it seems
        // @@TODO: informational message or try to override path?
      }
    }
  }
}
