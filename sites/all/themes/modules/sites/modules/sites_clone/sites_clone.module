<?php

// $Id$

global $fake_menu, $nodes;
$fake_menu = array();
$nodes = array();

function sites_clone_init() {
  if (!empty($_GET['oldmenu']) && !empty($_GET['newname']) && !empty($_GET['new_sid'])) {
    sites_clone_menu_tree($_GET['oldmenu'], $_GET['newname'], $_GET['new_sid']);
  }
}

function sites_clone_menu() {
  $items = array();
  
  $items['admin/build/sites/clone'] = array(
    'title' => 'Sites Clone',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_clone_admin_form'),
    'access arguments' => array('administer sites'),
    'file' => 'sites_clone.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/build/sites',
    'weight' => 15,
  );
  
  $items['admin/build/sites/clone/clone'] = array(
    'title' => 'Clone a site',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  
  $items['admin/build/sites/clone/undo'] = array(
    'title' => 'Undo a clone',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_clone_undo_form'),
    'access arguments' => array('administer sites'),
    'file' => 'sites_clone.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/build/sites/clone',
    'weight' => 16,
  );
  
  $items['admin/build/sites/clone/undo/%'] = array(
    'title' => 'Undo',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_clone_undo_confirm_form', 5),
    'access arguments' => array('administer sites'),
    'file' => 'sites_clone.admin.inc',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function sites_clone_menu_tree($name, $new_name, $sid) {
  $menu = menu_tree_all_data($name);
  dsm($menu, "menu_tree_all_data($name)");
  
  if (function_exists('_sites_path_aliasing_cache_ready')) {
    _sites_path_aliasing_cache_ready(FALSE);
  }
  
  sites_clone_reset_active_clone_record();
  sites_clone_modify_active_clone_record('original menu name', $name);
  sites_clone_modify_active_clone_record('new menu name', $new_name);
  sites_clone_modify_active_clone_record('sid', $sid);
  
  sites_clone_menu_recurse($new_name, $menu, $sid);
  
  $clone = sites_clone_get_active_clone_record();
  sites_clone_add_undo_step($clone);
}

function sites_clone_reset_active_clone_record() {
  _sites_clone_set_active_clone_record(NULL, FALSE);
}

function sites_clone_get_active_clone_record() {
  return _sites_clone_set_active_clone_record();
}

function _sites_clone_set_active_clone_record($data = NULL, $reset = FALSE) {
  static $record = NULL;
  
  if ($reset) {
    $record = NULL;
  }
  
  if ($data) {
    $record = $data;
  }
  return $record;
}

function sites_clone_modify_active_clone_record($op, $arg, $arg2 = NULL) {
  if (!$op || !$arg) {
    return FALSE;
  }
  
  $record = sites_clone_get_active_clone_record();
  switch ($op) {
    case 'add node':
      // $arg is original nid, $arg2 is new nid
      $record['nodes'][$arg] = $arg2;
      break;
    
    case 'node already cloned':
      $record['nodes already cloned'][] = $arg;
      break;
      
    case 'node is global':
      $record['global nodes'][] = $arg;
      break;
      
    case 'new menu name':
      $record['new menu name'] = $arg;
      break;
      
    case 'original menu name':
      $record['original menu name'] = $arg;
      break;
    
    case 'sid':
      $record['sid'] = $arg;
      break;
      
    case 'title':
      $record['title'] = $arg;
      break;
      
    case 'add message':
      if (!is_array($record['messages'])) {
        $record['messages'] = array();
      }
      $record['messages'][] = $arg;
  }
  
  return _sites_clone_set_active_clone_record($record);
}

function sites_clone_add_undo_step($clone_record) {
  $data = sites_clone_get_archived_clone_records();
  
  // @@TODO: error check
  $cids = array_keys($data);
  if (count($cids) > 0) {
    $max = max($cids);
  }
  else {
    $max = -1;
  }
  $clone_record['timestamp'] = time();
  $data[$max + 1] = $clone_record;
  ksort($data); // why not keep it in order?
  variable_set('sites_clone_undo_data', serialize($data));
}

function sites_clone_remove_undo_step($cid) {
  $data = sites_clone_get_archived_clone_records();
  if (!isset($data[$cid])) {
    return FALSE;
  }
  unset($data[$cid]);
  variable_set('sites_clone_undo_data', serialize($data));
}

function sites_clone_undo_clone($cid) {
  $data = sites_clone_get_archived_clone_records();
  if (!isset($data[$cid])) {
    return FALSE;
  }
  
  $clone = $data[$cid];
  if ($clone && is_array($clone) && count($clone) > 0) {
    foreach ((array)$clone['nodes'] as $nid) {
      node_delete($nid);
    }
    if (!empty($clone['menu'])) {
      sites_clone_undo_delete_menu($clone['menu']);
    }
  }
  
  sites_clone_remove_undo_step($cid);
}

function sites_clone_undo_delete_menu($menu_name) {
  // System-defined menus may not be deleted - only menus defined by the menu module.
  if (in_array($menu_name, menu_list_system_menus())  || !db_result(db_query("SELECT COUNT(*) FROM {menu_custom} WHERE menu_name = '%s'", $menu_name))) {
    return;
  }
  // Reset all the menu links defined by the system via hook_menu.
  $result = db_query("SELECT * FROM {menu_links} ml INNER JOIN {menu_router} m ON ml.router_path = m.path WHERE ml.menu_name = '%s' AND ml.module = 'system' ORDER BY m.number_parts ASC", $menu_name);
  while ($item = db_fetch_array($result)) {
    menu_reset_item($item);
  }
  // Delete all links to the overview page for this menu.
  $result = db_query("SELECT mlid FROM {menu_links} ml WHERE ml.link_path = '%s'", 'admin/build/menu-customize/'. $menu_name);
  while ($m = db_fetch_array($result)) {
    menu_link_delete($m['mlid']);
  }
  // Delete all the links in the menu and the menu from the list of custom menus.
  db_query("DELETE FROM {menu_links} WHERE menu_name = '%s'", $menu_name);
  db_query("DELETE FROM {menu_custom} WHERE menu_name = '%s'", $menu_name);
  // Delete all the blocks for this menu.
  db_query("DELETE FROM {blocks} WHERE module = 'menu' AND delta = '%s'", $menu_name);
  db_query("DELETE FROM {blocks_roles} WHERE module = 'menu' AND delta = '%s'", $menu_name);
  menu_cache_clear_all();
  cache_clear_all();
}

function sites_clone_get_archived_clone_records($cid = NULL) {
  static $data = NULL;
  if (!$data) {
    $data = unserialize(variable_get('sites_clone_undo_data', ''));
  }
  
  if (is_array($data) && count($data) > 0) {
    if ($cid && isset($data[$cid])) {
      $clone = $data[$cid];
      if ($clone && is_array($clone) && count($clone) > 0) {
        return $clone;
      }
      else {
        return FALSE;
      }
    }
    else {
      return $data;
    }
  }
  return array();
}

function sites_clone_menu_recurse($new_name, $items, $sid, $parent = NULL) {
  foreach ($items as $item) {
    $link = $item['link'];
    $children = $item['below'];
    
    if ($parent) {
      $link['plid'] = $parent['mlid'];
    }
    $link['mlid'] = 0; // reset the mlid
    $link['menu_name'] = $new_name;
    
    // get rid of the parent hierarchy -- menu_link_save should build this for us
    for ($i = 1; $i < 10; $i++) {
      unset($link["p$i"]);
    }
    unset($link['in_active_trail']);
    unset($link['depth']);
    
    // if this item points to a node, clone the node and make the item point to the new nid
    if ($link['router_path'] == 'node/%') {
      $new_nid = sites_clone_node_from_menu_link($link, $sid);
      if ($new_nid) {
        $link['link_path'] = "node/$new_nid";
        $link['href'] = "node/$new_nid";
      }
      else {
        $n = node_load($nid);
        drupal_set_message('Error cloning node "'.$n->title.'"', 'error');
        continue;
      }
    }
    else { 
    }
    
    if ($mlid = menu_link_save($link)) {
      $link['mlid'] = $mlid;
      if ($children) {
        sites_clone_menu_recurse($new_name, $children, $sid, $link);
      }
    }
    else {
      drupal_set_message('Error cloning menu item "'.$link['link_path'].'"', 'error');
    }
  }
}

/**
 *  Clones node given a menu link pointing to that node.
 *
 *  @param $link
 *    Menu link object.  Must have the 'link_path' property, set to
 *    'node/XXX' where XXX is the node ID.
 *
 *  @param $sid
 *    Site ID for new nodes.
 *
 *  @return
 *    Associative array of the form: OLD NID => NEW NID
 */
function sites_clone_node_from_menu_link($link, $sid) {
  $nid = (int)str_replace('node/', '', $link['link_path']);
  $return = sites_clone_node($nid, $sid);
  dsm(array('link'=>$link, 'return'=>$return), "sites_clone_node_from_menu_link: (sid-$sid, nid-$nid)");
  return $return;
}

/**
 *  Clones a list of nodes specified by nid.
 *
 *  @param $nids
 *    Array of node IDs.
 *
 *  @param $sid
 *    Site ID for new nodes.
 *
 *  @return
 *    Associative array of the form: OLD NID => NEW NID
 */
function sites_clone_clone_by_nid($nids, $sid) {
  if (!is_array($nids)) {
    return FALSE;
  }
  
  $return = array();
  foreach ($nids as $nid) {
    $new_nid = sites_clone_node($nid, $sid);
    $return[$nid] = $new_nid;
  }
  return $return;
}



/**
 *  Clones a node and attaches it to the given site.
 *
 *  @param $nid
 *    Node id of node to be cloned.
 *
 *  @param $sid
 *    Site id of site to which to attach newly created node.
 *
 *  @return
 *    Node id of cloned node or NULL if node could not be cloned.
 */
function sites_clone_node($nid, $sid) {
  dsm("sites clone node: (nid $nid), (sid $sid)");
  static $cloned_nodes = array();
  
  if (is_numeric($nid)) {
    // if this node has already been cloned once, return the nid of the clone
    if ($cloned_nodes[$nid]) {
      dsm("sites clone node: node already cloned (nid $nid), (sid $sid)");
      sites_clone_modify_active_clone_record('node already cloned', $nid);
      return $cloned_nodes[$nid];
    }
    
    global $user;
    $node = node_load($nid);
    if (isset($node->nid)) {
      if (is_array($node->sites) && count($node->sites) > 0) {
        $original_node = node_load($nid);

        $node->nid = NULL;
        $node->vid = NULL;
        $node->tnid = NULL;
        $node->name = $user->name;
        $node->uid = $user->uid;
        $node->created = NULL;
        unset($node->menu);
        $node->book['mlid'] = NULL;
        
        // Add an extra property as a flag.
        $node->clone_from_original_nid = $original_node->nid;
        
        $node->sites = array($sid => $sid);
        
        // Let other modules do special fixing up.
        // The function signature is: hook_sites_clone_node_alter(&$node, $original_node)
        drupal_alter('sites_clone_node', $node, $original_node);
        node_save($node);
        if ($node->nid) {
          drupal_set_message("Cloned node: original nid '{$nid}', new nid '{$node->nid}'.");
          sites_clone_modify_active_clone_record('add node', $nid, $node->nid);
          $cloned_nodes[$original_node->nid] = $node->nid;
          return $node->nid;
        }
        else { // did not save correctly
          drupal_set_message("Could not save cloned node with original nid '{$nid}'.", 'error');
          return NULL;
        }
      }
      else { // if the node is not assigned to any sites, assume that it's global and should not be cloned
        drupal_set_message("Node is global (nid:'{$nid}').");
        sites_clone_modify_active_clone_record('node is global', $nid);
        return $node->nid;
      }
    }
    else { // !isset($nid)
      drupal_set_message("!isset(nid) orig nid:'{$nid}'.", 'error');
      return NULL;
    }
  }
  else { // !is_numeric($nid)
    drupal_set_message("!is_numeric(nid) orig nid:'{$nid}'.", 'error');
    return NULL;
  }
}

