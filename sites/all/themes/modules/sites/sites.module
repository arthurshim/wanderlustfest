<?php

// $Id: sites.module,v 1.2.2.7 2010/06/25 01:13:04 brynbellomy Exp $

// cannot use module_load_include because implementing hook_boot means this code is executed before that function is available
require_once 'site.inc';
require_once 'sites.core.inc';
require_once 'sites.context.inc';
require_once 'sites.views.inc';
require_once 'sites.helpers.inc';
require_once 'sites.maintenance.inc';

/**
 * Implementation of hook_boot().
 *
 * Required to make sure that sites functions are loaded early enough in the
 * bootstrap process that sites_path_aliasing can use them if it's enabled.
 */
function sites_boot() {
  // @@TODO: make cookie compatible with caching
}

/**
 * Implementation of hook_init().
 */
function sites_init() {
 // global $user;
  // @@TODO: create an interface for maintenance tasks
  if ($_GET['maintenance'] == 'maintenance') {
    sites_do_maintenance();
    drupal_set_message('Sites maintenance complete.');
  }
  
  if (function_exists('strongarm_set_conf')) {
    // Reset strongarm configuration.
    strongarm_set_conf(TRUE);
  }
  
  // Set current site name
  global $conf;
  $site = sites_get_current_site();
  
  /*
  if ($user->uid == 1) {
    drupal_set_message('<pre>' . print_r($site, 1) . '</pre>');
  }*/
  if ($site->name) {
    $conf['site_name'] = $site->name;
  }

  // @@TODO: make this configurable

 // sites_set_current_site_cookie();

}

/**
 * Set a cookie recording the most recent site the user visited.
 */
function sites_set_current_site_cookie() {

  if(isset($_COOKIE['drupal_sites_module_most_recent_site'])) {
    _sites_most_recent_site_sid((int)$_COOKIE['drupal_sites_module_most_recent_site']);
  }
  $site = sites_get_current_site();
  $cookie_domain = '.' . (variable_get('purl_base_domain', NULL) ? str_replace('http://', '', variable_get('purl_base_domain', NULL)) : $_SERVER['HTTP_HOST']);
  // @@TODO: document this alter
  //drupal_alter('sites_cookie_domain', $cookie_domain, $site);
  if(is_object($site) && !empty($site)) {
    $success = setcookie('drupal_sites_module_most_recent_site', $site->sid, time() + 31536000, '/', $cookie_domain);
  }
}

/**
 * Read the cookie set by sites_set_current_site_cookie().  For use by
 * other modules, themes, etc.
 */
function sites_get_most_recent_visited_site_sid() {
  return _sites_most_recent_site_sid();
}

function _sites_most_recent_site_sid($sid = NULL) {
  static $sites_most_recent_site = NULL;
  if ($sid) {
    $sites_most_recent_site = $sid;
  }
  return $sites_most_recent_site;
}

/**
 * Implementation of hook_menu().
 */
function sites_menu() {
  $items['admin/build/sites'] = array(
    'title' => 'Sites',
    'description' => 'Manage the different sites utilizing this Drupal codebase.',
    'page callback' => 'sites_list_sites',
    'access arguments' => array('administer sites'),
    'file' => 'sites.admin.inc',
  );
  
  $items['admin/build/sites/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/build/sites/add'] = array(
    'title' => 'Add site',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_site_form'),
    'access arguments' => array('administer sites'),
    'type' => MENU_LOCAL_TASK,
    'parent' => 'admin/build/sites',
    'file' => 'sites.admin.inc',
  );

  $items['admin/build/sites/edit/%'] = array(
    'title' => 'Edit site',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_site_form', 4),
    'access arguments' => array('administer sites'),
    'parent' => 'admin/build/sites',
    'file' => 'sites.admin.inc',
  );

  $items['admin/build/sites/delete/%'] = array(
    'title' => 'Delete site',
    'description' => '',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sites_site_delete_form', 4),
    'access arguments' => array('administer sites'),
    'parent' => 'admin/build/sites',
    'file' => 'sites.admin.inc',
  );

  return $items;
}

/**
 * Implementation of template_preprocess_page
 */
function sites_preprocess_page(&$vars) {
  // Some themes acquire their primary_links and secondary_links variables via
  // these variables.  For themes that do not, we have provided a Strongarm
  // implementation in sites_strongarm()
  if ($pl = sites_get_current_menu_source('primary_links')) {
    $vars['primary_links'] = menu_navigation_links($pl);
  }

  if ($sl = sites_get_current_menu_source('secondary_links')) {
    $vars['secondary_links'] = menu_navigation_links($sl);
  }
}

/**
 * Implementation of hook_perm
 */
function sites_perm() {
  return array('administer sites', 'access nodes on all sites');
}

/**
 * Implementation of hook_form_alter().
 */
function sites_form_alter(&$form, $form_state, $form_id) {
  if (_sites_form_is_node_form($form, $form_id)) {
    $node = $form['#node'];
    $sites = _sites_get_sites();
    $options = array();
    foreach ($sites as $site) {
      $options[(string)$site->sid] = $site->title;
    }

    $default = array();
    if (isset($node->sites)) {
      foreach ($node->sites as $sid) {
        $default[(string)$sid] = (string)$sid;
      }
    }
    if (count($default) == 0) {
      $default = NULL;
    }

    if (count((array)$sites) > 0) {
      $form['options']['sites'] = array(
        '#title' => t('Sites'),
        '#description' => t('Select site to publish this node to. Leaving blank will allow node to be published everywhere.'),
        '#type' => 'select',
        '#size' => 5,
        '#multiple' => TRUE,
        '#parents' => array('sites'),
        '#default_value' => $default,
        '#options' => $options,
        '#required' => FALSE,
      );
    }
    else {
      $form['options']['sites'] = array(
        '#title' => t('Sites'),
        '#value' => 'To assign nodes to sites, you must first create sites on the ' . l('admin/build/sites', 'Sites module administration page') . '.',
      );
    }
  }
}

/**
 * Implementation of hook_nodeapi()
 */
function sites_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'load') {
    $node->sites = sites_get_node_sites($node->nid);
  }
  else if ($op == 'insert' || $op == 'update') {
    _sites_attach_node_to_sites($node->nid, (array)$node->sites);
  }
  else if ($op == 'delete') {
    _sites_attach_node_to_sites($node->nid, NULL); // remove node from all sites
  }
}

/**
 * Implementation of hook_block()
 */
function sites_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $block = array();
    $block['current_site']['info'] = t('Current site information');
    return $block;
  }
  else if ($op == 'view') {
    switch ($delta) {

      case 'current_site':
        $block = array(
	      'subject' => t('Current Site'),
	      'content' => sites_block_sites(),
	    );
	    break;

	  default:
	    break;
    }

    return $block;
  }
}


function sites_block_sites() {
  $site = sites_get_current_site();

  $output = "

    <div class='row'>
      <span class='label'>SID:</span>
      <span class='field sid'>{$site->sid}</span>
    </div>
    <div class='row'>
      <span class='label'>Administrative title:</span>
      <span class='field title'>{$site->title}</span>
    </div>
    <div class='row'>
      <span class='label'>Name:</span>
      <span class='field name'>{$site->name}</span>
    </div>
    <div class='row'>
      <span class='label'>PURL prefix:</span>
      <span class='field purl_prefix'>{$site->purl_prefix}</span>
    </div>
    <div class='row'>
      <span class='label'>Front page:</span>
      <span class='field front_page'>{$site->front_page}</span>
    </div>
    <div class='row'>
      <span class='label'>Primary links:</span>
      <span class='field menu_primary_links'>{$site->menu_primary_links}</span>
    </div>
    <div class='row'>
      <span class='label'>Secondary links:</span>
      <span class='field menu_secondary_links'>{$site->menu_secondary_links}</span></div>
    

  ";
  return $output;
}

/**
 * Determine whether the current user can access a given node.
 *
 * @param $node
 *   Node object.
 *
 * @return
 *   Boolean.
 */
function sites_access($node) {
  global $user;
  
  $permitted = TRUE; // allow nodes without a defined site to be accessed freely by default
  if (sites_node_has_sites($node)) {
    $permitted = in_array(sites_get_current_site()->sid, $node->sites);
  }
  if (user_access('access nodes on all sites') && $_GET['sites_non_admin'] != 1) {
    $permitted = TRUE;
  }
  
  sites_invoke_siteapi($permitted, 'access node', $node);
  drupal_alter('sites_node_access', $permitted, $node);
  return $permitted;
}

/**
 * Implementation of hook_siteapi()
 */
function sites_siteapi(&$obj, $op, $a1, $a2) {
  switch ($op) {
    case 'access node':
    case 'before insert site':
    case 'after insert site':
    case 'before update site':
    case 'after update site':
    case 'before delete site':
    case 'after delete site':
    case 'before set current site':
    case 'after set current site':
    case 'attach node to sites':
      break;
      
    default:
      break;
  }
}

/**
 * Invoke a hook_siteapi() operation in all modules.
 *
 * @param &$alter
 *   A site object, a node, a sid, or NULL.
 * @param $op
 *   A string containing the name of the siteapi operation.
 *   Possible values:
 *     'load site': $alter is the site object.
 *     'before insert site': $alter is the site object of the site to be
 *        inserted.  $a3 is the $form_state array with any fields inserted by other
 *        modules.  $a4 is the $form_id.
 *     'after insert site': $alter is the site object of the site that was
 *        inserted.  $a3 is the $form_state array with any fields inserted by other
 *        modules.  $a4 is the $form_id.
 *     'before update site': $alter is the site object of the site to be
 *        updated.  $a3 is the $form_state array with any fields inserted by other
 *        modules.  $a4 is the $form_id.
 *     'after update site': $alter is the site object of the site that was
 *        updated.  $a3 is the $form_state array with any fields inserted by other
 *        modules.  $a4 is the $form_id.
 *     'before delete site': $alter is the site ID of the site to be deleted.
 *     'after delete site': $alter is the site ID of the deleted site.
 *     'before set current site': $alter is the site ID of the current site.
 *     'after set current site': $alter is the site object of the current site.
 *     'attach node to sites': $alter is the array of site IDs and $a3 is the node ID.
 *     'access node': $alter is a boolean value granting or denying the
 *        user access to a node.  $a3 is the node object.
 * @param $a3, $a4
 *   Arguments to pass on to the hook, after the $alter and $op arguments.
 * @return
 *   The returned value of the invoked hooks.
 */
function sites_invoke_siteapi(&$alter, $op, $a3 = NULL, $a4 = NULL) {
  $return = array();
  
  foreach (module_implements('siteapi') as $name) {
	$function = $name .'_siteapi';
    $result = $function($alter, $op, $a3, $a4);
    if (isset($result) && is_array($result)) {
      $return = array_merge($return, $result);
    }
    else if (isset($result)) {
      $return[] = $result;
    }
  }
  return $return;
}

/**
 * Implementation of hook_menu_alter()
 */
function sites_menu_alter(&$items) {
  // Restate the view-a-node menu entry with the Sites node access wrapper
  $items['node/%node'] = array(
    'title callback' => 'node_page_title',
    'title arguments' => array(1),
    'page callback' => 'node_page_view',
    'page arguments' => array(1),
    'access callback' => 'sites_menu_access_override_node_view',
    'access arguments' => array('view', 1),
    'type' => MENU_CALLBACK
  );
}

/**
 * Wrapper for node_access that allows site_access to preempt default node access rules
 */
function sites_menu_access_override_node_view($op, $node) {
  if (!sites_access($node)) return FALSE;
  else return node_access($op, $node);
}

function sites_node_access_records($node) {
  if (sites_node_has_sites($node)) {
    $grants = array();
    $grants[] = array(
      'realm' => 'sites',
      'gid' => 1,
      'grant_view' => TRUE,
      'grant_update' => TRUE,
      'grant_delete' => TRUE,
      'priority' => 0,
    );
  }
}

/**
 * Implementation of hook_strongarm().
 */
function sites_strongarm() {
  $site = sites_get_current_site();

  if ($site) {
    $export = array();

    // primary links
    $primary = sites_get_current_menu_source('primary_links');
    if ($primary) {
      $strongarm = new stdClass;
      $strongarm->disabled = FALSE;
      $strongarm->api_version = 1;
      $strongarm->name = 'menu_primary_links_source';
      $strongarm->value = $primary;

      $export['menu_primary_links_source'] = $strongarm;
    }

      // secondary links
    $secondary = sites_get_current_menu_source('secondary_links');
    if ($secondary) {
      $strongarm = new stdClass;
      $strongarm->disabled = FALSE;
      $strongarm->api_version = 1;
      $strongarm->name = 'menu_secondary_links_source';
      $strongarm->value = $secondary;

      $export['menu_secondary_links_source'] = $strongarm;
    }

    return $export;
  }
}



/**
 * Notify CTools that we'll be using the plugin API with Context and Strongarm modules
 */
function sites_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
  elseif ($module == 'strongarm' && $api == 'strongarm') {
    return array('version' => 1);
  }
}


/**
 * Implementation of hook_db_rewrite_sql()
 */
function sites_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
  if (($primary_table == 'n') && ($primary_field == 'nid') && (int)(sites_get_current_site()->sid) > 0 && !user_access('access nodes on all sites')) {
    $result = array(
      'join' => 'LEFT JOIN {site_node} site ON n.nid = site.nid',
      'where' => '(site.sid = '. sites_get_current_site()->sid .' OR site.sid is null)',
    );
    return $result;
  }
}

/**
 * Implementation of hook_purl_provider().
 */
function sites_purl_provider() {
  $items = array();
  $items['sites'] = array(
    'name' => 'Sites module',
    'description' => t('Sets a context based on PURL modifier.'),
    'callback' => 'sites_purl_set_current_site',
    'callback arguments' => NULL,
    'example' => 'somesite',
  );
  return $items;
}

/**
 * Implementation of hook_import_export_plugin_info_all_alter().
 */
/*function sites_import_export_plugin_info_all_alter($plugins) {
  
}*/

/**
 * Implementation of hook_import_export_node_alter().
 */
function sites_import_export_node_alter(&$node, $op, $origin_namespace) {
  module_load_include('inc', 'import_export', 'import_export.id_translation');
  
  if (!import_export_plugins_are_enabled('site')) {
    return;
  }
  drupal_debug($node->sites, '###SITES node_alter (nid: ' . $node->nid . ')');
  // translate site IDs
  $node_sites = (array)$node->sites; // make a copy
  foreach ($node_sites as $k => $v) {
    // only alter the sids of whatever sites are part of this import -- the rest of the sids are assumed to be the same
    if ($new_sid = import_export_translate_id($origin_namespace, import_export_plugin('site')->id_field(), $v)) {
      unset($node->sites[$v]);
      $node->sites[$new_sid] = $new_sid;
    }
  }
  drupal_debug($node->sites, '###SITES after node_alter (nid: ' . $node->nid . ')');
}
